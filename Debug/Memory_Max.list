
Memory_Max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cb4  08004cb0  08004cb0  00014cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008964  08008964  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08008964  08008964  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008964  08008964  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800896c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000009c  08008a08  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08008a08  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000848f  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001797  00000000  00000000  00028554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001725d  00000000  00000000  0002a478  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006e74  00000000  00000000  000416d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00082b57  00000000  00000000  00048549  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000cb0a0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000006a8  00000000  00000000  000cb120  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000020e4  00000000  00000000  000cb7c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c94 	.word	0x08004c94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004c94 	.word	0x08004c94

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f003 fab1 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f003 faac 	bl	80036c2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f003 ff2c 	bl	8003fd0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f003 faa0 	bl	80036c2 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200000d0 	.word	0x200000d0

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f003 fa8b 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f003 fa86 	bl	80036c2 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f003 fefe 	bl	8003fd0 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f003 fa67 	bl	80036c2 <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	200000d0 	.word	0x200000d0

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f003 fa53 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f003 fa4e 	bl	80036c2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f003 fece 	bl	8003fd0 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f003 fa42 	bl	80036c2 <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200000d0 	.word	0x200000d0

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f003 f9f7 	bl	80036c2 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f003 f9b5 	bl	80036c2 <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f002 ff32 	bl	80031d4 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f003 f9a4 	bl	80036c2 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f002 ff2a 	bl	80031d4 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f003 f99c 	bl	80036c2 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f002 ff22 	bl	80031d4 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f002 feaa 	bl	80031d4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08004cb0 	.word	0x08004cb0
 8000498:	08004cb8 	.word	0x08004cb8
 800049c:	08004cc8 	.word	0x08004cc8

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>

	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f003 f8bf 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f003 f8b4 	bl	80036c2 <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af02      	add	r7, sp, #8
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <ST7789_DrawRectangle+0x84>)
 80006a4:	f003 f80d 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80006a8:	88bc      	ldrh	r4, [r7, #4]
 80006aa:	887a      	ldrh	r2, [r7, #2]
 80006ac:	88b9      	ldrh	r1, [r7, #4]
 80006ae:	88f8      	ldrh	r0, [r7, #6]
 80006b0:	8b3b      	ldrh	r3, [r7, #24]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	f7ff ff57 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80006ba:	883c      	ldrh	r4, [r7, #0]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	88b9      	ldrh	r1, [r7, #4]
 80006c0:	88f8      	ldrh	r0, [r7, #6]
 80006c2:	8b3b      	ldrh	r3, [r7, #24]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4623      	mov	r3, r4
 80006c8:	f7ff ff4e 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80006cc:	883c      	ldrh	r4, [r7, #0]
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	8839      	ldrh	r1, [r7, #0]
 80006d2:	88f8      	ldrh	r0, [r7, #6]
 80006d4:	8b3b      	ldrh	r3, [r7, #24]
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4623      	mov	r3, r4
 80006da:	f7ff ff45 	bl	8000568 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80006de:	883c      	ldrh	r4, [r7, #0]
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	88b9      	ldrh	r1, [r7, #4]
 80006e4:	8878      	ldrh	r0, [r7, #2]
 80006e6:	8b3b      	ldrh	r3, [r7, #24]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4623      	mov	r3, r4
 80006ec:	f7ff ff3c 	bl	8000568 <ST7789_DrawLine>
	ST7789_UnSelect();
 80006f0:	2201      	movs	r2, #1
 80006f2:	2110      	movs	r1, #16
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <ST7789_DrawRectangle+0x84>)
 80006f6:	f002 ffe4 	bl	80036c2 <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	40010800 	.word	0x40010800

08000708 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4604      	mov	r4, r0
 8000710:	4608      	mov	r0, r1
 8000712:	4611      	mov	r1, r2
 8000714:	461a      	mov	r2, r3
 8000716:	4623      	mov	r3, r4
 8000718:	80fb      	strh	r3, [r7, #6]
 800071a:	4603      	mov	r3, r0
 800071c:	80bb      	strh	r3, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	807b      	strh	r3, [r7, #2]
 8000722:	4613      	mov	r3, r2
 8000724:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2bef      	cmp	r3, #239	; 0xef
 800072a:	d833      	bhi.n	8000794 <ST7789_DrawImage+0x8c>
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	2bef      	cmp	r3, #239	; 0xef
 8000730:	d830      	bhi.n	8000794 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4413      	add	r3, r2
 8000738:	3b01      	subs	r3, #1
 800073a:	2bef      	cmp	r3, #239	; 0xef
 800073c:	dc2c      	bgt.n	8000798 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800073e:	88ba      	ldrh	r2, [r7, #4]
 8000740:	883b      	ldrh	r3, [r7, #0]
 8000742:	4413      	add	r3, r2
 8000744:	3b01      	subs	r3, #1
 8000746:	2bef      	cmp	r3, #239	; 0xef
 8000748:	dc28      	bgt.n	800079c <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 800074a:	2200      	movs	r2, #0
 800074c:	2110      	movs	r1, #16
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <ST7789_DrawImage+0x9c>)
 8000750:	f002 ffb7 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	4413      	add	r3, r2
 800075a:	b29b      	uxth	r3, r3
 800075c:	3b01      	subs	r3, #1
 800075e:	b29c      	uxth	r4, r3
 8000760:	88ba      	ldrh	r2, [r7, #4]
 8000762:	883b      	ldrh	r3, [r7, #0]
 8000764:	4413      	add	r3, r2
 8000766:	b29b      	uxth	r3, r3
 8000768:	3b01      	subs	r3, #1
 800076a:	b29b      	uxth	r3, r3
 800076c:	88b9      	ldrh	r1, [r7, #4]
 800076e:	88f8      	ldrh	r0, [r7, #6]
 8000770:	4622      	mov	r2, r4
 8000772:	f7ff fd9b 	bl	80002ac <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	883a      	ldrh	r2, [r7, #0]
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4619      	mov	r1, r3
 8000782:	69b8      	ldr	r0, [r7, #24]
 8000784:	f7ff fd08 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <ST7789_DrawImage+0x9c>)
 800078e:	f002 ff98 	bl	80036c2 <HAL_GPIO_WritePin>
 8000792:	e004      	b.n	800079e <ST7789_DrawImage+0x96>
		return;
 8000794:	bf00      	nop
 8000796:	e002      	b.n	800079e <ST7789_DrawImage+0x96>
		return;
 8000798:	bf00      	nop
 800079a:	e000      	b.n	800079e <ST7789_DrawImage+0x96>
		return;
 800079c:	bf00      	nop
}
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	40010800 	.word	0x40010800

080007a8 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80007a8:	b082      	sub	sp, #8
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b089      	sub	sp, #36	; 0x24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	460b      	mov	r3, r1
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4838      	ldr	r0, [pc, #224]	; (80008a4 <ST7789_WriteChar+0xfc>)
 80007c4:	f002 ff7d 	bl	80036c2 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80007c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	4413      	add	r3, r2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b29c      	uxth	r4, r3
 80007d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007dc:	b29a      	uxth	r2, r3
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	88b9      	ldrh	r1, [r7, #4]
 80007ea:	88f8      	ldrh	r0, [r7, #6]
 80007ec:	4622      	mov	r2, r4
 80007ee:	f7ff fd5d 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e043      	b.n	8000880 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80007f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	3b20      	subs	r3, #32
 80007fe:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	4619      	mov	r1, r3
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	440b      	add	r3, r1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	e029      	b.n	800086e <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00e      	beq.n	8000848 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800082a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	743b      	strb	r3, [r7, #16]
 8000834:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000836:	b2db      	uxtb	r3, r3
 8000838:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2102      	movs	r1, #2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fca9 	bl	8000198 <ST7789_WriteData>
 8000846:	e00f      	b.n	8000868 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	733b      	strb	r3, [r7, #12]
 8000854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000858:	b2db      	uxtb	r3, r3
 800085a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fc98 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	3301      	adds	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000872:	461a      	mov	r2, r3
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	4293      	cmp	r3, r2
 8000878:	d3cf      	bcc.n	800081a <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3301      	adds	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000884:	461a      	mov	r2, r3
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	4293      	cmp	r3, r2
 800088a:	d3b5      	bcc.n	80007f8 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <ST7789_WriteChar+0xfc>)
 8000892:	f002 ff16 	bl	80036c2 <HAL_GPIO_WritePin>
}
 8000896:	bf00      	nop
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80008a0:	b002      	add	sp, #8
 80008a2:	4770      	bx	lr
 80008a4:	40010800 	.word	0x40010800

080008a8 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80008a8:	b082      	sub	sp, #8
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af04      	add	r7, sp, #16
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	4603      	mov	r3, r0
 80008b6:	80fb      	strh	r3, [r7, #6]
 80008b8:	460b      	mov	r3, r1
 80008ba:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80008bc:	2200      	movs	r2, #0
 80008be:	2110      	movs	r1, #16
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <ST7789_WriteString+0xa0>)
 80008c2:	f002 fefe 	bl	80036c2 <HAL_GPIO_WritePin>
	while (*str) {
 80008c6:	e02d      	b.n	8000924 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	7d3a      	ldrb	r2, [r7, #20]
 80008cc:	4413      	add	r3, r2
 80008ce:	2bef      	cmp	r3, #239	; 0xef
 80008d0:	dd13      	ble.n	80008fa <ST7789_WriteString+0x52>
			x = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80008e0:	88bb      	ldrh	r3, [r7, #4]
 80008e2:	7d7a      	ldrb	r2, [r7, #21]
 80008e4:	4413      	add	r3, r2
 80008e6:	2bef      	cmp	r3, #239	; 0xef
 80008e8:	dc21      	bgt.n	800092e <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b20      	cmp	r3, #32
 80008f0:	d103      	bne.n	80008fa <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
				continue;
 80008f8:	e014      	b.n	8000924 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	88b9      	ldrh	r1, [r7, #4]
 8000900:	88f8      	ldrh	r0, [r7, #6]
 8000902:	8c3b      	ldrh	r3, [r7, #32]
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	8bbb      	ldrh	r3, [r7, #28]
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f7ff ff4a 	bl	80007a8 <ST7789_WriteChar>
		x += font.width;
 8000914:	7d3b      	ldrb	r3, [r7, #20]
 8000916:	b29a      	uxth	r2, r3
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	4413      	add	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
		str++;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1cd      	bne.n	80008c8 <ST7789_WriteString+0x20>
 800092c:	e000      	b.n	8000930 <ST7789_WriteString+0x88>
				break;
 800092e:	bf00      	nop
	}
	ST7789_UnSelect();
 8000930:	2201      	movs	r2, #1
 8000932:	2110      	movs	r1, #16
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <ST7789_WriteString+0xa0>)
 8000936:	f002 fec4 	bl	80036c2 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000944:	b002      	add	sp, #8
 8000946:	4770      	bx	lr
 8000948:	40010800 	.word	0x40010800

0800094c <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b087      	sub	sp, #28
 8000950:	af02      	add	r7, sp, #8
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	807b      	strh	r3, [r7, #2]
 8000966:	4613      	mov	r3, r2
 8000968:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <ST7789_DrawFilledRectangle+0xac>)
 8000970:	f002 fea7 	bl	80036c2 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	2bef      	cmp	r3, #239	; 0xef
 8000978:	d83a      	bhi.n	80009f0 <ST7789_DrawFilledRectangle+0xa4>
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	2bef      	cmp	r3, #239	; 0xef
 800097e:	d837      	bhi.n	80009f0 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	4413      	add	r3, r2
 8000986:	2bef      	cmp	r3, #239	; 0xef
 8000988:	dd03      	ble.n	8000992 <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000990:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000992:	88ba      	ldrh	r2, [r7, #4]
 8000994:	883b      	ldrh	r3, [r7, #0]
 8000996:	4413      	add	r3, r2
 8000998:	2bef      	cmp	r3, #239	; 0xef
 800099a:	dd03      	ble.n	80009a4 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80009a2:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e017      	b.n	80009da <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	b299      	uxth	r1, r3
 80009b4:	88fa      	ldrh	r2, [r7, #6]
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	4413      	add	r3, r2
 80009ba:	b29c      	uxth	r4, r3
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	b29a      	uxth	r2, r3
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	88f8      	ldrh	r0, [r7, #6]
 80009c8:	8c3b      	ldrh	r3, [r7, #32]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	4622      	mov	r2, r4
 80009d0:	f7ff fdca 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	3301      	adds	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	883a      	ldrh	r2, [r7, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d2e2      	bcs.n	80009aa <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 80009e4:	2201      	movs	r2, #1
 80009e6:	2110      	movs	r1, #16
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <ST7789_DrawFilledRectangle+0xac>)
 80009ea:	f002 fe6a 	bl	80036c2 <HAL_GPIO_WritePin>
 80009ee:	e000      	b.n	80009f2 <ST7789_DrawFilledRectangle+0xa6>
		return;
 80009f0:	bf00      	nop
}
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40010800 	.word	0x40010800

080009fc <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b08d      	sub	sp, #52	; 0x34
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	4604      	mov	r4, r0
 8000a04:	4608      	mov	r0, r1
 8000a06:	4611      	mov	r1, r2
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80bb      	strh	r3, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	807b      	strh	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	485d      	ldr	r0, [pc, #372]	; (8000b94 <ST7789_DrawFilledTriangle+0x198>)
 8000a20:	f002 fe4f 	bl	80036c2 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000a24:	2300      	movs	r3, #0
 8000a26:	823b      	strh	r3, [r7, #16]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	81fb      	strh	r3, [r7, #14]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a30:	2300      	movs	r3, #0
 8000a32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000a34:	2300      	movs	r3, #0
 8000a36:	847b      	strh	r3, [r7, #34]	; 0x22
 8000a38:	2300      	movs	r3, #0
 8000a3a:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	83fb      	strh	r3, [r7, #30]
 8000a40:	2300      	movs	r3, #0
 8000a42:	83bb      	strh	r3, [r7, #28]
 8000a44:	2300      	movs	r3, #0
 8000a46:	837b      	strh	r3, [r7, #26]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	833b      	strh	r3, [r7, #24]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	82fb      	strh	r3, [r7, #22]
 8000a50:	2300      	movs	r3, #0
 8000a52:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8000a58:	887a      	ldrh	r2, [r7, #2]
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8000a66:	883a      	ldrh	r2, [r7, #0]
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bfb8      	it	lt
 8000a70:	425b      	neglt	r3, r3
 8000a72:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8000a78:	88bb      	ldrh	r3, [r7, #4]
 8000a7a:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d304      	bcc.n	8000a8e <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	843b      	strh	r3, [r7, #32]
 8000a8c:	e005      	b.n	8000a9a <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 8000a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a92:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a98:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000a9a:	883a      	ldrh	r2, [r7, #0]
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d304      	bcc.n	8000aac <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	83bb      	strh	r3, [r7, #28]
 8000aaa:	e005      	b.n	8000ab8 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8000aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab0:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab6:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000ab8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	db10      	blt.n	8000ae6 <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000acc:	8a3b      	ldrh	r3, [r7, #16]
 8000ace:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000ad0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ad4:	0fda      	lsrs	r2, r3, #31
 8000ad6:	4413      	add	r3, r2
 8000ad8:	105b      	asrs	r3, r3, #1
 8000ada:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	82bb      	strh	r3, [r7, #20]
 8000ae4:	e00f      	b.n	8000b06 <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af6:	0fda      	lsrs	r2, r3, #31
 8000af8:	4413      	add	r3, r2
 8000afa:	105b      	asrs	r3, r3, #1
 8000afc:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	827b      	strh	r3, [r7, #18]
 8000b0a:	e033      	b.n	8000b74 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8000b0c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000b0e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000b10:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000b12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	f7ff fd24 	bl	8000568 <ST7789_DrawLine>

		num += numadd;
 8000b20:	8b3a      	ldrh	r2, [r7, #24]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000b2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	db0e      	blt.n	8000b54 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8000b36:	8b3a      	ldrh	r2, [r7, #24]
 8000b38:	8b7b      	ldrh	r3, [r7, #26]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000b40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8000b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b4c:	8bfb      	ldrh	r3, [r7, #30]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8000b54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b56:	8c3b      	ldrh	r3, [r7, #32]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8000b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b60:	8bbb      	ldrh	r3, [r7, #28]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3301      	adds	r3, #1
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	827b      	strh	r3, [r7, #18]
 8000b74:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	ddc5      	ble.n	8000b0c <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 8000b80:	2201      	movs	r2, #1
 8000b82:	2110      	movs	r1, #16
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <ST7789_DrawFilledTriangle+0x198>)
 8000b86:	f002 fd9c 	bl	80036c2 <HAL_GPIO_WritePin>
}
 8000b8a:	bf00      	nop
 8000b8c:	372c      	adds	r7, #44	; 0x2c
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010800 	.word	0x40010800

08000b98 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4603      	mov	r3, r0
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4869      	ldr	r0, [pc, #420]	; (8000d60 <ST7789_DrawFilledCircle+0x1c8>)
 8000bbc:	f002 fd81 	bl	80036c2 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	f1c3 0301 	rsb	r3, r3, #1
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	03d2      	lsls	r2, r2, #15
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8000be4:	88f8      	ldrh	r0, [r7, #6]
 8000be6:	88ba      	ldrh	r2, [r7, #4]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	883a      	ldrh	r2, [r7, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f7ff fc85 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000bf6:	88f8      	ldrh	r0, [r7, #6]
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	883a      	ldrh	r2, [r7, #0]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff fc7c 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	88b9      	ldrh	r1, [r7, #4]
 8000c12:	883a      	ldrh	r2, [r7, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc73 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	88b9      	ldrh	r1, [r7, #4]
 8000c24:	883a      	ldrh	r2, [r7, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc6a 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8000c2c:	88fa      	ldrh	r2, [r7, #6]
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b298      	uxth	r0, r3
 8000c34:	88b9      	ldrh	r1, [r7, #4]
 8000c36:	88fa      	ldrh	r2, [r7, #6]
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	88bc      	ldrh	r4, [r7, #4]
 8000c40:	883b      	ldrh	r3, [r7, #0]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	4623      	mov	r3, r4
 8000c46:	f7ff fc8f 	bl	8000568 <ST7789_DrawLine>

	while (x < y) {
 8000c4a:	e079      	b.n	8000d40 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8000c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0e      	blt.n	8000c72 <ST7789_DrawFilledCircle+0xda>
			y--;
 8000c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c60:	8a7b      	ldrh	r3, [r7, #18]
 8000c62:	3302      	adds	r3, #2
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c68:	8afa      	ldrh	r2, [r7, #22]
 8000c6a:	8a7b      	ldrh	r3, [r7, #18]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000c7e:	8abb      	ldrh	r3, [r7, #20]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	8abb      	ldrh	r3, [r7, #20]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	8a3b      	ldrh	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	b298      	uxth	r0, r3
 8000c98:	88ba      	ldrh	r2, [r7, #4]
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	8a3b      	ldrh	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29c      	uxth	r4, r3
 8000ca8:	88ba      	ldrh	r2, [r7, #4]
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	4413      	add	r3, r2
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	883b      	ldrh	r3, [r7, #0]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	f7ff fc56 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	8a3b      	ldrh	r3, [r7, #16]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	88ba      	ldrh	r2, [r7, #4]
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	8a3b      	ldrh	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	b29c      	uxth	r4, r3
 8000cd4:	88ba      	ldrh	r2, [r7, #4]
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	883b      	ldrh	r3, [r7, #0]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	f7ff fc40 	bl	8000568 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	4413      	add	r3, r2
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	88ba      	ldrh	r2, [r7, #4]
 8000cf2:	8a3b      	ldrh	r3, [r7, #16]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
 8000d00:	88ba      	ldrh	r2, [r7, #4]
 8000d02:	8a3b      	ldrh	r3, [r7, #16]
 8000d04:	4413      	add	r3, r2
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	883b      	ldrh	r3, [r7, #0]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	4622      	mov	r2, r4
 8000d10:	f7ff fc2a 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	88ba      	ldrh	r2, [r7, #4]
 8000d1e:	8a3b      	ldrh	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b299      	uxth	r1, r3
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29c      	uxth	r4, r3
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	8a3b      	ldrh	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	883b      	ldrh	r3, [r7, #0]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	f7ff fc14 	bl	8000568 <ST7789_DrawLine>
	while (x < y) {
 8000d40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f6ff af7f 	blt.w	8000c4c <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2110      	movs	r1, #16
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <ST7789_DrawFilledCircle+0x1c8>)
 8000d54:	f002 fcb5 	bl	80036c2 <HAL_GPIO_WritePin>
}
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	40010800 	.word	0x40010800

08000d64 <DrawCard>:
#include "st7789\st7789.h"
#include "stdbool.h"
void DrawCard(uint16_t x, uint16_t y, uint16_t color, const uint64_t* card, uint16_t bgcolor){
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	81fb      	strh	r3, [r7, #14]
 8000d70:	460b      	mov	r3, r1
 8000d72:	81bb      	strh	r3, [r7, #12]
 8000d74:	4613      	mov	r3, r2
 8000d76:	817b      	strh	r3, [r7, #10]
	for(int j = 0; j<50; j++){
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e04a      	b.n	8000e14 <DrawCard+0xb0>
		for(int i = 0; i<50; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e041      	b.n	8000e08 <DrawCard+0xa4>
			if(card[i] & (1ULL << (49-j))) ST7789_DrawPixel(x+j, y+i, color);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	6979      	ldr	r1, [r7, #20]
 8000d92:	f1c1 0131 	rsb	r1, r1, #49	; 0x31
 8000d96:	f1c1 0620 	rsb	r6, r1, #32
 8000d9a:	f1a1 0020 	sub.w	r0, r1, #32
 8000d9e:	fa22 f401 	lsr.w	r4, r2, r1
 8000da2:	fa03 f606 	lsl.w	r6, r3, r6
 8000da6:	4334      	orrs	r4, r6
 8000da8:	fa23 f000 	lsr.w	r0, r3, r0
 8000dac:	4304      	orrs	r4, r0
 8000dae:	fa23 f501 	lsr.w	r5, r3, r1
 8000db2:	f04f 0201 	mov.w	r2, #1
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	ea02 0004 	and.w	r0, r2, r4
 8000dbe:	ea03 0105 	and.w	r1, r3, r5
 8000dc2:	ea50 0301 	orrs.w	r3, r0, r1
 8000dc6:	d00e      	beq.n	8000de6 <DrawCard+0x82>
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	89bb      	ldrh	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	897a      	ldrh	r2, [r7, #10]
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fb8e 	bl	8000500 <ST7789_DrawPixel>
 8000de4:	e00d      	b.n	8000e02 <DrawCard+0x9e>
			else ST7789_DrawPixel(x+j, y+i, bgcolor);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	89fb      	ldrh	r3, [r7, #14]
 8000dec:	4413      	add	r3, r2
 8000dee:	b298      	uxth	r0, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fb7f 	bl	8000500 <ST7789_DrawPixel>
		for(int i = 0; i<50; i++){
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3301      	adds	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	2b31      	cmp	r3, #49	; 0x31
 8000e0c:	ddba      	ble.n	8000d84 <DrawCard+0x20>
	for(int j = 0; j<50; j++){
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b31      	cmp	r3, #49	; 0x31
 8000e18:	ddb1      	ble.n	8000d7e <DrawCard+0x1a>
		}
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e22 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f002 f973 	bl	8003110 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f809 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f87f 	bl	8000f30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e32:	f000 f847 	bl	8000ec4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000e36:	f7ff fa95 	bl	8000364 <ST7789_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	IniciarJogo();
 8000e3a:	f000 ff1d 	bl	8001c78 <IniciarJogo>
 8000e3e:	e7fc      	b.n	8000e3a <main+0x18>

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 faca 	bl	80043e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fc37 	bl	80036f4 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e8c:	f002 f835 	bl	8002efa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fea2 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eb6:	f002 f820 	bl	8002efa <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_SPI1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef8:	2210      	movs	r2, #16
 8000efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f16:	f002 ffd7 	bl	8003ec8 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f001 ffeb 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000d0 	.word	0x200000d0
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_GPIO_Init+0xb4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000f7a:	f002 fba2 	bl	80036c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2103      	movs	r1, #3
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <MX_GPIO_Init+0xbc>)
 8000f84:	f002 fb9d 	bl	80036c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2302      	movs	r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000fa0:	f002 fa1e 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0xbc>)
 8000fbc:	f002 fa10 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fc0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_GPIO_Init+0xb8>)
 8000fd6:	f002 fa03 	bl	80033e0 <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <setar>:
uint32_t last_tick = 0;
bool menu = true;
int x=5, y=79,z=30,p=42,P=42;
short opcao=0,lugar=0;

void setar() {
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af04      	add	r7, sp, #16

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0 && lugar!=2){
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	488b      	ldr	r0, [pc, #556]	; (8001228 <setar+0x238>)
 8000ffc:	f002 fb4a 	bl	8003694 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8128 	bne.w	8001258 <setar+0x268>
 8001008:	4b88      	ldr	r3, [pc, #544]	; (800122c <setar+0x23c>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	2b02      	cmp	r3, #2
 8001010:	f000 8122 	beq.w	8001258 <setar+0x268>
			ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001014:	4b86      	ldr	r3, [pc, #536]	; (8001230 <setar+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	3312      	adds	r3, #18
 800101c:	b298      	uxth	r0, r3
 800101e:	4b85      	ldr	r3, [pc, #532]	; (8001234 <setar+0x244>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	3b06      	subs	r3, #6
 8001026:	b29c      	uxth	r4, r3
 8001028:	4b81      	ldr	r3, [pc, #516]	; (8001230 <setar+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	3314      	adds	r3, #20
 8001030:	b29d      	uxth	r5, r3
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <setar+0x244>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	3306      	adds	r3, #6
 800103a:	b29e      	uxth	r6, r3
 800103c:	4b7c      	ldr	r3, [pc, #496]	; (8001230 <setar+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	331e      	adds	r3, #30
 8001044:	b29b      	uxth	r3, r3
 8001046:	4a7b      	ldr	r2, [pc, #492]	; (8001234 <setar+0x244>)
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	b292      	uxth	r2, r2
 800104c:	2100      	movs	r1, #0
 800104e:	9102      	str	r1, [sp, #8]
 8001050:	9201      	str	r2, [sp, #4]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4633      	mov	r3, r6
 8001056:	462a      	mov	r2, r5
 8001058:	4621      	mov	r1, r4
 800105a:	f7ff fccf 	bl	80009fc <ST7789_DrawFilledTriangle>
			ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 800105e:	4b74      	ldr	r3, [pc, #464]	; (8001230 <setar+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b298      	uxth	r0, r3
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <setar+0x244>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	3b03      	subs	r3, #3
 800106c:	b299      	uxth	r1, r3
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2306      	movs	r3, #6
 8001074:	2219      	movs	r2, #25
 8001076:	f7ff fc69 	bl	800094c <ST7789_DrawFilledRectangle>
			if(lugar==0){
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <setar+0x23c>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d131      	bne.n	80010e8 <setar+0xf8>
			switch(opcao){
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <setar+0x248>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d00b      	beq.n	80010a6 <setar+0xb6>
 800108e:	2b02      	cmp	r3, #2
 8001090:	d01f      	beq.n	80010d2 <setar+0xe2>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d000      	beq.n	8001098 <setar+0xa8>
			if(lugar==0){
 8001096:	e32d      	b.n	80016f4 <setar+0x704>
					case 0:
					ST7789_Fill_Color(BLACK);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fa01 	bl	80004a0 <ST7789_Fill_Color>
					menu=false;
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <setar+0x24c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
					break;
 80010a4:	e0be      	b.n	8001224 <setar+0x234>
					case 1:
					ST7789_Fill_Color(BLACK);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff f9fa 	bl	80004a0 <ST7789_Fill_Color>
					if(p==152) x+=115;
 80010ac:	4b64      	ldr	r3, [pc, #400]	; (8001240 <setar+0x250>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b98      	cmp	r3, #152	; 0x98
 80010b2:	d104      	bne.n	80010be <setar+0xce>
 80010b4:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <setar+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3373      	adds	r3, #115	; 0x73
 80010ba:	4a5d      	ldr	r2, [pc, #372]	; (8001230 <setar+0x240>)
 80010bc:	6013      	str	r3, [r2, #0]
					opcao=0;
 80010be:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <setar+0x248>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]
					z=80;
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <setar+0x254>)
 80010c6:	2250      	movs	r2, #80	; 0x50
 80010c8:	601a      	str	r2, [r3, #0]
					lugar=1;
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <setar+0x23c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	801a      	strh	r2, [r3, #0]
					break;
 80010d0:	e0a8      	b.n	8001224 <setar+0x234>
					case 2:
				    ST7789_Fill_Color(BLACK);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff f9e4 	bl	80004a0 <ST7789_Fill_Color>
					lugar=2;
 80010d8:	4b54      	ldr	r3, [pc, #336]	; (800122c <setar+0x23c>)
 80010da:	2202      	movs	r2, #2
 80010dc:	801a      	strh	r2, [r3, #0]
					opcao=0;
 80010de:	4b56      	ldr	r3, [pc, #344]	; (8001238 <setar+0x248>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
				   break;
 80010e4:	bf00      	nop
 80010e6:	e09d      	b.n	8001224 <setar+0x234>
			 }
			} else{if(opcao==0&&linhas==4){
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <setar+0x248>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d121      	bne.n	8001136 <setar+0x146>
 80010f2:	4b55      	ldr	r3, [pc, #340]	; (8001248 <setar+0x258>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d11d      	bne.n	8001136 <setar+0x146>
		        ST7789_WriteChar(p, 98 , 'x', Font_16x26, BLACK, BLACK);
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <setar+0x250>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b298      	uxth	r0, r3
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <setar+0x25c>)
 8001102:	2200      	movs	r2, #0
 8001104:	9202      	str	r2, [sp, #8]
 8001106:	2200      	movs	r2, #0
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	9200      	str	r2, [sp, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2278      	movs	r2, #120	; 0x78
 8001112:	2162      	movs	r1, #98	; 0x62
 8001114:	f7ff fb48 	bl	80007a8 <ST7789_WriteChar>
				x+=115;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <setar+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3373      	adds	r3, #115	; 0x73
 800111e:	4a44      	ldr	r2, [pc, #272]	; (8001230 <setar+0x240>)
 8001120:	6013      	str	r3, [r2, #0]
				p=152;
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <setar+0x250>)
 8001124:	2298      	movs	r2, #152	; 0x98
 8001126:	601a      	str	r2, [r3, #0]
				linhas=3;
 8001128:	4b47      	ldr	r3, [pc, #284]	; (8001248 <setar+0x258>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f002 f850 	bl	80031d4 <HAL_Delay>
 8001134:	e076      	b.n	8001224 <setar+0x234>
			} else if(opcao==0&&linhas==3){
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <setar+0x248>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d121      	bne.n	8001184 <setar+0x194>
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <setar+0x258>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d11d      	bne.n	8001184 <setar+0x194>
		        ST7789_WriteChar(p, 98 , 'x', Font_16x26, BLACK, BLACK);
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <setar+0x250>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b298      	uxth	r0, r3
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <setar+0x25c>)
 8001150:	2200      	movs	r2, #0
 8001152:	9202      	str	r2, [sp, #8]
 8001154:	2200      	movs	r2, #0
 8001156:	9201      	str	r2, [sp, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	9200      	str	r2, [sp, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2278      	movs	r2, #120	; 0x78
 8001160:	2162      	movs	r1, #98	; 0x62
 8001162:	f7ff fb21 	bl	80007a8 <ST7789_WriteChar>
				x-=115;
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <setar+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b73      	subs	r3, #115	; 0x73
 800116c:	4a30      	ldr	r2, [pc, #192]	; (8001230 <setar+0x240>)
 800116e:	6013      	str	r3, [r2, #0]
				p=42;
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <setar+0x250>)
 8001172:	222a      	movs	r2, #42	; 0x2a
 8001174:	601a      	str	r2, [r3, #0]
				linhas=4;
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <setar+0x258>)
 8001178:	2204      	movs	r2, #4
 800117a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100);
 800117c:	2064      	movs	r0, #100	; 0x64
 800117e:	f002 f829 	bl	80031d4 <HAL_Delay>
 8001182:	e04f      	b.n	8001224 <setar+0x234>
			} else if(opcao==1&&jogadores==1){
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <setar+0x248>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d121      	bne.n	80011d2 <setar+0x1e2>
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <setar+0x260>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d11d      	bne.n	80011d2 <setar+0x1e2>
		        ST7789_WriteChar(P, 178 , 'x', Font_16x26, BLACK, BLACK);
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <setar+0x264>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b298      	uxth	r0, r3
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <setar+0x25c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	2200      	movs	r2, #0
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	9200      	str	r2, [sp, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2278      	movs	r2, #120	; 0x78
 80011ae:	21b2      	movs	r1, #178	; 0xb2
 80011b0:	f7ff fafa 	bl	80007a8 <ST7789_WriteChar>
				x+=115;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <setar+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3373      	adds	r3, #115	; 0x73
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <setar+0x240>)
 80011bc:	6013      	str	r3, [r2, #0]
			    P=152;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <setar+0x264>)
 80011c0:	2298      	movs	r2, #152	; 0x98
 80011c2:	601a      	str	r2, [r3, #0]
			    jogadores=2;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <setar+0x260>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
			    HAL_Delay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f002 f802 	bl	80031d4 <HAL_Delay>
 80011d0:	e028      	b.n	8001224 <setar+0x234>
			}else if(opcao==1&&jogadores==2){
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <setar+0x248>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 828b 	bne.w	80016f4 <setar+0x704>
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <setar+0x260>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	f040 8286 	bne.w	80016f4 <setar+0x704>
				ST7789_WriteChar(P, 178 , 'x', Font_16x26, BLACK, BLACK);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <setar+0x264>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b298      	uxth	r0, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <setar+0x25c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	9202      	str	r2, [sp, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	9201      	str	r2, [sp, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2278      	movs	r2, #120	; 0x78
 8001200:	21b2      	movs	r1, #178	; 0xb2
 8001202:	f7ff fad1 	bl	80007a8 <ST7789_WriteChar>
				x-=115;
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <setar+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3b73      	subs	r3, #115	; 0x73
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <setar+0x240>)
 800120e:	6013      	str	r3, [r2, #0]
			    P=42;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <setar+0x264>)
 8001212:	222a      	movs	r2, #42	; 0x2a
 8001214:	601a      	str	r2, [r3, #0]
			    jogadores=1;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <setar+0x260>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
			    HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f001 ffd9 	bl	80031d4 <HAL_Delay>
			if(lugar==0){
 8001222:	e267      	b.n	80016f4 <setar+0x704>
 8001224:	e266      	b.n	80016f4 <setar+0x704>
 8001226:	bf00      	nop
 8001228:	40010800 	.word	0x40010800
 800122c:	200000c2 	.word	0x200000c2
 8001230:	20000018 	.word	0x20000018
 8001234:	2000001c 	.word	0x2000001c
 8001238:	200000c0 	.word	0x200000c0
 800123c:	20000016 	.word	0x20000016
 8001240:	20000024 	.word	0x20000024
 8001244:	20000020 	.word	0x20000020
 8001248:	20000011 	.word	0x20000011
 800124c:	20000008 	.word	0x20000008
 8001250:	20000013 	.word	0x20000013
 8001254:	20000028 	.word	0x20000028
			}
			}
			}
		else if(((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0)&& opcao>0)&&lugar!=2){
 8001258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125c:	486f      	ldr	r0, [pc, #444]	; (800141c <setar+0x42c>)
 800125e:	f002 fa19 	bl	8003694 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	f040 80e9 	bne.w	800143c <setar+0x44c>
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <setar+0x430>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f340 80e3 	ble.w	800143c <setar+0x44c>
 8001276:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <setar+0x434>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	2b02      	cmp	r3, #2
 800127e:	f000 80dd 	beq.w	800143c <setar+0x44c>
					if(p==42 &&lugar==1){
 8001282:	4b69      	ldr	r3, [pc, #420]	; (8001428 <setar+0x438>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b2a      	cmp	r3, #42	; 0x2a
 8001288:	d13b      	bne.n	8001302 <setar+0x312>
 800128a:	4b66      	ldr	r3, [pc, #408]	; (8001424 <setar+0x434>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d136      	bne.n	8001302 <setar+0x312>
						ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001294:	4b65      	ldr	r3, [pc, #404]	; (800142c <setar+0x43c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	3312      	adds	r3, #18
 800129c:	b298      	uxth	r0, r3
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <setar+0x440>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b06      	subs	r3, #6
 80012a6:	b29c      	uxth	r4, r3
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <setar+0x43c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3314      	adds	r3, #20
 80012b0:	b29d      	uxth	r5, r3
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <setar+0x440>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3306      	adds	r3, #6
 80012ba:	b29e      	uxth	r6, r3
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <setar+0x43c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	331e      	adds	r3, #30
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <setar+0x440>)
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	b292      	uxth	r2, r2
 80012cc:	2100      	movs	r1, #0
 80012ce:	9102      	str	r1, [sp, #8]
 80012d0:	9201      	str	r2, [sp, #4]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4633      	mov	r3, r6
 80012d6:	462a      	mov	r2, r5
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fb8f 	bl	80009fc <ST7789_DrawFilledTriangle>
						ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 80012de:	4b53      	ldr	r3, [pc, #332]	; (800142c <setar+0x43c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b298      	uxth	r0, r3
 80012e4:	4b52      	ldr	r3, [pc, #328]	; (8001430 <setar+0x440>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b03      	subs	r3, #3
 80012ec:	b299      	uxth	r1, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2306      	movs	r3, #6
 80012f4:	2219      	movs	r2, #25
 80012f6:	f7ff fb29 	bl	800094c <ST7789_DrawFilledRectangle>
						x=5;
 80012fa:	4b4c      	ldr	r3, [pc, #304]	; (800142c <setar+0x43c>)
 80012fc:	2205      	movs	r2, #5
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e072      	b.n	80013e8 <setar+0x3f8>
					}
					else if(p!=42&&lugar==1) {
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <setar+0x438>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b2a      	cmp	r3, #42	; 0x2a
 8001308:	d03b      	beq.n	8001382 <setar+0x392>
 800130a:	4b46      	ldr	r3, [pc, #280]	; (8001424 <setar+0x434>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d136      	bne.n	8001382 <setar+0x392>
						ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <setar+0x43c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3312      	adds	r3, #18
 800131c:	b298      	uxth	r0, r3
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <setar+0x440>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	3b06      	subs	r3, #6
 8001326:	b29c      	uxth	r4, r3
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <setar+0x43c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	3314      	adds	r3, #20
 8001330:	b29d      	uxth	r5, r3
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <setar+0x440>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	3306      	adds	r3, #6
 800133a:	b29e      	uxth	r6, r3
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <setar+0x43c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	331e      	adds	r3, #30
 8001344:	b29b      	uxth	r3, r3
 8001346:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <setar+0x440>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	b292      	uxth	r2, r2
 800134c:	2100      	movs	r1, #0
 800134e:	9102      	str	r1, [sp, #8]
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4633      	mov	r3, r6
 8001356:	462a      	mov	r2, r5
 8001358:	4621      	mov	r1, r4
 800135a:	f7ff fb4f 	bl	80009fc <ST7789_DrawFilledTriangle>
						ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <setar+0x43c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b298      	uxth	r0, r3
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <setar+0x440>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b03      	subs	r3, #3
 800136c:	b299      	uxth	r1, r3
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2306      	movs	r3, #6
 8001374:	2219      	movs	r2, #25
 8001376:	f7ff fae9 	bl	800094c <ST7789_DrawFilledRectangle>
						x=120;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <setar+0x43c>)
 800137c:	2278      	movs	r2, #120	; 0x78
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e032      	b.n	80013e8 <setar+0x3f8>
					} else{
						 ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <setar+0x43c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3312      	adds	r3, #18
 800138a:	b298      	uxth	r0, r3
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <setar+0x440>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	3b06      	subs	r3, #6
 8001394:	b29c      	uxth	r4, r3
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <setar+0x43c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	3314      	adds	r3, #20
 800139e:	b29d      	uxth	r5, r3
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <setar+0x440>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3306      	adds	r3, #6
 80013a8:	b29e      	uxth	r6, r3
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <setar+0x43c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	331e      	adds	r3, #30
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <setar+0x440>)
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	b292      	uxth	r2, r2
 80013ba:	2100      	movs	r1, #0
 80013bc:	9102      	str	r1, [sp, #8]
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4633      	mov	r3, r6
 80013c4:	462a      	mov	r2, r5
 80013c6:	4621      	mov	r1, r4
 80013c8:	f7ff fb18 	bl	80009fc <ST7789_DrawFilledTriangle>
						 ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <setar+0x43c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b298      	uxth	r0, r3
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <setar+0x440>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b03      	subs	r3, #3
 80013da:	b299      	uxth	r1, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2306      	movs	r3, #6
 80013e2:	2219      	movs	r2, #25
 80013e4:	f7ff fab2 	bl	800094c <ST7789_DrawFilledRectangle>
					}

		    	    last_tick=HAL_GetTick();
 80013e8:	f001 feea 	bl	80031c0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <setar+0x444>)
 80013f0:	601a      	str	r2, [r3, #0]

					y-=z;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <setar+0x440>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <setar+0x448>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <setar+0x440>)
 80013fe:	6013      	str	r3, [r2, #0]
		    		opcao--;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <setar+0x430>)
 8001402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <setar+0x430>)
 8001410:	801a      	strh	r2, [r3, #0]
		    		HAL_Delay(100);
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f001 fede 	bl	80031d4 <HAL_Delay>
 8001418:	e16d      	b.n	80016f6 <setar+0x706>
 800141a:	bf00      	nop
 800141c:	40010800 	.word	0x40010800
 8001420:	200000c0 	.word	0x200000c0
 8001424:	200000c2 	.word	0x200000c2
 8001428:	20000024 	.word	0x20000024
 800142c:	20000018 	.word	0x20000018
 8001430:	2000001c 	.word	0x2000001c
 8001434:	200000bc 	.word	0x200000bc
 8001438:	20000020 	.word	0x20000020
		    	}
			else if(((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)&& opcao<2&&lugar==0||(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0)&&lugar==1&&opcao<1)&&lugar!=2){
 800143c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001440:	4894      	ldr	r0, [pc, #592]	; (8001694 <setar+0x6a4>)
 8001442:	f002 f927 	bl	8003694 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <setar+0x470>
 800144c:	4b92      	ldr	r3, [pc, #584]	; (8001698 <setar+0x6a8>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	2b01      	cmp	r3, #1
 8001454:	dc04      	bgt.n	8001460 <setar+0x470>
 8001456:	4b91      	ldr	r3, [pc, #580]	; (800169c <setar+0x6ac>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d014      	beq.n	800148a <setar+0x49a>
 8001460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001464:	488b      	ldr	r0, [pc, #556]	; (8001694 <setar+0x6a4>)
 8001466:	f002 f915 	bl	8003694 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8121 	bne.w	80016b4 <setar+0x6c4>
 8001472:	4b8a      	ldr	r3, [pc, #552]	; (800169c <setar+0x6ac>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 811b 	bne.w	80016b4 <setar+0x6c4>
 800147e:	4b86      	ldr	r3, [pc, #536]	; (8001698 <setar+0x6a8>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f300 8115 	bgt.w	80016b4 <setar+0x6c4>
 800148a:	4b84      	ldr	r3, [pc, #528]	; (800169c <setar+0x6ac>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f000 810f 	beq.w	80016b4 <setar+0x6c4>
				 	if(P==42 &&lugar==1){
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <setar+0x6b0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b2a      	cmp	r3, #42	; 0x2a
 800149c:	d13b      	bne.n	8001516 <setar+0x526>
 800149e:	4b7f      	ldr	r3, [pc, #508]	; (800169c <setar+0x6ac>)
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d136      	bne.n	8001516 <setar+0x526>
				 		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <setar+0x6b4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3312      	adds	r3, #18
 80014b0:	b298      	uxth	r0, r3
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <setar+0x6b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3b06      	subs	r3, #6
 80014ba:	b29c      	uxth	r4, r3
 80014bc:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <setar+0x6b4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3314      	adds	r3, #20
 80014c4:	b29d      	uxth	r5, r3
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <setar+0x6b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3306      	adds	r3, #6
 80014ce:	b29e      	uxth	r6, r3
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <setar+0x6b4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	331e      	adds	r3, #30
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <setar+0x6b8>)
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	b292      	uxth	r2, r2
 80014e0:	2100      	movs	r1, #0
 80014e2:	9102      	str	r1, [sp, #8]
 80014e4:	9201      	str	r2, [sp, #4]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4633      	mov	r3, r6
 80014ea:	462a      	mov	r2, r5
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff fa85 	bl	80009fc <ST7789_DrawFilledTriangle>
				 		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <setar+0x6b4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b298      	uxth	r0, r3
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <setar+0x6b8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b03      	subs	r3, #3
 8001500:	b299      	uxth	r1, r3
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2306      	movs	r3, #6
 8001508:	2219      	movs	r2, #25
 800150a:	f7ff fa1f 	bl	800094c <ST7789_DrawFilledRectangle>
				 		x=5;
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <setar+0x6b4>)
 8001510:	2205      	movs	r2, #5
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e072      	b.n	80015fc <setar+0x60c>
				 	}
				 	else if(P!=42&&lugar==1){
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <setar+0x6b0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b2a      	cmp	r3, #42	; 0x2a
 800151c:	d03b      	beq.n	8001596 <setar+0x5a6>
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <setar+0x6ac>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d136      	bne.n	8001596 <setar+0x5a6>
				 		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <setar+0x6b4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	3312      	adds	r3, #18
 8001530:	b298      	uxth	r0, r3
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <setar+0x6b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b06      	subs	r3, #6
 800153a:	b29c      	uxth	r4, r3
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <setar+0x6b4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3314      	adds	r3, #20
 8001544:	b29d      	uxth	r5, r3
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <setar+0x6b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3306      	adds	r3, #6
 800154e:	b29e      	uxth	r6, r3
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <setar+0x6b4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	331e      	adds	r3, #30
 8001558:	b29b      	uxth	r3, r3
 800155a:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <setar+0x6b8>)
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	b292      	uxth	r2, r2
 8001560:	2100      	movs	r1, #0
 8001562:	9102      	str	r1, [sp, #8]
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4633      	mov	r3, r6
 800156a:	462a      	mov	r2, r5
 800156c:	4621      	mov	r1, r4
 800156e:	f7ff fa45 	bl	80009fc <ST7789_DrawFilledTriangle>
				 		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <setar+0x6b4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b298      	uxth	r0, r3
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <setar+0x6b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b03      	subs	r3, #3
 8001580:	b299      	uxth	r1, r3
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2306      	movs	r3, #6
 8001588:	2219      	movs	r2, #25
 800158a:	f7ff f9df 	bl	800094c <ST7789_DrawFilledRectangle>
				 		x=120;
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <setar+0x6b4>)
 8001590:	2278      	movs	r2, #120	; 0x78
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e032      	b.n	80015fc <setar+0x60c>
				 	}else{
				 		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <setar+0x6b4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	3312      	adds	r3, #18
 800159e:	b298      	uxth	r0, r3
 80015a0:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <setar+0x6b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b06      	subs	r3, #6
 80015a8:	b29c      	uxth	r4, r3
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <setar+0x6b4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3314      	adds	r3, #20
 80015b2:	b29d      	uxth	r5, r3
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <setar+0x6b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3306      	adds	r3, #6
 80015bc:	b29e      	uxth	r6, r3
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <setar+0x6b4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	331e      	adds	r3, #30
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <setar+0x6b8>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	b292      	uxth	r2, r2
 80015ce:	2100      	movs	r1, #0
 80015d0:	9102      	str	r1, [sp, #8]
 80015d2:	9201      	str	r2, [sp, #4]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4633      	mov	r3, r6
 80015d8:	462a      	mov	r2, r5
 80015da:	4621      	mov	r1, r4
 80015dc:	f7ff fa0e 	bl	80009fc <ST7789_DrawFilledTriangle>
				 		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <setar+0x6b4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <setar+0x6b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b03      	subs	r3, #3
 80015ee:	b299      	uxth	r1, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2306      	movs	r3, #6
 80015f6:	2219      	movs	r2, #25
 80015f8:	f7ff f9a8 	bl	800094c <ST7789_DrawFilledRectangle>
				 	}
				    last_tick=HAL_GetTick();
 80015fc:	f001 fde0 	bl	80031c0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <setar+0x6bc>)
 8001604:	601a      	str	r2, [r3, #0]
				    ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, BLACK);
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <setar+0x6b4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3312      	adds	r3, #18
 800160e:	b298      	uxth	r0, r3
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <setar+0x6b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	3b06      	subs	r3, #6
 8001618:	b29c      	uxth	r4, r3
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <setar+0x6b4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	3314      	adds	r3, #20
 8001622:	b29d      	uxth	r5, r3
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <setar+0x6b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3306      	adds	r3, #6
 800162c:	b29e      	uxth	r6, r3
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <setar+0x6b4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	331e      	adds	r3, #30
 8001636:	b29b      	uxth	r3, r3
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <setar+0x6b8>)
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	b292      	uxth	r2, r2
 800163e:	2100      	movs	r1, #0
 8001640:	9102      	str	r1, [sp, #8]
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4633      	mov	r3, r6
 8001648:	462a      	mov	r2, r5
 800164a:	4621      	mov	r1, r4
 800164c:	f7ff f9d6 	bl	80009fc <ST7789_DrawFilledTriangle>
				    ST7789_DrawFilledRectangle(x, y-3, 25 , 6, BLACK);
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <setar+0x6b4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b298      	uxth	r0, r3
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <setar+0x6b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b03      	subs	r3, #3
 800165e:	b299      	uxth	r1, r3
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2306      	movs	r3, #6
 8001666:	2219      	movs	r2, #25
 8001668:	f7ff f970 	bl	800094c <ST7789_DrawFilledRectangle>
					y+=z;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <setar+0x6b8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <setar+0x6c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <setar+0x6b8>)
 8001678:	6013      	str	r3, [r2, #0]
					opcao++;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <setar+0x6a8>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	b29b      	uxth	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	b29b      	uxth	r3, r3
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <setar+0x6a8>)
 800168a:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 800168c:	2064      	movs	r0, #100	; 0x64
 800168e:	f001 fda1 	bl	80031d4 <HAL_Delay>
 8001692:	e030      	b.n	80016f6 <setar+0x706>
 8001694:	40010800 	.word	0x40010800
 8001698:	200000c0 	.word	0x200000c0
 800169c:	200000c2 	.word	0x200000c2
 80016a0:	20000028 	.word	0x20000028
 80016a4:	20000018 	.word	0x20000018
 80016a8:	2000001c 	.word	0x2000001c
 80016ac:	200000bc 	.word	0x200000bc
 80016b0:	20000020 	.word	0x20000020
			}
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0&&lugar>0){
 80016b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b8:	485a      	ldr	r0, [pc, #360]	; (8001824 <setar+0x834>)
 80016ba:	f001 ffeb 	bl	8003694 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <setar+0x706>
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <setar+0x838>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dd13      	ble.n	80016f6 <setar+0x706>

			    ST7789_Fill_Color(BLACK);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7fe fee6 	bl	80004a0 <ST7789_Fill_Color>
			    opcao=0;
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <setar+0x83c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	801a      	strh	r2, [r3, #0]
			    x=5;
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <setar+0x840>)
 80016dc:	2205      	movs	r2, #5
 80016de:	601a      	str	r2, [r3, #0]
			    y=79;
 80016e0:	4b54      	ldr	r3, [pc, #336]	; (8001834 <setar+0x844>)
 80016e2:	224f      	movs	r2, #79	; 0x4f
 80016e4:	601a      	str	r2, [r3, #0]
			    z=30;
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <setar+0x848>)
 80016e8:	221e      	movs	r2, #30
 80016ea:	601a      	str	r2, [r3, #0]
			    lugar=0;
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <setar+0x838>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e000      	b.n	80016f6 <setar+0x706>
			if(lugar==0){
 80016f4:	bf00      	nop
			}
			if(lugar!=2){
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <setar+0x838>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d055      	beq.n	80017ac <setar+0x7bc>
		if ((HAL_GetTick()-last_tick)>500){
 8001700:	f001 fd5e 	bl	80031c0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	4b4d      	ldr	r3, [pc, #308]	; (800183c <setar+0x84c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001710:	d916      	bls.n	8001740 <setar+0x750>
			if(seta==WHITE)
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <setar+0x850>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171a:	4293      	cmp	r3, r2
 800171c:	d103      	bne.n	8001726 <setar+0x736>
				{
					seta=BLACK;
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <setar+0x850>)
 8001720:	2200      	movs	r2, #0
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <setar+0x746>
				}
			else if(seta==BLACK)
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <setar+0x850>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <setar+0x746>
				{
				seta=WHITE;
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <setar+0x850>)
 8001730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001734:	801a      	strh	r2, [r3, #0]
				}
			last_tick=HAL_GetTick();
 8001736:	f001 fd43 	bl	80031c0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <setar+0x84c>)
 800173e:	601a      	str	r2, [r3, #0]
		}
		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, seta);
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <setar+0x840>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	3312      	adds	r3, #18
 8001748:	b298      	uxth	r0, r3
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <setar+0x844>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b06      	subs	r3, #6
 8001752:	b29c      	uxth	r4, r3
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <setar+0x840>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3314      	adds	r3, #20
 800175c:	b29d      	uxth	r5, r3
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <setar+0x844>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	3306      	adds	r3, #6
 8001766:	b29e      	uxth	r6, r3
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <setar+0x840>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	331e      	adds	r3, #30
 8001770:	b29b      	uxth	r3, r3
 8001772:	4a30      	ldr	r2, [pc, #192]	; (8001834 <setar+0x844>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	b292      	uxth	r2, r2
 8001778:	4931      	ldr	r1, [pc, #196]	; (8001840 <setar+0x850>)
 800177a:	8809      	ldrh	r1, [r1, #0]
 800177c:	9102      	str	r1, [sp, #8]
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4633      	mov	r3, r6
 8001784:	462a      	mov	r2, r5
 8001786:	4621      	mov	r1, r4
 8001788:	f7ff f938 	bl	80009fc <ST7789_DrawFilledTriangle>
		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, seta);
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <setar+0x840>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b298      	uxth	r0, r3
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <setar+0x844>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b03      	subs	r3, #3
 800179a:	b299      	uxth	r1, r3
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <setar+0x850>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2306      	movs	r3, #6
 80017a4:	2219      	movs	r2, #25
 80017a6:	f7ff f8d1 	bl	800094c <ST7789_DrawFilledRectangle>
	} else{
		seta=BLACK;
		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, seta);
		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, seta);
	}
	}
 80017aa:	e037      	b.n	800181c <setar+0x82c>
		seta=BLACK;
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <setar+0x850>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	801a      	strh	r2, [r3, #0]
		ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, seta);
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <setar+0x840>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3312      	adds	r3, #18
 80017ba:	b298      	uxth	r0, r3
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <setar+0x844>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b06      	subs	r3, #6
 80017c4:	b29c      	uxth	r4, r3
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <setar+0x840>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3314      	adds	r3, #20
 80017ce:	b29d      	uxth	r5, r3
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <setar+0x844>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3306      	adds	r3, #6
 80017d8:	b29e      	uxth	r6, r3
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <setar+0x840>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	331e      	adds	r3, #30
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <setar+0x844>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	b292      	uxth	r2, r2
 80017ea:	4915      	ldr	r1, [pc, #84]	; (8001840 <setar+0x850>)
 80017ec:	8809      	ldrh	r1, [r1, #0]
 80017ee:	9102      	str	r1, [sp, #8]
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4633      	mov	r3, r6
 80017f6:	462a      	mov	r2, r5
 80017f8:	4621      	mov	r1, r4
 80017fa:	f7ff f8ff 	bl	80009fc <ST7789_DrawFilledTriangle>
		ST7789_DrawFilledRectangle(x, y-3, 25 , 6, seta);
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <setar+0x840>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b298      	uxth	r0, r3
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <setar+0x844>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b03      	subs	r3, #3
 800180c:	b299      	uxth	r1, r3
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <setar+0x850>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2306      	movs	r3, #6
 8001816:	2219      	movs	r2, #25
 8001818:	f7ff f898 	bl	800094c <ST7789_DrawFilledRectangle>
	}
 800181c:	bf00      	nop
 800181e:	3704      	adds	r7, #4
 8001820:	46bd      	mov	sp, r7
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001824:	40010800 	.word	0x40010800
 8001828:	200000c2 	.word	0x200000c2
 800182c:	200000c0 	.word	0x200000c0
 8001830:	20000018 	.word	0x20000018
 8001834:	2000001c 	.word	0x2000001c
 8001838:	20000020 	.word	0x20000020
 800183c:	200000bc 	.word	0x200000bc
 8001840:	20000014 	.word	0x20000014

08001844 <NavegadorCursor>:

void NavegadorCursor(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas){
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	70fb      	strb	r3, [r7, #3]
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) { //esquerda
 8001852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001856:	4844      	ldr	r0, [pc, #272]	; (8001968 <NavegadorCursor+0x124>)
 8001858:	f001 ff1c 	bl	8003694 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d124      	bne.n	80018ac <NavegadorCursor+0x68>
			if(VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas)){
 8001862:	7e3b      	ldrb	r3, [r7, #24]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f87f 	bl	800196c <VerificaSeExisteCartaDisponivelLinha>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00c      	beq.n	800188e <NavegadorCursor+0x4a>
				MoverParaProximaCartaLinha(tabuleiro, colunaAtual, linhaAtual, colunas, 0);
 8001874:	7e3a      	ldrb	r2, [r7, #24]
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f89c 	bl	80019be <MoverParaProximaCartaLinha>
				HAL_Delay(150);
 8001886:	2096      	movs	r0, #150	; 0x96
 8001888:	f001 fca4 	bl	80031d4 <HAL_Delay>
			else{
				MoverParaColunaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 0);
				HAL_Delay(150);
			}
		}*/
}
 800188c:	e067      	b.n	800195e <NavegadorCursor+0x11a>
            	MoverParaLinhaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 0);
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	7e3b      	ldrb	r3, [r7, #24]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f8cc 	bl	8001a3c <MoverParaLinhaComCarta>
            	HAL_Delay(150);
 80018a4:	2096      	movs	r0, #150	; 0x96
 80018a6:	f001 fc95 	bl	80031d4 <HAL_Delay>
}
 80018aa:	e058      	b.n	800195e <NavegadorCursor+0x11a>
		else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) { // baixo
 80018ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b0:	482d      	ldr	r0, [pc, #180]	; (8001968 <NavegadorCursor+0x124>)
 80018b2:	f001 feef 	bl	8003694 <HAL_GPIO_ReadPin>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d124      	bne.n	8001906 <NavegadorCursor+0xc2>
			if(VerificaSeExisteCartaDisponivelColuna(tabuleiro, linhaAtual, colunaAtual, linhas)){
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f9b0 	bl	8001c28 <VerificaSeExisteCartaDisponivelColuna>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <NavegadorCursor+0xa4>
				MoverParaProximaCartaColuna(tabuleiro, colunaAtual, linhaAtual, linhas, 1);
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	2301      	movs	r3, #1
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f90a 	bl	8001af4 <MoverParaProximaCartaColuna>
				HAL_Delay(150);
 80018e0:	2096      	movs	r0, #150	; 0x96
 80018e2:	f001 fc77 	bl	80031d4 <HAL_Delay>
}
 80018e6:	e03a      	b.n	800195e <NavegadorCursor+0x11a>
				MoverParaColunaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 1);
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	7e3b      	ldrb	r3, [r7, #24]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f93a 	bl	8001b72 <MoverParaColunaComCarta>
				HAL_Delay(150);
 80018fe:	2096      	movs	r0, #150	; 0x96
 8001900:	f001 fc68 	bl	80031d4 <HAL_Delay>
}
 8001904:	e02b      	b.n	800195e <NavegadorCursor+0x11a>
		else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) { //direita
 8001906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190a:	4817      	ldr	r0, [pc, #92]	; (8001968 <NavegadorCursor+0x124>)
 800190c:	f001 fec2 	bl	8003694 <HAL_GPIO_ReadPin>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d123      	bne.n	800195e <NavegadorCursor+0x11a>
			if(VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas)){
 8001916:	7e3b      	ldrb	r3, [r7, #24]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f825 	bl	800196c <VerificaSeExisteCartaDisponivelLinha>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <NavegadorCursor+0xfe>
				MoverParaProximaCartaLinha(tabuleiro, colunaAtual, linhaAtual, colunas, 1);
 8001928:	7e3a      	ldrb	r2, [r7, #24]
 800192a:	2301      	movs	r3, #1
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4613      	mov	r3, r2
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f842 	bl	80019be <MoverParaProximaCartaLinha>
				HAL_Delay(150);
 800193a:	2096      	movs	r0, #150	; 0x96
 800193c:	f001 fc4a 	bl	80031d4 <HAL_Delay>
}
 8001940:	e00d      	b.n	800195e <NavegadorCursor+0x11a>
			    MoverParaLinhaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 1);
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	2301      	movs	r3, #1
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	7e3b      	ldrb	r3, [r7, #24]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f872 	bl	8001a3c <MoverParaLinhaComCarta>
			    HAL_Delay(150);
 8001958:	2096      	movs	r0, #150	; 0x96
 800195a:	f001 fc3b 	bl	80031d4 <HAL_Delay>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40010800 	.word	0x40010800

0800196c <VerificaSeExisteCartaDisponivelLinha>:

bool VerificaSeExisteCartaDisponivelLinha(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t colunas){
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	70fb      	strb	r3, [r7, #3]
	for(int c = 0; c < colunas; c++){
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e014      	b.n	80019aa <VerificaSeExisteCartaDisponivelLinha+0x3e>
		if(tabuleiro[*linhaAtual][c] != '0' && c != *colunaAtual) return true;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	441a      	add	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b30      	cmp	r3, #48	; 0x30
 8001992:	d007      	beq.n	80019a4 <VerificaSeExisteCartaDisponivelLinha+0x38>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	4293      	cmp	r3, r2
 800199e:	d001      	beq.n	80019a4 <VerificaSeExisteCartaDisponivelLinha+0x38>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e007      	b.n	80019b4 <VerificaSeExisteCartaDisponivelLinha+0x48>
	for(int c = 0; c < colunas; c++){
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbe6      	blt.n	8001980 <VerificaSeExisteCartaDisponivelLinha+0x14>
	}
	return false;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <MoverParaProximaCartaLinha>:

void MoverParaProximaCartaLinha(char tabuleiro[4][4], uint8_t* colunaAtual, uint8_t* linhaAtual, uint8_t colunas, uint8_t sentido){ // 1 pra direita ou 0 pra esquerda
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *colunaAtual;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	75fb      	strb	r3, [r7, #23]
	do{
		if(sentido>0) *colunaAtual = (*colunaAtual + 1) % colunas;
 80019d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <MoverParaProximaCartaLinha+0x36>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80019e6:	fb02 f201 	mul.w	r2, r2, r1
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e00d      	b.n	8001a10 <MoverParaProximaCartaLinha+0x52>
		else *colunaAtual = (*colunaAtual == 0) ? colunas - 1 : *colunaAtual - 1;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <MoverParaProximaCartaLinha+0x46>
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e003      	b.n	8001a0c <MoverParaProximaCartaLinha+0x4e>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	7013      	strb	r3, [r2, #0]
	} while(tabuleiro[*linhaAtual][*colunaAtual] == '0' && *colunaAtual != original);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b30      	cmp	r3, #48	; 0x30
 8001a22:	d104      	bne.n	8001a2e <MoverParaProximaCartaLinha+0x70>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	7dfa      	ldrb	r2, [r7, #23]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d1d1      	bne.n	80019d2 <MoverParaProximaCartaLinha+0x14>
	HAL_Delay(150);
 8001a2e:	2096      	movs	r0, #150	; 0x96
 8001a30:	f001 fbd0 	bl	80031d4 <HAL_Delay>
}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MoverParaLinhaComCarta>:

void MoverParaLinhaComCarta(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas, uint8_t sentido) { // 1 para baixo ou 0 para cima
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	70fb      	strb	r3, [r7, #3]
	uint8_t linhaOriginal = *linhaAtual;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	74fb      	strb	r3, [r7, #19]
	do {
		if(sentido > 0)*linhaAtual = (*linhaAtual + 1) % linhas;
 8001a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <MoverParaLinhaComCarta+0x36>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a64:	fb02 f201 	mul.w	r2, r2, r1
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e00d      	b.n	8001a8e <MoverParaLinhaComCarta+0x52>
		else *linhaAtual = (*linhaAtual == 0) ? linhas - 1 : *linhaAtual - 1;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <MoverParaLinhaComCarta+0x46>
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	e003      	b.n	8001a8a <MoverParaLinhaComCarta+0x4e>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	7013      	strb	r3, [r2, #0]
	} while (!VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas) && *linhaAtual != linhaOriginal);
 8001a8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff ff68 	bl	800196c <VerificaSeExisteCartaDisponivelLinha>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <MoverParaLinhaComCarta+0x76>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	7cfa      	ldrb	r2, [r7, #19]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d1ce      	bne.n	8001a50 <MoverParaLinhaComCarta+0x14>
	for (int c = 0; c < colunas; c++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e011      	b.n	8001adc <MoverParaLinhaComCarta+0xa0>
		if (tabuleiro[*linhaAtual][c] != '0') {
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	441a      	add	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b30      	cmp	r3, #48	; 0x30
 8001aca:	d004      	beq.n	8001ad6 <MoverParaLinhaComCarta+0x9a>
			*colunaAtual = c;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	701a      	strb	r2, [r3, #0]
			break;
 8001ad4:	e007      	b.n	8001ae6 <MoverParaLinhaComCarta+0xaa>
	for (int c = 0; c < colunas; c++) {
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbe8      	blt.n	8001ab8 <MoverParaLinhaComCarta+0x7c>
		}
	}
	HAL_Delay(150);
 8001ae6:	2096      	movs	r0, #150	; 0x96
 8001ae8:	f001 fb74 	bl	80031d4 <HAL_Delay>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <MoverParaProximaCartaColuna>:

void MoverParaProximaCartaColuna(char tabuleiro[4][4], uint8_t* colunaAtual, uint8_t* linhaAtual, uint8_t linhas, uint8_t sentido){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *linhaAtual;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	75fb      	strb	r3, [r7, #23]
	do{
		if(sentido > 0) *linhaAtual = (*linhaAtual + 1) % linhas;
 8001b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <MoverParaProximaCartaColuna+0x36>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b1c:	fb02 f201 	mul.w	r2, r2, r1
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e00d      	b.n	8001b46 <MoverParaProximaCartaColuna+0x52>
		else  *linhaAtual = (*linhaAtual == 0) ? linhas - 1 : *linhaAtual - 1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <MoverParaProximaCartaColuna+0x46>
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	e003      	b.n	8001b42 <MoverParaProximaCartaColuna+0x4e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	7013      	strb	r3, [r2, #0]
	} while(tabuleiro[*linhaAtual][*colunaAtual] == '0' && *linhaAtual != original);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	2b30      	cmp	r3, #48	; 0x30
 8001b58:	d104      	bne.n	8001b64 <MoverParaProximaCartaColuna+0x70>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	7dfa      	ldrb	r2, [r7, #23]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1d1      	bne.n	8001b08 <MoverParaProximaCartaColuna+0x14>
	HAL_Delay(150);
 8001b64:	2096      	movs	r0, #150	; 0x96
 8001b66:	f001 fb35 	bl	80031d4 <HAL_Delay>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <MoverParaColunaComCarta>:

void MoverParaColunaComCarta(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas, uint8_t sentido){
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *colunaAtual;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	74fb      	strb	r3, [r7, #19]
	do {
		if(sentido > 0) *colunaAtual = (*colunaAtual + 1) % colunas;
 8001b86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <MoverParaColunaComCarta+0x38>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b98:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b9c:	fb02 f201 	mul.w	r2, r2, r1
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e00e      	b.n	8001bc8 <MoverParaColunaComCarta+0x56>
		else *colunaAtual = (*colunaAtual == 0) ? colunas - 1 : *colunaAtual - 1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <MoverParaColunaComCarta+0x4a>
 8001bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e003      	b.n	8001bc4 <MoverParaColunaComCarta+0x52>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	7013      	strb	r3, [r2, #0]
	} while (!VerificaSeExisteCartaDisponivelColuna(tabuleiro, linhaAtual, colunaAtual, linhas) && *colunaAtual != original);
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f82a 	bl	8001c28 <VerificaSeExisteCartaDisponivelColuna>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <MoverParaColunaComCarta+0x78>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	7cfa      	ldrb	r2, [r7, #19]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d1cd      	bne.n	8001b86 <MoverParaColunaComCarta+0x14>
	for (int l = 0; l < linhas; l++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e010      	b.n	8001c12 <MoverParaColunaComCarta+0xa0>
			if (tabuleiro[l][*colunaAtual] != '0') {
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	5c9b      	ldrb	r3, [r3, r2]
 8001bfe:	2b30      	cmp	r3, #48	; 0x30
 8001c00:	d004      	beq.n	8001c0c <MoverParaColunaComCarta+0x9a>
				*linhaAtual = l;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	701a      	strb	r2, [r3, #0]
				break;
 8001c0a:	e006      	b.n	8001c1a <MoverParaColunaComCarta+0xa8>
	for (int l = 0; l < linhas; l++) {
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbea      	blt.n	8001bf0 <MoverParaColunaComCarta+0x7e>
			}
		}
	HAL_Delay(150);
 8001c1a:	2096      	movs	r0, #150	; 0x96
 8001c1c:	f001 fada 	bl	80031d4 <HAL_Delay>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <VerificaSeExisteCartaDisponivelColuna>:

bool VerificaSeExisteCartaDisponivelColuna(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas){
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	70fb      	strb	r3, [r7, #3]
	for(int l = 0; l<linhas; l++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e013      	b.n	8001c64 <VerificaSeExisteCartaDisponivelColuna+0x3c>
		if(tabuleiro[l][*colunaAtual] != '0' && l != *linhaAtual) return true;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d007      	beq.n	8001c5e <VerificaSeExisteCartaDisponivelColuna+0x36>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d001      	beq.n	8001c5e <VerificaSeExisteCartaDisponivelColuna+0x36>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e007      	b.n	8001c6e <VerificaSeExisteCartaDisponivelColuna+0x46>
	for(int l = 0; l<linhas; l++){
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbe7      	blt.n	8001c3c <VerificaSeExisteCartaDisponivelColuna+0x14>
	}
	return false;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <IniciarJogo>:

void IniciarJogo () {
 8001c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7c:	b088      	sub	sp, #32
 8001c7e:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(BLACK);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7fe fc0d 	bl	80004a0 <ST7789_Fill_Color>

	menu = true;
 8001c86:	4b93      	ldr	r3, [pc, #588]	; (8001ed4 <IniciarJogo+0x25c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
	while(menu){
 8001c8c:	e16f      	b.n	8001f6e <IniciarJogo+0x2f6>
		ST7789_WriteString(0,0, "Matching Pairs", Font_16x26, WHITE, BLACK);
 8001c8e:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <IniciarJogo+0x260>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a8e      	ldr	r2, [pc, #568]	; (8001edc <IniciarJogo+0x264>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7fe fdff 	bl	80008a8 <ST7789_WriteString>
		ST7789_WriteString(88,30, "Game", Font_16x26, WHITE, BLACK);
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <IniciarJogo+0x260>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a88      	ldr	r2, [pc, #544]	; (8001ee0 <IniciarJogo+0x268>)
 8001cbe:	211e      	movs	r1, #30
 8001cc0:	2058      	movs	r0, #88	; 0x58
 8001cc2:	f7fe fdf1 	bl	80008a8 <ST7789_WriteString>
	    ST7789_DrawFilledRectangle(5, 43, 70, 6, WHITE);
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2306      	movs	r3, #6
 8001cce:	2246      	movs	r2, #70	; 0x46
 8001cd0:	212b      	movs	r1, #43	; 0x2b
 8001cd2:	2005      	movs	r0, #5
 8001cd4:	f7fe fe3a 	bl	800094c <ST7789_DrawFilledRectangle>
	    ST7789_DrawFilledRectangle(165, 43, 70 , 6, WHITE);
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2306      	movs	r3, #6
 8001ce0:	2246      	movs	r2, #70	; 0x46
 8001ce2:	212b      	movs	r1, #43	; 0x2b
 8001ce4:	20a5      	movs	r0, #165	; 0xa5
 8001ce6:	f7fe fe31 	bl	800094c <ST7789_DrawFilledRectangle>
	    if (lugar==0){
 8001cea:	4b7e      	ldr	r3, [pc, #504]	; (8001ee4 <IniciarJogo+0x26c>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d12a      	bne.n	8001d4a <IniciarJogo+0xd2>
	    	ST7789_WriteString(40,70, "Iniciar jogo", Font_11x18, WHITE, BLACK);
 8001cf4:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <IniciarJogo+0x270>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	9202      	str	r2, [sp, #8]
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	9201      	str	r2, [sp, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a79      	ldr	r2, [pc, #484]	; (8001eec <IniciarJogo+0x274>)
 8001d08:	2146      	movs	r1, #70	; 0x46
 8001d0a:	2028      	movs	r0, #40	; 0x28
 8001d0c:	f7fe fdcc 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_WriteString(40,100, "Configuracoes", Font_11x18, WHITE, BLACK);
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <IniciarJogo+0x270>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	9202      	str	r2, [sp, #8]
 8001d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1a:	9201      	str	r2, [sp, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a73      	ldr	r2, [pc, #460]	; (8001ef0 <IniciarJogo+0x278>)
 8001d24:	2164      	movs	r1, #100	; 0x64
 8001d26:	2028      	movs	r0, #40	; 0x28
 8001d28:	f7fe fdbe 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_WriteString(40,130, "Recordes", Font_11x18, WHITE, BLACK);
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <IniciarJogo+0x270>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9202      	str	r2, [sp, #8]
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	9201      	str	r2, [sp, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6d      	ldr	r2, [pc, #436]	; (8001ef4 <IniciarJogo+0x27c>)
 8001d40:	2182      	movs	r1, #130	; 0x82
 8001d42:	2028      	movs	r0, #40	; 0x28
 8001d44:	f7fe fdb0 	bl	80008a8 <ST7789_WriteString>
 8001d48:	e10f      	b.n	8001f6a <IniciarJogo+0x2f2>

	    }
	    else if(lugar==1){
 8001d4a:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <IniciarJogo+0x26c>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	f040 8099 	bne.w	8001e88 <IniciarJogo+0x210>
	    	ST7789_WriteString(0,70, "Tamanho do tabuleiro", Font_11x18, WHITE, BLACK);
 8001d56:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <IniciarJogo+0x270>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d60:	9201      	str	r2, [sp, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a63      	ldr	r2, [pc, #396]	; (8001ef8 <IniciarJogo+0x280>)
 8001d6a:	2146      	movs	r1, #70	; 0x46
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7fe fd9b 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_DrawRectangle(40, 100, 60, 120, WHITE);
 8001d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2378      	movs	r3, #120	; 0x78
 8001d7a:	223c      	movs	r2, #60	; 0x3c
 8001d7c:	2164      	movs	r1, #100	; 0x64
 8001d7e:	2028      	movs	r0, #40	; 0x28
 8001d80:	f7fe fc7e 	bl	8000680 <ST7789_DrawRectangle>
	    	ST7789_DrawRectangle(150, 100, 170,120, WHITE);
 8001d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2378      	movs	r3, #120	; 0x78
 8001d8c:	22aa      	movs	r2, #170	; 0xaa
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	2096      	movs	r0, #150	; 0x96
 8001d92:	f7fe fc75 	bl	8000680 <ST7789_DrawRectangle>
	        ST7789_WriteChar(p, 98 , 'x', Font_16x26, WHITE, BLACK);
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <IniciarJogo+0x284>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b298      	uxth	r0, r3
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <IniciarJogo+0x260>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	9202      	str	r2, [sp, #8]
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	9201      	str	r2, [sp, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	9200      	str	r2, [sp, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2278      	movs	r2, #120	; 0x78
 8001db0:	2162      	movs	r1, #98	; 0x62
 8001db2:	f7fe fcf9 	bl	80007a8 <ST7789_WriteChar>
	        ST7789_WriteChar(P, 178 , 'x', Font_16x26, WHITE, BLACK);
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <IniciarJogo+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b298      	uxth	r0, r3
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <IniciarJogo+0x260>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	9202      	str	r2, [sp, #8]
 8001dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc6:	9201      	str	r2, [sp, #4]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	9200      	str	r2, [sp, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2278      	movs	r2, #120	; 0x78
 8001dd0:	21b2      	movs	r1, #178	; 0xb2
 8001dd2:	f7fe fce9 	bl	80007a8 <ST7789_WriteChar>
	    	ST7789_WriteString(65,101, "4x4", Font_11x18, WHITE, BLACK);
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <IniciarJogo+0x270>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	9202      	str	r2, [sp, #8]
 8001ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de0:	9201      	str	r2, [sp, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <IniciarJogo+0x28c>)
 8001dea:	2165      	movs	r1, #101	; 0x65
 8001dec:	2041      	movs	r0, #65	; 0x41
 8001dee:	f7fe fd5b 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_WriteString(175,101, "3x4", Font_11x18, WHITE, BLACK);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <IniciarJogo+0x270>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	9202      	str	r2, [sp, #8]
 8001df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfc:	9201      	str	r2, [sp, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	9200      	str	r2, [sp, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <IniciarJogo+0x290>)
 8001e06:	2165      	movs	r1, #101	; 0x65
 8001e08:	20af      	movs	r0, #175	; 0xaf
 8001e0a:	f7fe fd4d 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_WriteString(0,150, "Quantidade de players", Font_11x18, WHITE, BLACK);
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <IniciarJogo+0x270>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	9202      	str	r2, [sp, #8]
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	9200      	str	r2, [sp, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <IniciarJogo+0x294>)
 8001e22:	2196      	movs	r1, #150	; 0x96
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7fe fd3f 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_DrawRectangle(40, 180, 60, 200, WHITE);
 8001e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	23c8      	movs	r3, #200	; 0xc8
 8001e32:	223c      	movs	r2, #60	; 0x3c
 8001e34:	21b4      	movs	r1, #180	; 0xb4
 8001e36:	2028      	movs	r0, #40	; 0x28
 8001e38:	f7fe fc22 	bl	8000680 <ST7789_DrawRectangle>
	    	ST7789_DrawRectangle(150,180, 170,200, WHITE);
 8001e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	23c8      	movs	r3, #200	; 0xc8
 8001e44:	22aa      	movs	r2, #170	; 0xaa
 8001e46:	21b4      	movs	r1, #180	; 0xb4
 8001e48:	2096      	movs	r0, #150	; 0x96
 8001e4a:	f7fe fc19 	bl	8000680 <ST7789_DrawRectangle>
	    	ST7789_WriteString(65,181, "1", Font_11x18, WHITE, BLACK);
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <IniciarJogo+0x270>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	9202      	str	r2, [sp, #8]
 8001e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e58:	9201      	str	r2, [sp, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	9200      	str	r2, [sp, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <IniciarJogo+0x298>)
 8001e62:	21b5      	movs	r1, #181	; 0xb5
 8001e64:	2041      	movs	r0, #65	; 0x41
 8001e66:	f7fe fd1f 	bl	80008a8 <ST7789_WriteString>
	    	ST7789_WriteString(175,181, "2", Font_11x18, WHITE, BLACK);
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <IniciarJogo+0x270>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	9202      	str	r2, [sp, #8]
 8001e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e74:	9201      	str	r2, [sp, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <IniciarJogo+0x29c>)
 8001e7e:	21b5      	movs	r1, #181	; 0xb5
 8001e80:	20af      	movs	r0, #175	; 0xaf
 8001e82:	f7fe fd11 	bl	80008a8 <ST7789_WriteString>
 8001e86:	e070      	b.n	8001f6a <IniciarJogo+0x2f2>
	     }
		 else if(lugar==2){
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <IniciarJogo+0x26c>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d16b      	bne.n	8001f6a <IniciarJogo+0x2f2>
			ST7789_WriteString(60,80, "Recordes", Font_16x26, WHITE, BLACK);
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <IniciarJogo+0x260>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	9202      	str	r2, [sp, #8]
 8001e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9c:	9201      	str	r2, [sp, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	9200      	str	r2, [sp, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <IniciarJogo+0x27c>)
 8001ea6:	2150      	movs	r1, #80	; 0x50
 8001ea8:	203c      	movs	r0, #60	; 0x3c
 8001eaa:	f7fe fcfd 	bl	80008a8 <ST7789_WriteString>
            if(recorde==255){
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <IniciarJogo+0x2a0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d134      	bne.n	8001f20 <IniciarJogo+0x2a8>
				ST7789_WriteString(40,140, "Nenhum recorde", Font_11x18, WHITE, BLACK);
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <IniciarJogo+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	9202      	str	r2, [sp, #8]
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	9201      	str	r2, [sp, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	9200      	str	r2, [sp, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <IniciarJogo+0x2a4>)
 8001eca:	218c      	movs	r1, #140	; 0x8c
 8001ecc:	2028      	movs	r0, #40	; 0x28
 8001ece:	f7fe fceb 	bl	80008a8 <ST7789_WriteString>
 8001ed2:	e04a      	b.n	8001f6a <IniciarJogo+0x2f2>
 8001ed4:	20000016 	.word	0x20000016
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	08004d6c 	.word	0x08004d6c
 8001ee0:	08004d7c 	.word	0x08004d7c
 8001ee4:	200000c2 	.word	0x200000c2
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	08004d84 	.word	0x08004d84
 8001ef0:	08004d94 	.word	0x08004d94
 8001ef4:	08004da4 	.word	0x08004da4
 8001ef8:	08004db0 	.word	0x08004db0
 8001efc:	20000024 	.word	0x20000024
 8001f00:	20000028 	.word	0x20000028
 8001f04:	08004dc8 	.word	0x08004dc8
 8001f08:	08004dcc 	.word	0x08004dcc
 8001f0c:	08004dd0 	.word	0x08004dd0
 8001f10:	08004de8 	.word	0x08004de8
 8001f14:	08004dec 	.word	0x08004dec
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	08004df0 	.word	0x08004df0
		    } else{
			char records[3];
			sprintf(records, "%d", recorde);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <IniciarJogo+0x410>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	463b      	mov	r3, r7
 8001f28:	4958      	ldr	r1, [pc, #352]	; (800208c <IniciarJogo+0x414>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 fa98 	bl	8004460 <siprintf>
			ST7789_WriteString(40,140, "seu recorde foi", Font_11x18, WHITE, BLACK);
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <IniciarJogo+0x418>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	9202      	str	r2, [sp, #8]
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	9201      	str	r2, [sp, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	9200      	str	r2, [sp, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a54      	ldr	r2, [pc, #336]	; (8002094 <IniciarJogo+0x41c>)
 8001f44:	218c      	movs	r1, #140	; 0x8c
 8001f46:	2028      	movs	r0, #40	; 0x28
 8001f48:	f7fe fcae 	bl	80008a8 <ST7789_WriteString>
			ST7789_WriteString(110,160, records, Font_11x18, WHITE, BLACK);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <IniciarJogo+0x418>)
 8001f4e:	4639      	mov	r1, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	460a      	mov	r2, r1
 8001f62:	21a0      	movs	r1, #160	; 0xa0
 8001f64:	206e      	movs	r0, #110	; 0x6e
 8001f66:	f7fe fc9f 	bl	80008a8 <ST7789_WriteString>
		 	}
		}
	     setar();
 8001f6a:	f7ff f841 	bl	8000ff0 <setar>
	while(menu){
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <IniciarJogo+0x420>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae8b 	bne.w	8001c8e <IniciarJogo+0x16>
	 }
	

     char tabuleiro[linhas][colunas];
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <IniciarJogo+0x424>)
 8001f7a:	7818      	ldrb	r0, [r3, #0]
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <IniciarJogo+0x428>)
 8001f7e:	781d      	ldrb	r5, [r3, #0]
 8001f80:	466b      	mov	r3, sp
 8001f82:	4698      	mov	r8, r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	b2c1      	uxtb	r1, r0
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	00d4      	lsls	r4, r2, #3
 8001f9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f9e:	00cb      	lsls	r3, r1, #3
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	b2c1      	uxtb	r1, r0
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	b2eb      	uxtb	r3, r5
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	fb03 fc02 	mul.w	ip, r3, r2
 8001fb6:	fb01 f604 	mul.w	r6, r1, r4
 8001fba:	4466      	add	r6, ip
 8001fbc:	fba1 3403 	umull	r3, r4, r1, r3
 8001fc0:	1932      	adds	r2, r6, r4
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	00e2      	lsls	r2, r4, #3
 8001fce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fd2:	00d9      	lsls	r1, r3, #3
 8001fd4:	b2c1      	uxtb	r1, r0
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	b2eb      	uxtb	r3, r5
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	fb03 fc02 	mul.w	ip, r3, r2
 8001fe4:	fb01 f604 	mul.w	r6, r1, r4
 8001fe8:	4466      	add	r6, ip
 8001fea:	fba1 3403 	umull	r3, r4, r1, r3
 8001fee:	1932      	adds	r2, r6, r4
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	00e2      	lsls	r2, r4, #3
 8001ffc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002000:	00d9      	lsls	r1, r3, #3
 8002002:	4603      	mov	r3, r0
 8002004:	462a      	mov	r2, r5
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	3307      	adds	r3, #7
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	ebad 0d03 	sub.w	sp, sp, r3
 8002014:	ab04      	add	r3, sp, #16
 8002016:	3300      	adds	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
     tentativas = 0;
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <IniciarJogo+0x42c>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
     GerarParesAleatorios(tabuleiro, linhas, colunas);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <IniciarJogo+0x428>)
 8002024:	7819      	ldrb	r1, [r3, #0]
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <IniciarJogo+0x424>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f000 f83e 	bl	80020ac <GerarParesAleatorios>
     if(jogadores == 1){
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <IniciarJogo+0x430>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d117      	bne.n	8002068 <IniciarJogo+0x3f0>
    	 Jogo(tabuleiro, linhas, colunas, 0, 0);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <IniciarJogo+0x428>)
 800203c:	7819      	ldrb	r1, [r3, #0]
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <IniciarJogo+0x424>)
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	f000 fbda 	bl	8002800 <Jogo>
    	 AtualizarRecorde(tentativas);
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <IniciarJogo+0x42c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f9c1 	bl	80023d8 <AtualizarRecorde>
    	 ExibirFimDeJogo(tentativas, recorde);
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <IniciarJogo+0x42c>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <IniciarJogo+0x410>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fa0d 	bl	8002480 <ExibirFimDeJogo>
 8002066:	e009      	b.n	800207c <IniciarJogo+0x404>
     }
     else Jogo2Players(tabuleiro, linhas, colunas, 0, 0);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <IniciarJogo+0x428>)
 800206c:	7819      	ldrb	r1, [r3, #0]
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <IniciarJogo+0x424>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	f000 fd50 	bl	8002b1c <Jogo2Players>
 800207c:	46c5      	mov	sp, r8
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002088:	20000010 	.word	0x20000010
 800208c:	08004e00 	.word	0x08004e00
 8002090:	20000000 	.word	0x20000000
 8002094:	08004e04 	.word	0x08004e04
 8002098:	20000016 	.word	0x20000016
 800209c:	20000012 	.word	0x20000012
 80020a0:	20000011 	.word	0x20000011
 80020a4:	200000b8 	.word	0x200000b8
 80020a8:	20000013 	.word	0x20000013

080020ac <GerarParesAleatorios>:

void GerarParesAleatorios(char tabuleiro[4][4], uint8_t linhas, uint8_t colunas){
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	4613      	mov	r3, r2
 80020ba:	70bb      	strb	r3, [r7, #2]
 80020bc:	466b      	mov	r3, sp
 80020be:	461d      	mov	r5, r3
	char temp[linhas*colunas];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	78ba      	ldrb	r2, [r7, #2]
 80020c4:	fb02 f003 	mul.w	r0, r2, r3
 80020c8:	1e43      	subs	r3, r0, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	4603      	mov	r3, r0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	f04f 0400 	mov.w	r4, #0
 80020dc:	00d4      	lsls	r4, r2, #3
 80020de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	00d4      	lsls	r4, r2, #3
 80020f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020fa:	00cb      	lsls	r3, r1, #3
 80020fc:	4603      	mov	r3, r0
 80020fe:	3307      	adds	r3, #7
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	ebad 0d03 	sub.w	sp, sp, r3
 8002108:	466b      	mov	r3, sp
 800210a:	3300      	adds	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i< linhas*colunas/2; i++){
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	e013      	b.n	800213c <GerarParesAleatorios+0x90>
		temp[i*2] = 'a' + i;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	3261      	adds	r2, #97	; 0x61
 800211e:	b2d1      	uxtb	r1, r2
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	54d1      	strb	r1, [r2, r3]
		temp[i*2 + 1] = 'a' + i;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	3301      	adds	r3, #1
 800212e:	3261      	adds	r2, #97	; 0x61
 8002130:	b2d1      	uxtb	r1, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i< linhas*colunas/2; i++){
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3301      	adds	r3, #1
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	78ba      	ldrb	r2, [r7, #2]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	0fda      	lsrs	r2, r3, #31
 8002146:	4413      	add	r3, r2
 8002148:	105b      	asrs	r3, r3, #1
 800214a:	461a      	mov	r2, r3
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	4293      	cmp	r3, r2
 8002150:	dbe0      	blt.n	8002114 <GerarParesAleatorios+0x68>
	}
	for(int i = linhas*colunas - 1; i>0; i--){
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	78ba      	ldrb	r2, [r7, #2]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e01e      	b.n	800219e <GerarParesAleatorios+0xf2>
		uint8_t j = rand() % (i+1);
 8002160:	f002 f94a 	bl	80043f8 <rand>
 8002164:	4602      	mov	r2, r0
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	fb92 f1f3 	sdiv	r1, r2, r3
 800216e:	fb03 f301 	mul.w	r3, r3, r1
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	72fb      	strb	r3, [r7, #11]
		char tmp = temp[i];
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	72bb      	strb	r3, [r7, #10]
		temp[i] = temp[j];
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	5cd1      	ldrb	r1, [r2, r3]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	460a      	mov	r2, r1
 800218e:	701a      	strb	r2, [r3, #0]
		temp[j] = tmp;
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	7ab9      	ldrb	r1, [r7, #10]
 8002196:	54d1      	strb	r1, [r2, r3]
	for(int i = linhas*colunas - 1; i>0; i--){
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3b01      	subs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dcdd      	bgt.n	8002160 <GerarParesAleatorios+0xb4>
	}
	uint8_t count = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(int i = 0; i<linhas; i++){
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	e01d      	b.n	80021ec <GerarParesAleatorios+0x140>
		for(int j = 0; j<colunas; j++){
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e013      	b.n	80021de <GerarParesAleatorios+0x132>
			tabuleiro[i][j] = temp[count];
 80021b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	440a      	add	r2, r1
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	5cc9      	ldrb	r1, [r1, r3]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	460a      	mov	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
			count++;
 80021ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d2:	3301      	adds	r3, #1
 80021d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(int j = 0; j<colunas; j++){
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dbe7      	blt.n	80021b6 <GerarParesAleatorios+0x10a>
	for(int i = 0; i<linhas; i++){
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbdd      	blt.n	80021b0 <GerarParesAleatorios+0x104>
 80021f4:	46ad      	mov	sp, r5
		}
	}
}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002200 <SelecionarCarta>:

void SelecionarCarta(char tabuleiro[4][4], uint8_t i, uint8_t j, uint8_t linhas, uint8_t colunas){
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	70fb      	strb	r3, [r7, #3]
 8002212:	460b      	mov	r3, r1
 8002214:	70bb      	strb	r3, [r7, #2]
 8002216:	4613      	mov	r3, r2
 8002218:	707b      	strb	r3, [r7, #1]
	uint8_t x = 240/colunas * j, y = 240/linhas * i;
 800221a:	7e3b      	ldrb	r3, [r7, #24]
 800221c:	22f0      	movs	r2, #240	; 0xf0
 800221e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	78ba      	ldrb	r2, [r7, #2]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	22f0      	movs	r2, #240	; 0xf0
 8002230:	fb92 f3f3 	sdiv	r3, r2, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	73bb      	strb	r3, [r7, #14]
	switch(tabuleiro[i][j]){
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	441a      	add	r2, r3
 8002246:	78bb      	ldrb	r3, [r7, #2]
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	3b61      	subs	r3, #97	; 0x61
 800224c:	2b07      	cmp	r3, #7
 800224e:	d877      	bhi.n	8002340 <SelecionarCarta+0x140>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <SelecionarCarta+0x58>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002279 	.word	0x08002279
 800225c:	08002293 	.word	0x08002293
 8002260:	080022ad 	.word	0x080022ad
 8002264:	080022c5 	.word	0x080022c5
 8002268:	080022dd 	.word	0x080022dd
 800226c:	080022f5 	.word	0x080022f5
 8002270:	0800230d 	.word	0x0800230d
 8002274:	08002327 	.word	0x08002327
	case 'a':
		DrawCard(x, y, RED, (const uint64_t*) hearts, WHITE);
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	b298      	uxth	r0, r3
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	b299      	uxth	r1, r3
 8002280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <SelecionarCarta+0x148>)
 8002288:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800228c:	f7fe fd6a 	bl	8000d64 <DrawCard>
		break;
 8002290:	e056      	b.n	8002340 <SelecionarCarta+0x140>
	case 'b':
		DrawCard(x, y, RED, (const uint64_t*) diamonds, WHITE);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b298      	uxth	r0, r3
 8002296:	7bbb      	ldrb	r3, [r7, #14]
 8002298:	b299      	uxth	r1, r3
 800229a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <SelecionarCarta+0x14c>)
 80022a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022a6:	f7fe fd5d 	bl	8000d64 <DrawCard>
		break;
 80022aa:	e049      	b.n	8002340 <SelecionarCarta+0x140>
	case 'c':
		DrawCard(x, y, BLACK, (const uint64_t*) clubs, WHITE);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	b298      	uxth	r0, r3
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	b299      	uxth	r1, r3
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <SelecionarCarta+0x150>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f7fe fd51 	bl	8000d64 <DrawCard>
		break;
 80022c2:	e03d      	b.n	8002340 <SelecionarCarta+0x140>
	case 'd':
		DrawCard(x, y, BLACK, (const uint64_t*) spades, WHITE);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	b298      	uxth	r0, r3
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	b299      	uxth	r1, r3
 80022cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <SelecionarCarta+0x154>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f7fe fd45 	bl	8000d64 <DrawCard>
		break;
 80022da:	e031      	b.n	8002340 <SelecionarCarta+0x140>
	case 'e':
		DrawCard(x, y, BLACK, (const uint64_t*) hearts, WHITE);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b298      	uxth	r0, r3
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	b299      	uxth	r1, r3
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <SelecionarCarta+0x148>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	f7fe fd39 	bl	8000d64 <DrawCard>
		break;
 80022f2:	e025      	b.n	8002340 <SelecionarCarta+0x140>
	case 'f':
		DrawCard(x, y, BLACK, (const uint64_t*) diamonds, WHITE);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	b298      	uxth	r0, r3
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	b299      	uxth	r1, r3
 80022fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <SelecionarCarta+0x14c>)
 8002304:	2200      	movs	r2, #0
 8002306:	f7fe fd2d 	bl	8000d64 <DrawCard>
		break;
 800230a:	e019      	b.n	8002340 <SelecionarCarta+0x140>
	case 'g':
		DrawCard(x, y, RED, (const uint64_t*) clubs, WHITE);
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b298      	uxth	r0, r3
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	b299      	uxth	r1, r3
 8002314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <SelecionarCarta+0x150>)
 800231c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002320:	f7fe fd20 	bl	8000d64 <DrawCard>
		break;
 8002324:	e00c      	b.n	8002340 <SelecionarCarta+0x140>
	case 'h':
		DrawCard(x, y, RED, (const uint64_t*) spades, WHITE);
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	b298      	uxth	r0, r3
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	b299      	uxth	r1, r3
 800232e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <SelecionarCarta+0x154>)
 8002336:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800233a:	f7fe fd13 	bl	8000d64 <DrawCard>
		break;
 800233e:	bf00      	nop
	}
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	08006f58 	.word	0x08006f58
 800234c:	08007408 	.word	0x08007408
 8002350:	08007278 	.word	0x08007278
 8002354:	080070e8 	.word	0x080070e8

08002358 <VirarTodasCartas>:

void VirarTodasCartas(uint8_t linhas, uint8_t colunas){
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
	uint8_t x = 240/colunas, y = 240/linhas;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	22f0      	movs	r2, #240	; 0xf0
 800236c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	22f0      	movs	r2, #240	; 0xf0
 8002376:	fb92 f3f3 	sdiv	r3, r2, r3
 800237a:	73bb      	strb	r3, [r7, #14]
	for(int i = 0; i<linhas; i++){
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e020      	b.n	80023c4 <VirarTodasCartas+0x6c>
		for(int j = 0; j<colunas; j++){
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e016      	b.n	80023b6 <VirarTodasCartas+0x5e>
			ST7789_DrawImage(x*j, y*i, 50, 50, (const uint16_t *)fundocarta);
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b29b      	uxth	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	b292      	uxth	r2, r2
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	b298      	uxth	r0, r3
 8002396:	7bbb      	ldrb	r3, [r7, #14]
 8002398:	b29b      	uxth	r3, r3
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	b292      	uxth	r2, r2
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	b299      	uxth	r1, r3
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <VirarTodasCartas+0x7c>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2332      	movs	r3, #50	; 0x32
 80023aa:	2232      	movs	r2, #50	; 0x32
 80023ac:	f7fe f9ac 	bl	8000708 <ST7789_DrawImage>
		for(int j = 0; j<colunas; j++){
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	3301      	adds	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbe4      	blt.n	8002388 <VirarTodasCartas+0x30>
	for(int i = 0; i<linhas; i++){
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbda      	blt.n	8002382 <VirarTodasCartas+0x2a>
		}
	}
}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	08007598 	.word	0x08007598

080023d8 <AtualizarRecorde>:

void AtualizarRecorde(uint8_t atual){
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
	recorde = (recorde > atual) ? atual : recorde;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <AtualizarRecorde+0x28>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf28      	it	cs
 80023ec:	4613      	movcs	r3, r2
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <AtualizarRecorde+0x28>)
 80023f2:	701a      	strb	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010

08002404 <CompararPares>:

bool CompararPares(char a, char b){
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	return a==b;
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	79bb      	ldrb	r3, [r7, #6]
 8002418:	429a      	cmp	r2, r3
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <AtualizarTentativas>:

void AtualizarTentativas(uint8_t *tentativas){
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	(*tentativas)++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	701a      	strb	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <VerificaFimDeJogo>:

bool VerificaFimDeJogo(uint8_t acertos, uint8_t linhas, uint8_t colunas){
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	460b      	mov	r3, r1
 8002456:	71bb      	strb	r3, [r7, #6]
 8002458:	4613      	mov	r3, r2
 800245a:	717b      	strb	r3, [r7, #5]
	if(acertos >= linhas*colunas/2) return true;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	7979      	ldrb	r1, [r7, #5]
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	0fd9      	lsrs	r1, r3, #31
 8002468:	440b      	add	r3, r1
 800246a:	105b      	asrs	r3, r3, #1
 800246c:	429a      	cmp	r2, r3
 800246e:	db01      	blt.n	8002474 <VerificaFimDeJogo+0x2a>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <VerificaFimDeJogo+0x2c>
	return false;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <ExibirFimDeJogo>:

void ExibirFimDeJogo(uint8_t numeroDeTentativasDaRodada, uint8_t recorde){
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af04      	add	r7, sp, #16
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
	ST7789_Fill_Color(BLACK);
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe f805 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(50, 150, "Parabens!", Font_16x26, WHITE, BLACK);
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <ExibirFimDeJogo+0x1d4>)
 8002498:	2200      	movs	r2, #0
 800249a:	9202      	str	r2, [sp, #8]
 800249c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a0:	9201      	str	r2, [sp, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	9200      	str	r2, [sp, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <ExibirFimDeJogo+0x1d8>)
 80024aa:	2196      	movs	r1, #150	; 0x96
 80024ac:	2032      	movs	r0, #50	; 0x32
 80024ae:	f7fe f9fb 	bl	80008a8 <ST7789_WriteString>
	DrawCard(100, 60, RED, (const uint64_t*) hearts, BLACK);
 80024b2:	2300      	movs	r3, #0
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <ExibirFimDeJogo+0x1dc>)
 80024b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80024bc:	213c      	movs	r1, #60	; 0x3c
 80024be:	2064      	movs	r0, #100	; 0x64
 80024c0:	f7fe fc50 	bl	8000d64 <DrawCard>
	HAL_Delay(200);
 80024c4:	20c8      	movs	r0, #200	; 0xc8
 80024c6:	f000 fe85 	bl	80031d4 <HAL_Delay>
	DrawCard(100, 60, WHITE, (const uint64_t*) hearts, BLACK);
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <ExibirFimDeJogo+0x1dc>)
 80024d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d4:	213c      	movs	r1, #60	; 0x3c
 80024d6:	2064      	movs	r0, #100	; 0x64
 80024d8:	f7fe fc44 	bl	8000d64 <DrawCard>
	HAL_Delay(200);
 80024dc:	20c8      	movs	r0, #200	; 0xc8
 80024de:	f000 fe79 	bl	80031d4 <HAL_Delay>
	DrawCard(100, 60, BLUE, (const uint64_t*) hearts, BLACK);
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <ExibirFimDeJogo+0x1dc>)
 80024e8:	221f      	movs	r2, #31
 80024ea:	213c      	movs	r1, #60	; 0x3c
 80024ec:	2064      	movs	r0, #100	; 0x64
 80024ee:	f7fe fc39 	bl	8000d64 <DrawCard>
	HAL_Delay(200);
 80024f2:	20c8      	movs	r0, #200	; 0xc8
 80024f4:	f000 fe6e 	bl	80031d4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fd ffd1 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(20, 20, "Fim de Jogo!", Font_11x18, WHITE, BLACK);
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 8002500:	2200      	movs	r2, #0
 8002502:	9202      	str	r2, [sp, #8]
 8002504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002508:	9201      	str	r2, [sp, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	9200      	str	r2, [sp, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <ExibirFimDeJogo+0x1e4>)
 8002512:	2114      	movs	r1, #20
 8002514:	2014      	movs	r0, #20
 8002516:	f7fe f9c7 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(20, 50, "Tentativas:", Font_11x18, WHITE, BLACK);
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 800251c:	2200      	movs	r2, #0
 800251e:	9202      	str	r2, [sp, #8]
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <ExibirFimDeJogo+0x1e8>)
 800252e:	2132      	movs	r1, #50	; 0x32
 8002530:	2014      	movs	r0, #20
 8002532:	f7fe f9b9 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(20, 80, "Recorde:", Font_11x18, WHITE, BLACK);
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 8002538:	2200      	movs	r2, #0
 800253a:	9202      	str	r2, [sp, #8]
 800253c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <ExibirFimDeJogo+0x1ec>)
 800254a:	2150      	movs	r1, #80	; 0x50
 800254c:	2014      	movs	r0, #20
 800254e:	f7fe f9ab 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(20, 120, "Aperte qualquer", Font_11x18, WHITE, BLACK);
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 8002554:	2200      	movs	r2, #0
 8002556:	9202      	str	r2, [sp, #8]
 8002558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	9200      	str	r2, [sp, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <ExibirFimDeJogo+0x1f0>)
 8002566:	2178      	movs	r1, #120	; 0x78
 8002568:	2014      	movs	r0, #20
 800256a:	f7fe f99d 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(80, 138, "botao", Font_11x18, WHITE, BLACK);
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 8002570:	2200      	movs	r2, #0
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <ExibirFimDeJogo+0x1f4>)
 8002582:	218a      	movs	r1, #138	; 0x8a
 8002584:	2050      	movs	r0, #80	; 0x50
 8002586:	f7fe f98f 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(30, 156, "para reiniciar", Font_11x18, WHITE, BLACK);
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 800258c:	2200      	movs	r2, #0
 800258e:	9202      	str	r2, [sp, #8]
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	9201      	str	r2, [sp, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	9200      	str	r2, [sp, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a36      	ldr	r2, [pc, #216]	; (8002678 <ExibirFimDeJogo+0x1f8>)
 800259e:	219c      	movs	r1, #156	; 0x9c
 80025a0:	201e      	movs	r0, #30
 80025a2:	f7fe f981 	bl	80008a8 <ST7789_WriteString>

	char tentativasStr[3], recordeStr[3];
	sprintf(tentativasStr, "%d", numeroDeTentativasDaRodada);
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	4933      	ldr	r1, [pc, #204]	; (800267c <ExibirFimDeJogo+0x1fc>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 ff56 	bl	8004460 <siprintf>
	sprintf(recordeStr, "%d", recorde);
 80025b4:	79ba      	ldrb	r2, [r7, #6]
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	4930      	ldr	r1, [pc, #192]	; (800267c <ExibirFimDeJogo+0x1fc>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 ff4f 	bl	8004460 <siprintf>
	ST7789_WriteString(150, 50, tentativasStr, Font_11x18, WHITE, BLACK);
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 80025c4:	f107 010c 	add.w	r1, r7, #12
 80025c8:	2200      	movs	r2, #0
 80025ca:	9202      	str	r2, [sp, #8]
 80025cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	460a      	mov	r2, r1
 80025da:	2132      	movs	r1, #50	; 0x32
 80025dc:	2096      	movs	r0, #150	; 0x96
 80025de:	f7fe f963 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(110, 80, recordeStr, Font_11x18, WHITE, BLACK);
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <ExibirFimDeJogo+0x1e0>)
 80025e4:	f107 0108 	add.w	r1, r7, #8
 80025e8:	2200      	movs	r2, #0
 80025ea:	9202      	str	r2, [sp, #8]
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	460a      	mov	r2, r1
 80025fa:	2150      	movs	r1, #80	; 0x50
 80025fc:	206e      	movs	r0, #110	; 0x6e
 80025fe:	f7fe f953 	bl	80008a8 <ST7789_WriteString>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12));
 8002602:	bf00      	nop
 8002604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002608:	481d      	ldr	r0, [pc, #116]	; (8002680 <ExibirFimDeJogo+0x200>)
 800260a:	f001 f843 	bl	8003694 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d017      	beq.n	8002644 <ExibirFimDeJogo+0x1c4>
 8002614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002618:	4819      	ldr	r0, [pc, #100]	; (8002680 <ExibirFimDeJogo+0x200>)
 800261a:	f001 f83b 	bl	8003694 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00f      	beq.n	8002644 <ExibirFimDeJogo+0x1c4>
 8002624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002628:	4815      	ldr	r0, [pc, #84]	; (8002680 <ExibirFimDeJogo+0x200>)
 800262a:	f001 f833 	bl	8003694 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <ExibirFimDeJogo+0x1c4>
 8002634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002638:	4811      	ldr	r0, [pc, #68]	; (8002680 <ExibirFimDeJogo+0x200>)
 800263a:	f001 f82b 	bl	8003694 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1df      	bne.n	8002604 <ExibirFimDeJogo+0x184>
	ST7789_Fill_Color(BLACK);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fd ff2b 	bl	80004a0 <ST7789_Fill_Color>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008
 8002658:	08004e14 	.word	0x08004e14
 800265c:	08006f58 	.word	0x08006f58
 8002660:	20000000 	.word	0x20000000
 8002664:	08004e20 	.word	0x08004e20
 8002668:	08004e30 	.word	0x08004e30
 800266c:	08004e3c 	.word	0x08004e3c
 8002670:	08004e48 	.word	0x08004e48
 8002674:	08004e58 	.word	0x08004e58
 8002678:	08004e60 	.word	0x08004e60
 800267c:	08004e00 	.word	0x08004e00
 8002680:	40010800 	.word	0x40010800

08002684 <FimDeJogoDoisJogadores>:

void FimDeJogoDoisJogadores(uint8_t scorePlayer1, uint8_t scorePlayer2){
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af04      	add	r7, sp, #16
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	71bb      	strb	r3, [r7, #6]
	ST7789_Fill_Color(BLACK);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fd ff03 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(20, 20, "Fim de Jogo!", Font_11x18, WHITE, BLACK);
 800269a:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 800269c:	2200      	movs	r2, #0
 800269e:	9202      	str	r2, [sp, #8]
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <FimDeJogoDoisJogadores+0x158>)
 80026ae:	2114      	movs	r1, #20
 80026b0:	2014      	movs	r0, #20
 80026b2:	f7fe f8f9 	bl	80008a8 <ST7789_WriteString>
	if(scorePlayer1 == scorePlayer2) ST7789_WriteString(20, 80, "Empate", Font_11x18, WHITE, BLACK);
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	79bb      	ldrb	r3, [r7, #6]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10d      	bne.n	80026da <FimDeJogoDoisJogadores+0x56>
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	9202      	str	r2, [sp, #8]
 80026c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	9200      	str	r2, [sp, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <FimDeJogoDoisJogadores+0x15c>)
 80026d2:	2150      	movs	r1, #80	; 0x50
 80026d4:	2014      	movs	r0, #20
 80026d6:	f7fe f8e7 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(20, 50, "Parabens!", Font_11x18, WHITE, BLACK);
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 80026dc:	2200      	movs	r2, #0
 80026de:	9202      	str	r2, [sp, #8]
 80026e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e4:	9201      	str	r2, [sp, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	9200      	str	r2, [sp, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <FimDeJogoDoisJogadores+0x160>)
 80026ee:	2132      	movs	r1, #50	; 0x32
 80026f0:	2014      	movs	r0, #20
 80026f2:	f7fe f8d9 	bl	80008a8 <ST7789_WriteString>
	if(scorePlayer1 != scorePlayer2) ST7789_WriteString(20, 80, (scorePlayer1>scorePlayer2) ? "Vitoria Player1" : "Vitoria Player2", Font_11x18, (scorePlayer1>scorePlayer2) ? BLUE : YELLOW, BLACK);
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d01a      	beq.n	8002734 <FimDeJogoDoisJogadores+0xb0>
 80026fe:	79fa      	ldrb	r2, [r7, #7]
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	429a      	cmp	r2, r3
 8002704:	d901      	bls.n	800270a <FimDeJogoDoisJogadores+0x86>
 8002706:	4838      	ldr	r0, [pc, #224]	; (80027e8 <FimDeJogoDoisJogadores+0x164>)
 8002708:	e000      	b.n	800270c <FimDeJogoDoisJogadores+0x88>
 800270a:	4838      	ldr	r0, [pc, #224]	; (80027ec <FimDeJogoDoisJogadores+0x168>)
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	429a      	cmp	r2, r3
 8002712:	d901      	bls.n	8002718 <FimDeJogoDoisJogadores+0x94>
 8002714:	221f      	movs	r2, #31
 8002716:	e001      	b.n	800271c <FimDeJogoDoisJogadores+0x98>
 8002718:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 800271e:	2100      	movs	r1, #0
 8002720:	9102      	str	r1, [sp, #8]
 8002722:	9201      	str	r2, [sp, #4]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	9200      	str	r2, [sp, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4602      	mov	r2, r0
 800272c:	2150      	movs	r1, #80	; 0x50
 800272e:	2014      	movs	r0, #20
 8002730:	f7fe f8ba 	bl	80008a8 <ST7789_WriteString>

	ST7789_WriteString(20, 120, "Aperte qualquer", Font_11x18, WHITE, BLACK);
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 8002736:	2200      	movs	r2, #0
 8002738:	9202      	str	r2, [sp, #8]
 800273a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273e:	9201      	str	r2, [sp, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	9200      	str	r2, [sp, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <FimDeJogoDoisJogadores+0x16c>)
 8002748:	2178      	movs	r1, #120	; 0x78
 800274a:	2014      	movs	r0, #20
 800274c:	f7fe f8ac 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(80, 138, "botao", Font_11x18, WHITE, BLACK);
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 8002752:	2200      	movs	r2, #0
 8002754:	9202      	str	r2, [sp, #8]
 8002756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275a:	9201      	str	r2, [sp, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	9200      	str	r2, [sp, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <FimDeJogoDoisJogadores+0x170>)
 8002764:	218a      	movs	r1, #138	; 0x8a
 8002766:	2050      	movs	r0, #80	; 0x50
 8002768:	f7fe f89e 	bl	80008a8 <ST7789_WriteString>
	ST7789_WriteString(30, 156, "para reiniciar", Font_11x18, WHITE, BLACK);
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <FimDeJogoDoisJogadores+0x154>)
 800276e:	2200      	movs	r2, #0
 8002770:	9202      	str	r2, [sp, #8]
 8002772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002776:	9201      	str	r2, [sp, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	9200      	str	r2, [sp, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <FimDeJogoDoisJogadores+0x174>)
 8002780:	219c      	movs	r1, #156	; 0x9c
 8002782:	201e      	movs	r0, #30
 8002784:	f7fe f890 	bl	80008a8 <ST7789_WriteString>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12));
 8002788:	bf00      	nop
 800278a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800278e:	481b      	ldr	r0, [pc, #108]	; (80027fc <FimDeJogoDoisJogadores+0x178>)
 8002790:	f000 ff80 	bl	8003694 <HAL_GPIO_ReadPin>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d017      	beq.n	80027ca <FimDeJogoDoisJogadores+0x146>
 800279a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <FimDeJogoDoisJogadores+0x178>)
 80027a0:	f000 ff78 	bl	8003694 <HAL_GPIO_ReadPin>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <FimDeJogoDoisJogadores+0x146>
 80027aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027ae:	4813      	ldr	r0, [pc, #76]	; (80027fc <FimDeJogoDoisJogadores+0x178>)
 80027b0:	f000 ff70 	bl	8003694 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <FimDeJogoDoisJogadores+0x146>
 80027ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027be:	480f      	ldr	r0, [pc, #60]	; (80027fc <FimDeJogoDoisJogadores+0x178>)
 80027c0:	f000 ff68 	bl	8003694 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1df      	bne.n	800278a <FimDeJogoDoisJogadores+0x106>
	ST7789_Fill_Color(BLACK);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fd fe68 	bl	80004a0 <ST7789_Fill_Color>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000000 	.word	0x20000000
 80027dc:	08004e20 	.word	0x08004e20
 80027e0:	08004e70 	.word	0x08004e70
 80027e4:	08004e14 	.word	0x08004e14
 80027e8:	08004e78 	.word	0x08004e78
 80027ec:	08004e88 	.word	0x08004e88
 80027f0:	08004e48 	.word	0x08004e48
 80027f4:	08004e58 	.word	0x08004e58
 80027f8:	08004e60 	.word	0x08004e60
 80027fc:	40010800 	.word	0x40010800

08002800 <Jogo>:

void Jogo(char tabuleiro[4][4], uint8_t linhas, uint8_t colunas, uint8_t linhaAtual, uint8_t colunaAtual){
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	70fb      	strb	r3, [r7, #3]
 8002812:	460b      	mov	r3, r1
 8002814:	70bb      	strb	r3, [r7, #2]
 8002816:	4613      	mov	r3, r2
 8002818:	707b      	strb	r3, [r7, #1]
	ST7789_Fill_Color(BLACK);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fd fe40 	bl	80004a0 <ST7789_Fill_Color>
	for(;;){
		uint8_t totalDeCartasSelecionadas = 0, acertos = 0, posicoesCartasSelecionadas[2][2];
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i = 0; i < linhas; i++){
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	e017      	b.n	8002862 <Jogo+0x62>
			for(int j = 0; j < colunas; j++){
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e00d      	b.n	8002854 <Jogo+0x54>
				SelecionarCarta(tabuleiro, i, j, linhas, colunas);
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	b2d9      	uxtb	r1, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	78f8      	ldrb	r0, [r7, #3]
 8002842:	78bb      	ldrb	r3, [r7, #2]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4603      	mov	r3, r0
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fcd9 	bl	8002200 <SelecionarCarta>
			for(int j = 0; j < colunas; j++){
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	78bb      	ldrb	r3, [r7, #2]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbed      	blt.n	8002838 <Jogo+0x38>
		for(int i = 0; i < linhas; i++){
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	3301      	adds	r3, #1
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbe3      	blt.n	8002832 <Jogo+0x32>
			}
		}
		HAL_Delay(1500);
 800286a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800286e:	f000 fcb1 	bl	80031d4 <HAL_Delay>
		VirarTodasCartas(linhas, colunas);
 8002872:	78ba      	ldrb	r2, [r7, #2]
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fd6d 	bl	8002358 <VirarTodasCartas>
		uint8_t ultimaPosicao[2] = {100, 100}, ultimaPosicaoCursor[2] = {100,100};
 800287e:	4ba3      	ldr	r3, [pc, #652]	; (8002b0c <Jogo+0x30c>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	823b      	strh	r3, [r7, #16]
 8002884:	4ba1      	ldr	r3, [pc, #644]	; (8002b0c <Jogo+0x30c>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	81bb      	strh	r3, [r7, #12]
		while(!VerificaFimDeJogo(acertos, linhas, colunas)){
 800288a:	e12c      	b.n	8002ae6 <Jogo+0x2e6>
			NavegadorCursor(tabuleiro, &linhaAtual, &colunaAtual, linhas, colunas);
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	1c79      	adds	r1, r7, #1
 8002890:	78bb      	ldrb	r3, [r7, #2]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe ffd2 	bl	8001844 <NavegadorCursor>
			if (!CursorEstaEmCartaSelecionada(linhaAtual, colunaAtual, posicoesCartasSelecionadas, totalDeCartasSelecionadas) && (ultimaPosicaoCursor[0] != linhaAtual || ultimaPosicaoCursor[1] != colunaAtual)) {
 80028a0:	7878      	ldrb	r0, [r7, #1]
 80028a2:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028aa:	f107 0214 	add.w	r2, r7, #20
 80028ae:	f000 faf3 	bl	8002e98 <CursorEstaEmCartaSelecionada>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d064      	beq.n	8002988 <Jogo+0x188>
 80028be:	7b3a      	ldrb	r2, [r7, #12]
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d104      	bne.n	80028d0 <Jogo+0xd0>
 80028c6:	7b7a      	ldrb	r2, [r7, #13]
 80028c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d05b      	beq.n	8002988 <Jogo+0x188>
				if (ultimaPosicaoCursor[0] < linhas && ultimaPosicaoCursor[1] < colunas && tabuleiro[ultimaPosicaoCursor[0]][ultimaPosicaoCursor[1]] != '0' && !CursorEstaEmCartaSelecionada(ultimaPosicaoCursor[0], ultimaPosicaoCursor[1], posicoesCartasSelecionadas, totalDeCartasSelecionadas)) {
 80028d0:	7b3b      	ldrb	r3, [r7, #12]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d933      	bls.n	8002940 <Jogo+0x140>
 80028d8:	7b7b      	ldrb	r3, [r7, #13]
 80028da:	78ba      	ldrb	r2, [r7, #2]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d92f      	bls.n	8002940 <Jogo+0x140>
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	7b7a      	ldrb	r2, [r7, #13]
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d027      	beq.n	8002940 <Jogo+0x140>
 80028f0:	7b38      	ldrb	r0, [r7, #12]
 80028f2:	7b79      	ldrb	r1, [r7, #13]
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f8:	f107 0214 	add.w	r2, r7, #20
 80028fc:	f000 facc 	bl	8002e98 <CursorEstaEmCartaSelecionada>
 8002900:	4603      	mov	r3, r0
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <Jogo+0x140>
					ST7789_DrawImage(240 / colunas * ultimaPosicaoCursor[1], 240 / linhas * ultimaPosicaoCursor[0], 50, 50, (const uint16_t *)fundocarta);
 800290c:	78bb      	ldrb	r3, [r7, #2]
 800290e:	22f0      	movs	r2, #240	; 0xf0
 8002910:	fb92 f3f3 	sdiv	r3, r2, r3
 8002914:	b29b      	uxth	r3, r3
 8002916:	7b7a      	ldrb	r2, [r7, #13]
 8002918:	b292      	uxth	r2, r2
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	b298      	uxth	r0, r3
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	22f0      	movs	r2, #240	; 0xf0
 8002924:	fb92 f3f3 	sdiv	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	7b3a      	ldrb	r2, [r7, #12]
 800292c:	b292      	uxth	r2, r2
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	b299      	uxth	r1, r3
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <Jogo+0x310>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2332      	movs	r3, #50	; 0x32
 800293a:	2232      	movs	r2, #50	; 0x32
 800293c:	f7fd fee4 	bl	8000708 <ST7789_DrawImage>
				}
				ST7789_DrawFilledCircle(240/colunas * colunaAtual + 25, 240/linhas * linhaAtual + 25, 20, BLUE);
 8002940:	78bb      	ldrb	r3, [r7, #2]
 8002942:	22f0      	movs	r2, #240	; 0xf0
 8002944:	fb92 f3f3 	sdiv	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800294e:	b292      	uxth	r2, r2
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	b29b      	uxth	r3, r3
 8002956:	3319      	adds	r3, #25
 8002958:	b29b      	uxth	r3, r3
 800295a:	b218      	sxth	r0, r3
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	22f0      	movs	r2, #240	; 0xf0
 8002960:	fb92 f3f3 	sdiv	r3, r2, r3
 8002964:	b29b      	uxth	r3, r3
 8002966:	787a      	ldrb	r2, [r7, #1]
 8002968:	b292      	uxth	r2, r2
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	3319      	adds	r3, #25
 8002972:	b29b      	uxth	r3, r3
 8002974:	b219      	sxth	r1, r3
 8002976:	231f      	movs	r3, #31
 8002978:	2214      	movs	r2, #20
 800297a:	f7fe f90d 	bl	8000b98 <ST7789_DrawFilledCircle>
				ultimaPosicaoCursor[0] = linhaAtual;
 800297e:	787b      	ldrb	r3, [r7, #1]
 8002980:	733b      	strb	r3, [r7, #12]
				ultimaPosicaoCursor[1] = colunaAtual;
 8002982:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002986:	737b      	strb	r3, [r7, #13]
			}
			if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && (linhaAtual != ultimaPosicao[0] || colunaAtual != ultimaPosicao[1])){
 8002988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298c:	4861      	ldr	r0, [pc, #388]	; (8002b14 <Jogo+0x314>)
 800298e:	f000 fe81 	bl	8003694 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 80a6 	bne.w	8002ae6 <Jogo+0x2e6>
 800299a:	7c3a      	ldrb	r2, [r7, #16]
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d105      	bne.n	80029ae <Jogo+0x1ae>
 80029a2:	7c7a      	ldrb	r2, [r7, #17]
 80029a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f000 809c 	beq.w	8002ae6 <Jogo+0x2e6>
				SelecionarCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas);
 80029ae:	7879      	ldrb	r1, [r7, #1]
 80029b0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029b4:	78f8      	ldrb	r0, [r7, #3]
 80029b6:	78bb      	ldrb	r3, [r7, #2]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4603      	mov	r3, r0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fc1f 	bl	8002200 <SelecionarCarta>
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][0] = linhaAtual;
 80029c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	787a      	ldrb	r2, [r7, #1]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029d2:	440b      	add	r3, r1
 80029d4:	f803 2c14 	strb.w	r2, [r3, #-20]
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][1] = colunaAtual;
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029ea:	440b      	add	r3, r1
 80029ec:	f803 2c13 	strb.w	r2, [r3, #-19]
				totalDeCartasSelecionadas++;
 80029f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f4:	3301      	adds	r3, #1
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ultimaPosicao[0] = linhaAtual;
 80029fa:	787b      	ldrb	r3, [r7, #1]
 80029fc:	743b      	strb	r3, [r7, #16]
				ultimaPosicao[1] = colunaAtual;
 80029fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a02:	747b      	strb	r3, [r7, #17]
				if(totalDeCartasSelecionadas % 2 == 0){
 8002a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d169      	bne.n	8002ae6 <Jogo+0x2e6>
					AtualizarTentativas(&tentativas);
 8002a12:	4841      	ldr	r0, [pc, #260]	; (8002b18 <Jogo+0x318>)
 8002a14:	f7ff fd0a 	bl	800242c <AtualizarTentativas>
					char carta1 = tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]];
 8002a18:	7d3b      	ldrb	r3, [r7, #20]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	7d7a      	ldrb	r2, [r7, #21]
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	76fb      	strb	r3, [r7, #27]
					char carta2 = tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]];
 8002a26:	7dbb      	ldrb	r3, [r7, #22]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	7dfa      	ldrb	r2, [r7, #23]
 8002a30:	5c9b      	ldrb	r3, [r3, r2]
 8002a32:	76bb      	strb	r3, [r7, #26]
					if(CompararPares(carta1, carta2)){
 8002a34:	7eba      	ldrb	r2, [r7, #26]
 8002a36:	7efb      	ldrb	r3, [r7, #27]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fce2 	bl	8002404 <CompararPares>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <Jogo+0x26e>
						acertos++;
 8002a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]] = '0';
 8002a50:	7d3b      	ldrb	r3, [r7, #20]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	7d7a      	ldrb	r2, [r7, #21]
 8002a5a:	2130      	movs	r1, #48	; 0x30
 8002a5c:	5499      	strb	r1, [r3, r2]
						tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]] = '0';
 8002a5e:	7dbb      	ldrb	r3, [r7, #22]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	7dfa      	ldrb	r2, [r7, #23]
 8002a68:	2130      	movs	r1, #48	; 0x30
 8002a6a:	5499      	strb	r1, [r3, r2]
 8002a6c:	e03b      	b.n	8002ae6 <Jogo+0x2e6>
					}
					else{
						HAL_Delay(1000);
 8002a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a72:	f000 fbaf 	bl	80031d4 <HAL_Delay>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[0][1], 240/linhas*posicoesCartasSelecionadas[0][0], 50, 50, (const uint16_t *)fundocarta);
 8002a76:	78bb      	ldrb	r3, [r7, #2]
 8002a78:	22f0      	movs	r2, #240	; 0xf0
 8002a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	7d7a      	ldrb	r2, [r7, #21]
 8002a82:	b292      	uxth	r2, r2
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	b298      	uxth	r0, r3
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	22f0      	movs	r2, #240	; 0xf0
 8002a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	7d3a      	ldrb	r2, [r7, #20]
 8002a96:	b292      	uxth	r2, r2
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <Jogo+0x310>)
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2332      	movs	r3, #50	; 0x32
 8002aa4:	2232      	movs	r2, #50	; 0x32
 8002aa6:	f7fd fe2f 	bl	8000708 <ST7789_DrawImage>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[1][1], 240/linhas*posicoesCartasSelecionadas[1][0], 50, 50, (const uint16_t *)fundocarta);
 8002aaa:	78bb      	ldrb	r3, [r7, #2]
 8002aac:	22f0      	movs	r2, #240	; 0xf0
 8002aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	7dfa      	ldrb	r2, [r7, #23]
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	b298      	uxth	r0, r3
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	22f0      	movs	r2, #240	; 0xf0
 8002ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	7dba      	ldrb	r2, [r7, #22]
 8002aca:	b292      	uxth	r2, r2
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <Jogo+0x310>)
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2332      	movs	r3, #50	; 0x32
 8002ad8:	2232      	movs	r2, #50	; 0x32
 8002ada:	f7fd fe15 	bl	8000708 <ST7789_DrawImage>
						ultimaPosicao[0] = 100;
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	743b      	strb	r3, [r7, #16]
						ultimaPosicao[1] = 100;
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	747b      	strb	r3, [r7, #17]
		while(!VerificaFimDeJogo(acertos, linhas, colunas)){
 8002ae6:	78ba      	ldrb	r2, [r7, #2]
 8002ae8:	78f9      	ldrb	r1, [r7, #3]
 8002aea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fcab 	bl	800244a <VerificaFimDeJogo>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f aec5 	bne.w	800288c <Jogo+0x8c>
					}
				}
			}
		}
		break;
 8002b02:	bf00      	nop
	}
}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08004e98 	.word	0x08004e98
 8002b10:	08007598 	.word	0x08007598
 8002b14:	40010800 	.word	0x40010800
 8002b18:	200000b8 	.word	0x200000b8

08002b1c <Jogo2Players>:

void Jogo2Players(char tabuleiro[4][4], uint8_t linhas, uint8_t colunas, uint8_t linhaAtual, uint8_t colunaAtual){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	70fb      	strb	r3, [r7, #3]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70bb      	strb	r3, [r7, #2]
 8002b32:	4613      	mov	r3, r2
 8002b34:	707b      	strb	r3, [r7, #1]
	ST7789_Fill_Color(BLACK);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fd fcb2 	bl	80004a0 <ST7789_Fill_Color>
	for(;;){
		uint8_t totalDeCartasSelecionadas = 0, acertosJogador1 = 0, acertosJogador2 = 0, posicoesCartasSelecionadas[2][2], jogadorAtual = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for(int i = 0; i < linhas; i++){
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	e017      	b.n	8002b8a <Jogo2Players+0x6e>
			for(int j = 0; j < colunas; j++){
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e00d      	b.n	8002b7c <Jogo2Players+0x60>
				SelecionarCarta(tabuleiro, i, j, linhas, colunas);
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	78f8      	ldrb	r0, [r7, #3]
 8002b6a:	78bb      	ldrb	r3, [r7, #2]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fb45 	bl	8002200 <SelecionarCarta>
			for(int j = 0; j < colunas; j++){
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	78bb      	ldrb	r3, [r7, #2]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dbed      	blt.n	8002b60 <Jogo2Players+0x44>
		for(int i = 0; i < linhas; i++){
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	3301      	adds	r3, #1
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbe3      	blt.n	8002b5a <Jogo2Players+0x3e>
			}
		}
		HAL_Delay(1500);
 8002b92:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b96:	f000 fb1d 	bl	80031d4 <HAL_Delay>
		VirarTodasCartas(linhas, colunas);
 8002b9a:	78ba      	ldrb	r2, [r7, #2]
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbd9 	bl	8002358 <VirarTodasCartas>
		uint8_t ultimaPosicao[2] = {100, 100}, ultimaPosicaoCursor[2] = {100,100};
 8002ba6:	4bb8      	ldr	r3, [pc, #736]	; (8002e88 <Jogo2Players+0x36c>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	823b      	strh	r3, [r7, #16]
 8002bac:	4bb6      	ldr	r3, [pc, #728]	; (8002e88 <Jogo2Players+0x36c>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	81bb      	strh	r3, [r7, #12]
		while(!VerificaFimDeJogo(acertosJogador1 + acertosJogador2, linhas, colunas)){
 8002bb2:	e14a      	b.n	8002e4a <Jogo2Players+0x32e>
			NavegadorCursor(tabuleiro, &linhaAtual, &colunaAtual, linhas, colunas);
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	1c79      	adds	r1, r7, #1
 8002bb8:	78bb      	ldrb	r3, [r7, #2]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fe3e 	bl	8001844 <NavegadorCursor>
			if (!CursorEstaEmCartaSelecionada(linhaAtual, colunaAtual, posicoesCartasSelecionadas, totalDeCartasSelecionadas) && (ultimaPosicaoCursor[0] != linhaAtual || ultimaPosicaoCursor[1] != colunaAtual)) {
 8002bc8:	7878      	ldrb	r0, [r7, #1]
 8002bca:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	f107 0214 	add.w	r2, r7, #20
 8002bd6:	f000 f95f 	bl	8002e98 <CursorEstaEmCartaSelecionada>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f083 0301 	eor.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06e      	beq.n	8002cc4 <Jogo2Players+0x1a8>
 8002be6:	7b3a      	ldrb	r2, [r7, #12]
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d104      	bne.n	8002bf8 <Jogo2Players+0xdc>
 8002bee:	7b7a      	ldrb	r2, [r7, #13]
 8002bf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d065      	beq.n	8002cc4 <Jogo2Players+0x1a8>
				if (ultimaPosicaoCursor[0] < linhas && ultimaPosicaoCursor[1] < colunas && tabuleiro[ultimaPosicaoCursor[0]][ultimaPosicaoCursor[1]] != '0' && !CursorEstaEmCartaSelecionada(ultimaPosicaoCursor[0], ultimaPosicaoCursor[1], posicoesCartasSelecionadas, totalDeCartasSelecionadas)) {
 8002bf8:	7b3b      	ldrb	r3, [r7, #12]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d933      	bls.n	8002c68 <Jogo2Players+0x14c>
 8002c00:	7b7b      	ldrb	r3, [r7, #13]
 8002c02:	78ba      	ldrb	r2, [r7, #2]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d92f      	bls.n	8002c68 <Jogo2Players+0x14c>
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	7b7a      	ldrb	r2, [r7, #13]
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b30      	cmp	r3, #48	; 0x30
 8002c16:	d027      	beq.n	8002c68 <Jogo2Players+0x14c>
 8002c18:	7b38      	ldrb	r0, [r7, #12]
 8002c1a:	7b79      	ldrb	r1, [r7, #13]
 8002c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c20:	f107 0214 	add.w	r2, r7, #20
 8002c24:	f000 f938 	bl	8002e98 <CursorEstaEmCartaSelecionada>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d019      	beq.n	8002c68 <Jogo2Players+0x14c>
					ST7789_DrawImage(240 / colunas * ultimaPosicaoCursor[1], 240 / linhas * ultimaPosicaoCursor[0], 50, 50, (const uint16_t *)fundocarta);
 8002c34:	78bb      	ldrb	r3, [r7, #2]
 8002c36:	22f0      	movs	r2, #240	; 0xf0
 8002c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	7b7a      	ldrb	r2, [r7, #13]
 8002c40:	b292      	uxth	r2, r2
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	b298      	uxth	r0, r3
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	22f0      	movs	r2, #240	; 0xf0
 8002c4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	7b3a      	ldrb	r2, [r7, #12]
 8002c54:	b292      	uxth	r2, r2
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	4b8b      	ldr	r3, [pc, #556]	; (8002e8c <Jogo2Players+0x370>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2332      	movs	r3, #50	; 0x32
 8002c62:	2232      	movs	r2, #50	; 0x32
 8002c64:	f7fd fd50 	bl	8000708 <ST7789_DrawImage>
				}
				ST7789_DrawFilledCircle(240/colunas * colunaAtual + 25, 240/linhas * linhaAtual + 25, 20, (jogadorAtual%2 == 0) ? BLUE : YELLOW);
 8002c68:	78bb      	ldrb	r3, [r7, #2]
 8002c6a:	22f0      	movs	r2, #240	; 0xf0
 8002c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002c76:	b292      	uxth	r2, r2
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3319      	adds	r3, #25
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b218      	sxth	r0, r3
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	22f0      	movs	r2, #240	; 0xf0
 8002c88:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	787a      	ldrb	r2, [r7, #1]
 8002c90:	b292      	uxth	r2, r2
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3319      	adds	r3, #25
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b219      	sxth	r1, r3
 8002c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <Jogo2Players+0x194>
 8002cac:	231f      	movs	r3, #31
 8002cae:	e001      	b.n	8002cb4 <Jogo2Players+0x198>
 8002cb0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cb4:	2214      	movs	r2, #20
 8002cb6:	f7fd ff6f 	bl	8000b98 <ST7789_DrawFilledCircle>
				ultimaPosicaoCursor[0] = linhaAtual;
 8002cba:	787b      	ldrb	r3, [r7, #1]
 8002cbc:	733b      	strb	r3, [r7, #12]
				ultimaPosicaoCursor[1] = colunaAtual;
 8002cbe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002cc2:	737b      	strb	r3, [r7, #13]
			}
			if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) && (linhaAtual != ultimaPosicao[0] || colunaAtual != ultimaPosicao[1])){
 8002cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cc8:	4871      	ldr	r0, [pc, #452]	; (8002e90 <Jogo2Players+0x374>)
 8002cca:	f000 fce3 	bl	8003694 <HAL_GPIO_ReadPin>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 80ba 	bne.w	8002e4a <Jogo2Players+0x32e>
 8002cd6:	7c3a      	ldrb	r2, [r7, #16]
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d105      	bne.n	8002cea <Jogo2Players+0x1ce>
 8002cde:	7c7a      	ldrb	r2, [r7, #17]
 8002ce0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f000 80b0 	beq.w	8002e4a <Jogo2Players+0x32e>
				SelecionarCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas);
 8002cea:	7879      	ldrb	r1, [r7, #1]
 8002cec:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002cf0:	78f8      	ldrb	r0, [r7, #3]
 8002cf2:	78bb      	ldrb	r3, [r7, #2]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fa81 	bl	8002200 <SelecionarCarta>
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][0] = linhaAtual;
 8002cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	787a      	ldrb	r2, [r7, #1]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d0e:	440b      	add	r3, r1
 8002d10:	f803 2c14 	strb.w	r2, [r3, #-20]
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][1] = colunaAtual;
 8002d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d26:	440b      	add	r3, r1
 8002d28:	f803 2c13 	strb.w	r2, [r3, #-19]
				totalDeCartasSelecionadas++;
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d30:	3301      	adds	r3, #1
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ultimaPosicao[0] = linhaAtual;
 8002d36:	787b      	ldrb	r3, [r7, #1]
 8002d38:	743b      	strb	r3, [r7, #16]
				ultimaPosicao[1] = colunaAtual;
 8002d3a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d3e:	747b      	strb	r3, [r7, #17]
				if(totalDeCartasSelecionadas % 2 == 0){
 8002d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d17d      	bne.n	8002e4a <Jogo2Players+0x32e>
					AtualizarTentativas(&tentativas);
 8002d4e:	4851      	ldr	r0, [pc, #324]	; (8002e94 <Jogo2Players+0x378>)
 8002d50:	f7ff fb6c 	bl	800242c <AtualizarTentativas>
					char carta1 = tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]];
 8002d54:	7d3b      	ldrb	r3, [r7, #20]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	7d7a      	ldrb	r2, [r7, #21]
 8002d5e:	5c9b      	ldrb	r3, [r3, r2]
 8002d60:	76fb      	strb	r3, [r7, #27]
					char carta2 = tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]];
 8002d62:	7dbb      	ldrb	r3, [r7, #22]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	7dfa      	ldrb	r2, [r7, #23]
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	76bb      	strb	r3, [r7, #26]
					if(CompararPares(carta1, carta2)){
 8002d70:	7eba      	ldrb	r2, [r7, #26]
 8002d72:	7efb      	ldrb	r3, [r7, #27]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fb44 	bl	8002404 <CompararPares>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01d      	beq.n	8002dbe <Jogo2Players+0x2a2>
						if(jogadorAtual == 0) acertosJogador1++;
 8002d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <Jogo2Players+0x27a>
 8002d8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d94:	e004      	b.n	8002da0 <Jogo2Players+0x284>
						else acertosJogador2++;
 8002d96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]] = '0';
 8002da0:	7d3b      	ldrb	r3, [r7, #20]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	7d7a      	ldrb	r2, [r7, #21]
 8002daa:	2130      	movs	r1, #48	; 0x30
 8002dac:	5499      	strb	r1, [r3, r2]
						tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]] = '0';
 8002dae:	7dbb      	ldrb	r3, [r7, #22]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	7dfa      	ldrb	r2, [r7, #23]
 8002db8:	2130      	movs	r1, #48	; 0x30
 8002dba:	5499      	strb	r1, [r3, r2]
 8002dbc:	e03b      	b.n	8002e36 <Jogo2Players+0x31a>
					}
					else{
						HAL_Delay(1000);
 8002dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc2:	f000 fa07 	bl	80031d4 <HAL_Delay>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[0][1], 240/linhas*posicoesCartasSelecionadas[0][0], 50, 50, (const uint16_t *)fundocarta);
 8002dc6:	78bb      	ldrb	r3, [r7, #2]
 8002dc8:	22f0      	movs	r2, #240	; 0xf0
 8002dca:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	7d7a      	ldrb	r2, [r7, #21]
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	22f0      	movs	r2, #240	; 0xf0
 8002dde:	fb92 f3f3 	sdiv	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	7d3a      	ldrb	r2, [r7, #20]
 8002de6:	b292      	uxth	r2, r2
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	b299      	uxth	r1, r3
 8002dee:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <Jogo2Players+0x370>)
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2332      	movs	r3, #50	; 0x32
 8002df4:	2232      	movs	r2, #50	; 0x32
 8002df6:	f7fd fc87 	bl	8000708 <ST7789_DrawImage>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[1][1], 240/linhas*posicoesCartasSelecionadas[1][0], 50, 50, (const uint16_t *)fundocarta);
 8002dfa:	78bb      	ldrb	r3, [r7, #2]
 8002dfc:	22f0      	movs	r2, #240	; 0xf0
 8002dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	7dfa      	ldrb	r2, [r7, #23]
 8002e06:	b292      	uxth	r2, r2
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	b298      	uxth	r0, r3
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	22f0      	movs	r2, #240	; 0xf0
 8002e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	7dba      	ldrb	r2, [r7, #22]
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <Jogo2Players+0x370>)
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2332      	movs	r3, #50	; 0x32
 8002e28:	2232      	movs	r2, #50	; 0x32
 8002e2a:	f7fd fc6d 	bl	8000708 <ST7789_DrawImage>
						ultimaPosicao[0] = 100;
 8002e2e:	2364      	movs	r3, #100	; 0x64
 8002e30:	743b      	strb	r3, [r7, #16]
						ultimaPosicao[1] = 100;
 8002e32:	2364      	movs	r3, #100	; 0x64
 8002e34:	747b      	strb	r3, [r7, #17]
					}
					jogadorAtual = (jogadorAtual+1)%2;
 8002e36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	bfb8      	it	lt
 8002e44:	425b      	neglt	r3, r3
 8002e46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		while(!VerificaFimDeJogo(acertosJogador1 + acertosJogador2, linhas, colunas)){
 8002e4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e52:	4413      	add	r3, r2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	78ba      	ldrb	r2, [r7, #2]
 8002e58:	78f9      	ldrb	r1, [r7, #3]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff faf5 	bl	800244a <VerificaFimDeJogo>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aea3 	bne.w	8002bb4 <Jogo2Players+0x98>
				}
			}
		}
		FimDeJogoDoisJogadores(acertosJogador1, acertosJogador2);
 8002e6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fc03 	bl	8002684 <FimDeJogoDoisJogadores>
		break;
 8002e7e:	bf00      	nop
	}
}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	08004e98 	.word	0x08004e98
 8002e8c:	08007598 	.word	0x08007598
 8002e90:	40010800 	.word	0x40010800
 8002e94:	200000b8 	.word	0x200000b8

08002e98 <CursorEstaEmCartaSelecionada>:

bool CursorEstaEmCartaSelecionada(uint8_t linha, uint8_t coluna, uint8_t posicoes[2][2], uint8_t totalSelecionadas) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	603a      	str	r2, [r7, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	71bb      	strb	r3, [r7, #6]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	717b      	strb	r3, [r7, #5]
	if (totalSelecionadas == 0) return false;
 8002eae:	797b      	ldrb	r3, [r7, #5]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <CursorEstaEmCartaSelecionada+0x20>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e01b      	b.n	8002ef0 <CursorEstaEmCartaSelecionada+0x58>

	for (int i = 0; i < 2; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e014      	b.n	8002ee8 <CursorEstaEmCartaSelecionada+0x50>
		if (linha == posicoes[i][0] && coluna == posicoes[i][1]) {
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d109      	bne.n	8002ee2 <CursorEstaEmCartaSelecionada+0x4a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	79ba      	ldrb	r2, [r7, #6]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d101      	bne.n	8002ee2 <CursorEstaEmCartaSelecionada+0x4a>
			return true;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e006      	b.n	8002ef0 <CursorEstaEmCartaSelecionada+0x58>
	for (int i = 0; i < 2; i++) {
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	dde7      	ble.n	8002ebe <CursorEstaEmCartaSelecionada+0x26>
		}
	}
	return false;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002efe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <Error_Handler+0x6>
	...

08002f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6193      	str	r3, [r2, #24]
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_MspInit+0x60>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_MspInit+0x60>)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000

08002f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_SPI_MspInit+0x88>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d12f      	bne.n	8002fe8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002f8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f92:	6193      	str	r3, [r2, #24]
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6193      	str	r3, [r2, #24]
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_SPI_MspInit+0x8c>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fb8:	23a0      	movs	r3, #160	; 0xa0
 8002fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <HAL_SPI_MspInit+0x90>)
 8002fcc:	f000 fa08 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fd0:	2340      	movs	r3, #64	; 0x40
 8002fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <HAL_SPI_MspInit+0x90>)
 8002fe4:	f000 f9fc 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fe8:	bf00      	nop
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40013000 	.word	0x40013000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010800 	.word	0x40010800

08002ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <NMI_Handler+0x4>

08003002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <HardFault_Handler+0x4>

08003008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <MemManage_Handler+0x4>

0800300e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <BusFault_Handler+0x4>

08003014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <UsageFault_Handler+0x4>

0800301a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f000 f8ab 	bl	800319c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <_sbrk+0x5c>)
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <_sbrk+0x60>)
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <_sbrk+0x64>)
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <_sbrk+0x68>)
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800307c:	f001 f98a 	bl	8004394 <__errno>
 8003080:	4602      	mov	r2, r0
 8003082:	230c      	movs	r3, #12
 8003084:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e009      	b.n	80030a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <_sbrk+0x64>)
 800309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20005000 	.word	0x20005000
 80030ac:	00000400 	.word	0x00000400
 80030b0:	200000c4 	.word	0x200000c4
 80030b4:	20000130 	.word	0x20000130

080030b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030c6:	490d      	ldr	r1, [pc, #52]	; (80030fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030c8:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030dc:	4c0a      	ldr	r4, [pc, #40]	; (8003108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ea:	f7ff ffe5 	bl	80030b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ee:	f001 f957 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030f2:	f7fd fe96 	bl	8000e22 <main>
  bx lr
 80030f6:	4770      	bx	lr
  ldr r0, =_sdata
 80030f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003100:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 8003104:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003108:	20000130 	.word	0x20000130

0800310c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800310c:	e7fe      	b.n	800310c <ADC1_2_IRQHandler>
	...

08003110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_Init+0x28>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a07      	ldr	r2, [pc, #28]	; (8003138 <HAL_Init+0x28>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003120:	2003      	movs	r0, #3
 8003122:	f000 f929 	bl	8003378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f808 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800312c:	f7ff feea 	bl	8002f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_InitTick+0x54>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_InitTick+0x58>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f933 	bl	80033c6 <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e00e      	b.n	8003188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d80a      	bhi.n	8003186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003170:	2200      	movs	r2, #0
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	f000 f909 	bl	800338e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800317c:	4a06      	ldr	r2, [pc, #24]	; (8003198 <HAL_InitTick+0x5c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	2000002c 	.word	0x2000002c
 8003194:	20000034 	.word	0x20000034
 8003198:	20000030 	.word	0x20000030

0800319c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_IncTick+0x1c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_IncTick+0x20>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	4a03      	ldr	r2, [pc, #12]	; (80031bc <HAL_IncTick+0x20>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000034 	.word	0x20000034
 80031bc:	20000128 	.word	0x20000128

080031c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_GetTick+0x10>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	20000128 	.word	0x20000128

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_Delay+0x40>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fa:	bf00      	nop
 80031fc:	f7ff ffe0 	bl	80031c0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000034 	.word	0x20000034

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003344:	d301      	bcc.n	800334a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003346:	2301      	movs	r3, #1
 8003348:	e00f      	b.n	800336a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <SysTick_Config+0x40>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003352:	210f      	movs	r1, #15
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	f7ff ff90 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <SysTick_Config+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <SysTick_Config+0x40>)
 8003364:	2207      	movs	r2, #7
 8003366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff49 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a0:	f7ff ff5e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f7ff ff90 	bl	80032d0 <NVIC_EncodePriority>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff5f 	bl	800327c <__NVIC_SetPriority>
}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffb0 	bl	8003334 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b08b      	sub	sp, #44	; 0x2c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f2:	e127      	b.n	8003644 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033f4:	2201      	movs	r2, #1
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8116 	bne.w	800363e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b12      	cmp	r3, #18
 8003418:	d034      	beq.n	8003484 <HAL_GPIO_Init+0xa4>
 800341a:	2b12      	cmp	r3, #18
 800341c:	d80d      	bhi.n	800343a <HAL_GPIO_Init+0x5a>
 800341e:	2b02      	cmp	r3, #2
 8003420:	d02b      	beq.n	800347a <HAL_GPIO_Init+0x9a>
 8003422:	2b02      	cmp	r3, #2
 8003424:	d804      	bhi.n	8003430 <HAL_GPIO_Init+0x50>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d031      	beq.n	800348e <HAL_GPIO_Init+0xae>
 800342a:	2b01      	cmp	r3, #1
 800342c:	d01c      	beq.n	8003468 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800342e:	e048      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003430:	2b03      	cmp	r3, #3
 8003432:	d043      	beq.n	80034bc <HAL_GPIO_Init+0xdc>
 8003434:	2b11      	cmp	r3, #17
 8003436:	d01b      	beq.n	8003470 <HAL_GPIO_Init+0x90>
          break;
 8003438:	e043      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800343a:	4a89      	ldr	r2, [pc, #548]	; (8003660 <HAL_GPIO_Init+0x280>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d026      	beq.n	800348e <HAL_GPIO_Init+0xae>
 8003440:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_GPIO_Init+0x280>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d806      	bhi.n	8003454 <HAL_GPIO_Init+0x74>
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <HAL_GPIO_Init+0x284>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d020      	beq.n	800348e <HAL_GPIO_Init+0xae>
 800344c:	4a86      	ldr	r2, [pc, #536]	; (8003668 <HAL_GPIO_Init+0x288>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_GPIO_Init+0xae>
          break;
 8003452:	e036      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003454:	4a85      	ldr	r2, [pc, #532]	; (800366c <HAL_GPIO_Init+0x28c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_Init+0xae>
 800345a:	4a85      	ldr	r2, [pc, #532]	; (8003670 <HAL_GPIO_Init+0x290>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d016      	beq.n	800348e <HAL_GPIO_Init+0xae>
 8003460:	4a84      	ldr	r2, [pc, #528]	; (8003674 <HAL_GPIO_Init+0x294>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_GPIO_Init+0xae>
          break;
 8003466:	e02c      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	623b      	str	r3, [r7, #32]
          break;
 800346e:	e028      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	623b      	str	r3, [r7, #32]
          break;
 8003478:	e023      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	3308      	adds	r3, #8
 8003480:	623b      	str	r3, [r7, #32]
          break;
 8003482:	e01e      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	330c      	adds	r3, #12
 800348a:	623b      	str	r3, [r7, #32]
          break;
 800348c:	e019      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003496:	2304      	movs	r3, #4
 8003498:	623b      	str	r3, [r7, #32]
          break;
 800349a:	e012      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034a4:	2308      	movs	r3, #8
 80034a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	611a      	str	r2, [r3, #16]
          break;
 80034ae:	e008      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034b0:	2308      	movs	r3, #8
 80034b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	615a      	str	r2, [r3, #20]
          break;
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
          break;
 80034c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2bff      	cmp	r3, #255	; 0xff
 80034c6:	d801      	bhi.n	80034cc <HAL_GPIO_Init+0xec>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	e001      	b.n	80034d0 <HAL_GPIO_Init+0xf0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2bff      	cmp	r3, #255	; 0xff
 80034d6:	d802      	bhi.n	80034de <HAL_GPIO_Init+0xfe>
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_Init+0x104>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	3b08      	subs	r3, #8
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	210f      	movs	r1, #15
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	401a      	ands	r2, r3
 80034f6:	6a39      	ldr	r1, [r7, #32]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8096 	beq.w	800363e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003512:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_GPIO_Init+0x298>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <HAL_GPIO_Init+0x298>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6193      	str	r3, [r2, #24]
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_GPIO_Init+0x298>)
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800352a:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_GPIO_Init+0x29c>)
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4b      	ldr	r2, [pc, #300]	; (8003680 <HAL_GPIO_Init+0x2a0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x19e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_GPIO_Init+0x2a4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x19a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_GPIO_Init+0x2a8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x196>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_GPIO_Init+0x2ac>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x192>
 800356e:	2303      	movs	r3, #3
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x1a0>
 8003572:	2304      	movs	r3, #4
 8003574:	e004      	b.n	8003580 <HAL_GPIO_Init+0x1a0>
 8003576:	2302      	movs	r3, #2
 8003578:	e002      	b.n	8003580 <HAL_GPIO_Init+0x1a0>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x1a0>
 800357e:	2300      	movs	r3, #0
 8003580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003582:	f002 0203 	and.w	r2, r2, #3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4093      	lsls	r3, r2
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003590:	493a      	ldr	r1, [pc, #232]	; (800367c <HAL_GPIO_Init+0x29c>)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4938      	ldr	r1, [pc, #224]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
 80035b6:	e006      	b.n	80035c6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	43db      	mvns	r3, r3
 80035c0:	4933      	ldr	r1, [pc, #204]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	492e      	ldr	r1, [pc, #184]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4929      	ldr	r1, [pc, #164]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4924      	ldr	r1, [pc, #144]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
 8003606:	e006      	b.n	8003616 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	43db      	mvns	r3, r3
 8003610:	491f      	ldr	r1, [pc, #124]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003612:	4013      	ands	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	491a      	ldr	r1, [pc, #104]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]
 800362e:	e006      	b.n	800363e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	43db      	mvns	r3, r3
 8003638:	4915      	ldr	r1, [pc, #84]	; (8003690 <HAL_GPIO_Init+0x2b0>)
 800363a:	4013      	ands	r3, r2
 800363c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	3301      	adds	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f aed0 	bne.w	80033f4 <HAL_GPIO_Init+0x14>
  }
}
 8003654:	bf00      	nop
 8003656:	372c      	adds	r7, #44	; 0x2c
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	10210000 	.word	0x10210000
 8003664:	10110000 	.word	0x10110000
 8003668:	10120000 	.word	0x10120000
 800366c:	10310000 	.word	0x10310000
 8003670:	10320000 	.word	0x10320000
 8003674:	10220000 	.word	0x10220000
 8003678:	40021000 	.word	0x40021000
 800367c:	40010000 	.word	0x40010000
 8003680:	40010800 	.word	0x40010800
 8003684:	40010c00 	.word	0x40010c00
 8003688:	40011000 	.word	0x40011000
 800368c:	40011400 	.word	0x40011400
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e001      	b.n	80036b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	807b      	strh	r3, [r7, #2]
 80036ce:	4613      	mov	r3, r2
 80036d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d2:	787b      	ldrb	r3, [r7, #1]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d8:	887a      	ldrh	r2, [r7, #2]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036de:	e003      	b.n	80036e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	041a      	lsls	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	611a      	str	r2, [r3, #16]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e26c      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8087 	beq.w	8003822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003714:	4b92      	ldr	r3, [pc, #584]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00c      	beq.n	800373a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d112      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
 800372c:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d10b      	bne.n	8003752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373a:	4b89      	ldr	r3, [pc, #548]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d06c      	beq.n	8003820 <HAL_RCC_OscConfig+0x12c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d168      	bne.n	8003820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e246      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x76>
 800375c:	4b80      	ldr	r3, [pc, #512]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7f      	ldr	r2, [pc, #508]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e02e      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x98>
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b78      	ldr	r3, [pc, #480]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0xbc>
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a71      	ldr	r2, [pc, #452]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xd4>
 80037b0:	4b6b      	ldr	r3, [pc, #428]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6a      	ldr	r2, [pc, #424]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b68      	ldr	r3, [pc, #416]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a67      	ldr	r2, [pc, #412]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7ff fcf6 	bl	80031c0 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7ff fcf2 	bl	80031c0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1fa      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xe4>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff fce2 	bl	80031c0 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7ff fcde 	bl	80031c0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1e6      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x10c>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800382e:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x18c>
 8003846:	4b46      	ldr	r3, [pc, #280]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x176>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1ba      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4939      	ldr	r1, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x270>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7ff fc97 	bl	80031c0 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003896:	f7ff fc93 	bl	80031c0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e19b      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4927      	ldr	r1, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCC_OscConfig+0x270>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7ff fc76 	bl	80031c0 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d8:	f7ff fc72 	bl	80031c0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e17a      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03a      	beq.n	8003978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d019      	beq.n	800393e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_RCC_OscConfig+0x274>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7ff fc56 	bl	80031c0 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003918:	f7ff fc52 	bl	80031c0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e15a      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_OscConfig+0x26c>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f000 faa8 	bl	8003e8c <RCC_Delay>
 800393c:	e01c      	b.n	8003978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_RCC_OscConfig+0x274>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7ff fc3c 	bl	80031c0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394a:	e00f      	b.n	800396c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394c:	f7ff fc38 	bl	80031c0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d908      	bls.n	800396c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e140      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	42420000 	.word	0x42420000
 8003968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b9e      	ldr	r3, [pc, #632]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e9      	bne.n	800394c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a6 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b97      	ldr	r3, [pc, #604]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4b94      	ldr	r3, [pc, #592]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a93      	ldr	r2, [pc, #588]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	61d3      	str	r3, [r2, #28]
 80039a2:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b8e      	ldr	r3, [pc, #568]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d118      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b8b      	ldr	r3, [pc, #556]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a8a      	ldr	r2, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7ff fbf9 	bl	80031c0 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d2:	f7ff fbf5 	bl	80031c0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b64      	cmp	r3, #100	; 0x64
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0fd      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x312>
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a7a      	ldr	r2, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	e02d      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x334>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	e01c      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCC_OscConfig+0x356>
 8003a30:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a6c      	ldr	r2, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	f043 0304 	orr.w	r3, r3, #4
 8003a3a:	6213      	str	r3, [r2, #32]
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a69      	ldr	r2, [pc, #420]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	e00b      	b.n	8003a62 <HAL_RCC_OscConfig+0x36e>
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a66      	ldr	r2, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d015      	beq.n	8003a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7ff fba9 	bl	80031c0 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7ff fba5 	bl	80031c0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0ab      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ee      	beq.n	8003a72 <HAL_RCC_OscConfig+0x37e>
 8003a94:	e014      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a96:	f7ff fb93 	bl	80031c0 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7ff fb8f 	bl	80031c0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e095      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ee      	bne.n	8003a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4a47      	ldr	r2, [pc, #284]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8081 	beq.w	8003bde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d061      	beq.n	8003bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d146      	bne.n	8003b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7ff fb63 	bl	80031c0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7ff fb5f 	bl	80031c0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e067      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d108      	bne.n	8003b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	492d      	ldr	r1, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a19      	ldr	r1, [r3, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	4927      	ldr	r1, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7ff fb33 	bl	80031c0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7ff fb2f 	bl	80031c0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e037      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x46a>
 8003b7c:	e02f      	b.n	8003bde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCC_OscConfig+0x4fc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff fb1c 	bl	80031c0 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7ff fb18 	bl	80031c0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e020      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x498>
 8003baa:	e018      	b.n	8003bde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e013      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_OscConfig+0x4f4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420060 	.word	0x42420060

08003bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0d0      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	4965      	ldr	r1, [pc, #404]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d040      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d115      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e073      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e06b      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4936      	ldr	r1, [pc, #216]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7ff fa6c 	bl	80031c0 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7ff fa68 	bl	80031c0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e053      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d210      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 0207 	bic.w	r2, r3, #7
 8003d2a:	4922      	ldr	r1, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f9ca 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40022000 	.word	0x40022000
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	08008920 	.word	0x08008920
 8003dc0:	2000002c 	.word	0x2000002c
 8003dc4:	20000030 	.word	0x20000030

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b490      	push	{r4, r7}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dce:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd0:	1d3c      	adds	r4, r7, #4
 8003dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dd8:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003df2:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x46>
 8003e06:	e02d      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0a:	623b      	str	r3, [r7, #32]
      break;
 8003e0c:	e02d      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	0c9b      	lsrs	r3, r3, #18
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c5b      	lsrs	r3, r3, #17
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e46:	fb02 f203 	mul.w	r2, r2, r3
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e004      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	623b      	str	r3, [r7, #32]
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e66:	623b      	str	r3, [r7, #32]
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc90      	pop	{r4, r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	08004e9c 	.word	0x08004e9c
 8003e7c:	08004eac 	.word	0x08004eac
 8003e80:	40021000 	.word	0x40021000
 8003e84:	007a1200 	.word	0x007a1200
 8003e88:	003d0900 	.word	0x003d0900

08003e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <RCC_Delay+0x34>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <RCC_Delay+0x38>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea8:	bf00      	nop
  }
  while (Delay --);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	60fa      	str	r2, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f9      	bne.n	8003ea8 <RCC_Delay+0x1c>
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000002c 	.word	0x2000002c
 8003ec4:	10624dd3 	.word	0x10624dd3

08003ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e076      	b.n	8003fc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eea:	d009      	beq.n	8003f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
 8003ef2:	e005      	b.n	8003f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff f824 	bl	8002f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f84:	ea42 0103 	orr.w	r1, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	0c1a      	lsrs	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f002 0204 	and.w	r2, r2, #4
 8003fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_SPI_Transmit+0x22>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e126      	b.n	8004240 <HAL_SPI_Transmit+0x270>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ffa:	f7ff f8e1 	bl	80031c0 <HAL_GetTick>
 8003ffe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d002      	beq.n	8004016 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004014:	e10b      	b.n	800422e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Transmit+0x52>
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004026:	e102      	b.n	800422e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2203      	movs	r2, #3
 800402c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406e:	d10f      	bne.n	8004090 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d007      	beq.n	80040ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d14b      	bne.n	8004150 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_Transmit+0xf6>
 80040c0:	8afb      	ldrh	r3, [r7, #22]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d13e      	bne.n	8004144 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	881a      	ldrh	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040ea:	e02b      	b.n	8004144 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d112      	bne.n	8004120 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	86da      	strh	r2, [r3, #54]	; 0x36
 800411e:	e011      	b.n	8004144 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004120:	f7ff f84e 	bl	80031c0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d803      	bhi.n	8004138 <HAL_SPI_Transmit+0x168>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d102      	bne.n	800413e <HAL_SPI_Transmit+0x16e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004142:	e074      	b.n	800422e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ce      	bne.n	80040ec <HAL_SPI_Transmit+0x11c>
 800414e:	e04c      	b.n	80041ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_Transmit+0x18e>
 8004158:	8afb      	ldrh	r3, [r7, #22]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d140      	bne.n	80041e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	7812      	ldrb	r2, [r2, #0]
 800416a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004184:	e02c      	b.n	80041e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d113      	bne.n	80041bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80041ba:	e011      	b.n	80041e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041bc:	f7ff f800 	bl	80031c0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d803      	bhi.n	80041d4 <HAL_SPI_Transmit+0x204>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Transmit+0x20a>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041de:	e026      	b.n	800422e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1cd      	bne.n	8004186 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8b2 	bl	8004358 <SPI_EndRxTxTransaction>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e000      	b.n	800422e <HAL_SPI_Transmit+0x25e>
  }

error:
 800422c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800423e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004258:	f7fe ffb2 	bl	80031c0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4413      	add	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004268:	f7fe ffaa 	bl	80031c0 <HAL_GetTick>
 800426c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	015b      	lsls	r3, r3, #5
 8004274:	0d1b      	lsrs	r3, r3, #20
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427e:	e054      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d050      	beq.n	800432a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004288:	f7fe ff9a 	bl	80031c0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d902      	bls.n	800429e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d13d      	bne.n	800431a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d111      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c0:	d004      	beq.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	d107      	bne.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	d10f      	bne.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e017      	b.n	800434a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3b01      	subs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d19b      	bne.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2000002c 	.word	0x2000002c

08004358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff6a 	bl	8004248 <SPI_WaitFlagStateUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e000      	b.n	800438c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <__errno>:
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <__errno+0x8>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000038 	.word	0x20000038

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	2500      	movs	r5, #0
 80043a4:	4e0c      	ldr	r6, [pc, #48]	; (80043d8 <__libc_init_array+0x38>)
 80043a6:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a8:	1ba4      	subs	r4, r4, r6
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	42a5      	cmp	r5, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	f000 fc70 	bl	8004c94 <_init>
 80043b4:	2500      	movs	r5, #0
 80043b6:	4e0a      	ldr	r6, [pc, #40]	; (80043e0 <__libc_init_array+0x40>)
 80043b8:	4c0a      	ldr	r4, [pc, #40]	; (80043e4 <__libc_init_array+0x44>)
 80043ba:	1ba4      	subs	r4, r4, r6
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	42a5      	cmp	r5, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043c8:	4798      	blx	r3
 80043ca:	3501      	adds	r5, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d2:	4798      	blx	r3
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08008964 	.word	0x08008964
 80043dc:	08008964 	.word	0x08008964
 80043e0:	08008964 	.word	0x08008964
 80043e4:	08008968 	.word	0x08008968

080043e8 <memset>:
 80043e8:	4603      	mov	r3, r0
 80043ea:	4402      	add	r2, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <rand>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <rand+0x50>)
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004400:	b97b      	cbnz	r3, 8004422 <rand+0x2a>
 8004402:	2018      	movs	r0, #24
 8004404:	f000 f84c 	bl	80044a0 <malloc>
 8004408:	4a10      	ldr	r2, [pc, #64]	; (800444c <rand+0x54>)
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <rand+0x58>)
 800440c:	63a0      	str	r0, [r4, #56]	; 0x38
 800440e:	e9c0 2300 	strd	r2, r3, [r0]
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <rand+0x5c>)
 8004414:	2201      	movs	r2, #1
 8004416:	6083      	str	r3, [r0, #8]
 8004418:	230b      	movs	r3, #11
 800441a:	8183      	strh	r3, [r0, #12]
 800441c:	2300      	movs	r3, #0
 800441e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004422:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004424:	480c      	ldr	r0, [pc, #48]	; (8004458 <rand+0x60>)
 8004426:	690a      	ldr	r2, [r1, #16]
 8004428:	694b      	ldr	r3, [r1, #20]
 800442a:	4350      	muls	r0, r2
 800442c:	4c0b      	ldr	r4, [pc, #44]	; (800445c <rand+0x64>)
 800442e:	fb04 0003 	mla	r0, r4, r3, r0
 8004432:	fba2 2304 	umull	r2, r3, r2, r4
 8004436:	4403      	add	r3, r0
 8004438:	1c54      	adds	r4, r2, #1
 800443a:	f143 0500 	adc.w	r5, r3, #0
 800443e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004442:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000038 	.word	0x20000038
 800444c:	abcd330e 	.word	0xabcd330e
 8004450:	e66d1234 	.word	0xe66d1234
 8004454:	0005deec 	.word	0x0005deec
 8004458:	5851f42d 	.word	0x5851f42d
 800445c:	4c957f2d 	.word	0x4c957f2d

08004460 <siprintf>:
 8004460:	b40e      	push	{r1, r2, r3}
 8004462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004466:	b500      	push	{lr}
 8004468:	b09c      	sub	sp, #112	; 0x70
 800446a:	ab1d      	add	r3, sp, #116	; 0x74
 800446c:	9002      	str	r0, [sp, #8]
 800446e:	9006      	str	r0, [sp, #24]
 8004470:	9107      	str	r1, [sp, #28]
 8004472:	9104      	str	r1, [sp, #16]
 8004474:	4808      	ldr	r0, [pc, #32]	; (8004498 <siprintf+0x38>)
 8004476:	4909      	ldr	r1, [pc, #36]	; (800449c <siprintf+0x3c>)
 8004478:	f853 2b04 	ldr.w	r2, [r3], #4
 800447c:	9105      	str	r1, [sp, #20]
 800447e:	6800      	ldr	r0, [r0, #0]
 8004480:	a902      	add	r1, sp, #8
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	f000 f914 	bl	80046b0 <_svfiprintf_r>
 8004488:	2200      	movs	r2, #0
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	b01c      	add	sp, #112	; 0x70
 8004490:	f85d eb04 	ldr.w	lr, [sp], #4
 8004494:	b003      	add	sp, #12
 8004496:	4770      	bx	lr
 8004498:	20000038 	.word	0x20000038
 800449c:	ffff0208 	.word	0xffff0208

080044a0 <malloc>:
 80044a0:	4b02      	ldr	r3, [pc, #8]	; (80044ac <malloc+0xc>)
 80044a2:	4601      	mov	r1, r0
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f000 b84f 	b.w	8004548 <_malloc_r>
 80044aa:	bf00      	nop
 80044ac:	20000038 	.word	0x20000038

080044b0 <_free_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d043      	beq.n	8004540 <_free_r+0x90>
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f0c      	subs	r4, r1, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	18e4      	addlt	r4, r4, r3
 80044c4:	f000 fbb6 	bl	8004c34 <__malloc_lock>
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <_free_r+0x94>)
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	4610      	mov	r0, r2
 80044ce:	b933      	cbnz	r3, 80044de <_free_r+0x2e>
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	6014      	str	r4, [r2, #0]
 80044d4:	4628      	mov	r0, r5
 80044d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044da:	f000 bbac 	b.w	8004c36 <__malloc_unlock>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	d90b      	bls.n	80044fa <_free_r+0x4a>
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	1862      	adds	r2, r4, r1
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bf01      	itttt	eq
 80044ea:	681a      	ldreq	r2, [r3, #0]
 80044ec:	685b      	ldreq	r3, [r3, #4]
 80044ee:	1852      	addeq	r2, r2, r1
 80044f0:	6022      	streq	r2, [r4, #0]
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6004      	str	r4, [r0, #0]
 80044f6:	e7ed      	b.n	80044d4 <_free_r+0x24>
 80044f8:	4613      	mov	r3, r2
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	b10a      	cbz	r2, 8004502 <_free_r+0x52>
 80044fe:	42a2      	cmp	r2, r4
 8004500:	d9fa      	bls.n	80044f8 <_free_r+0x48>
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	1858      	adds	r0, r3, r1
 8004506:	42a0      	cmp	r0, r4
 8004508:	d10b      	bne.n	8004522 <_free_r+0x72>
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	4401      	add	r1, r0
 800450e:	1858      	adds	r0, r3, r1
 8004510:	4282      	cmp	r2, r0
 8004512:	6019      	str	r1, [r3, #0]
 8004514:	d1de      	bne.n	80044d4 <_free_r+0x24>
 8004516:	6810      	ldr	r0, [r2, #0]
 8004518:	6852      	ldr	r2, [r2, #4]
 800451a:	4401      	add	r1, r0
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	e7d8      	b.n	80044d4 <_free_r+0x24>
 8004522:	d902      	bls.n	800452a <_free_r+0x7a>
 8004524:	230c      	movs	r3, #12
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	e7d4      	b.n	80044d4 <_free_r+0x24>
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1821      	adds	r1, r4, r0
 800452e:	428a      	cmp	r2, r1
 8004530:	bf01      	itttt	eq
 8004532:	6811      	ldreq	r1, [r2, #0]
 8004534:	6852      	ldreq	r2, [r2, #4]
 8004536:	1809      	addeq	r1, r1, r0
 8004538:	6021      	streq	r1, [r4, #0]
 800453a:	6062      	str	r2, [r4, #4]
 800453c:	605c      	str	r4, [r3, #4]
 800453e:	e7c9      	b.n	80044d4 <_free_r+0x24>
 8004540:	bd38      	pop	{r3, r4, r5, pc}
 8004542:	bf00      	nop
 8004544:	200000c8 	.word	0x200000c8

08004548 <_malloc_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	1ccd      	adds	r5, r1, #3
 800454c:	f025 0503 	bic.w	r5, r5, #3
 8004550:	3508      	adds	r5, #8
 8004552:	2d0c      	cmp	r5, #12
 8004554:	bf38      	it	cc
 8004556:	250c      	movcc	r5, #12
 8004558:	2d00      	cmp	r5, #0
 800455a:	4606      	mov	r6, r0
 800455c:	db01      	blt.n	8004562 <_malloc_r+0x1a>
 800455e:	42a9      	cmp	r1, r5
 8004560:	d903      	bls.n	800456a <_malloc_r+0x22>
 8004562:	230c      	movs	r3, #12
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	2000      	movs	r0, #0
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	f000 fb63 	bl	8004c34 <__malloc_lock>
 800456e:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <_malloc_r+0xac>)
 8004570:	6814      	ldr	r4, [r2, #0]
 8004572:	4621      	mov	r1, r4
 8004574:	b991      	cbnz	r1, 800459c <_malloc_r+0x54>
 8004576:	4c20      	ldr	r4, [pc, #128]	; (80045f8 <_malloc_r+0xb0>)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	b91b      	cbnz	r3, 8004584 <_malloc_r+0x3c>
 800457c:	4630      	mov	r0, r6
 800457e:	f000 fb17 	bl	8004bb0 <_sbrk_r>
 8004582:	6020      	str	r0, [r4, #0]
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f000 fb12 	bl	8004bb0 <_sbrk_r>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d124      	bne.n	80045da <_malloc_r+0x92>
 8004590:	230c      	movs	r3, #12
 8004592:	4630      	mov	r0, r6
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	f000 fb4e 	bl	8004c36 <__malloc_unlock>
 800459a:	e7e4      	b.n	8004566 <_malloc_r+0x1e>
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	1b5b      	subs	r3, r3, r5
 80045a0:	d418      	bmi.n	80045d4 <_malloc_r+0x8c>
 80045a2:	2b0b      	cmp	r3, #11
 80045a4:	d90f      	bls.n	80045c6 <_malloc_r+0x7e>
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	18cc      	adds	r4, r1, r3
 80045aa:	50cd      	str	r5, [r1, r3]
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 fb42 	bl	8004c36 <__malloc_unlock>
 80045b2:	f104 000b 	add.w	r0, r4, #11
 80045b6:	1d23      	adds	r3, r4, #4
 80045b8:	f020 0007 	bic.w	r0, r0, #7
 80045bc:	1ac3      	subs	r3, r0, r3
 80045be:	d0d3      	beq.n	8004568 <_malloc_r+0x20>
 80045c0:	425a      	negs	r2, r3
 80045c2:	50e2      	str	r2, [r4, r3]
 80045c4:	e7d0      	b.n	8004568 <_malloc_r+0x20>
 80045c6:	684b      	ldr	r3, [r1, #4]
 80045c8:	428c      	cmp	r4, r1
 80045ca:	bf16      	itet	ne
 80045cc:	6063      	strne	r3, [r4, #4]
 80045ce:	6013      	streq	r3, [r2, #0]
 80045d0:	460c      	movne	r4, r1
 80045d2:	e7eb      	b.n	80045ac <_malloc_r+0x64>
 80045d4:	460c      	mov	r4, r1
 80045d6:	6849      	ldr	r1, [r1, #4]
 80045d8:	e7cc      	b.n	8004574 <_malloc_r+0x2c>
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d005      	beq.n	80045f0 <_malloc_r+0xa8>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 fae2 	bl	8004bb0 <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0cf      	beq.n	8004590 <_malloc_r+0x48>
 80045f0:	6025      	str	r5, [r4, #0]
 80045f2:	e7db      	b.n	80045ac <_malloc_r+0x64>
 80045f4:	200000c8 	.word	0x200000c8
 80045f8:	200000cc 	.word	0x200000cc

080045fc <__ssputs_r>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	688e      	ldr	r6, [r1, #8]
 8004602:	4682      	mov	sl, r0
 8004604:	429e      	cmp	r6, r3
 8004606:	460c      	mov	r4, r1
 8004608:	4690      	mov	r8, r2
 800460a:	4699      	mov	r9, r3
 800460c:	d837      	bhi.n	800467e <__ssputs_r+0x82>
 800460e:	898a      	ldrh	r2, [r1, #12]
 8004610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004614:	d031      	beq.n	800467a <__ssputs_r+0x7e>
 8004616:	2302      	movs	r3, #2
 8004618:	6825      	ldr	r5, [r4, #0]
 800461a:	6909      	ldr	r1, [r1, #16]
 800461c:	1a6f      	subs	r7, r5, r1
 800461e:	6965      	ldr	r5, [r4, #20]
 8004620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004624:	fb95 f5f3 	sdiv	r5, r5, r3
 8004628:	f109 0301 	add.w	r3, r9, #1
 800462c:	443b      	add	r3, r7
 800462e:	429d      	cmp	r5, r3
 8004630:	bf38      	it	cc
 8004632:	461d      	movcc	r5, r3
 8004634:	0553      	lsls	r3, r2, #21
 8004636:	d530      	bpl.n	800469a <__ssputs_r+0x9e>
 8004638:	4629      	mov	r1, r5
 800463a:	f7ff ff85 	bl	8004548 <_malloc_r>
 800463e:	4606      	mov	r6, r0
 8004640:	b950      	cbnz	r0, 8004658 <__ssputs_r+0x5c>
 8004642:	230c      	movs	r3, #12
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f8ca 3000 	str.w	r3, [sl]
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	463a      	mov	r2, r7
 800465a:	6921      	ldr	r1, [r4, #16]
 800465c:	f000 fac6 	bl	8004bec <memcpy>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	6126      	str	r6, [r4, #16]
 800466e:	443e      	add	r6, r7
 8004670:	6026      	str	r6, [r4, #0]
 8004672:	464e      	mov	r6, r9
 8004674:	6165      	str	r5, [r4, #20]
 8004676:	1bed      	subs	r5, r5, r7
 8004678:	60a5      	str	r5, [r4, #8]
 800467a:	454e      	cmp	r6, r9
 800467c:	d900      	bls.n	8004680 <__ssputs_r+0x84>
 800467e:	464e      	mov	r6, r9
 8004680:	4632      	mov	r2, r6
 8004682:	4641      	mov	r1, r8
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	f000 fabc 	bl	8004c02 <memmove>
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	2000      	movs	r0, #0
 800468e:	1b9b      	subs	r3, r3, r6
 8004690:	60a3      	str	r3, [r4, #8]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	441e      	add	r6, r3
 8004696:	6026      	str	r6, [r4, #0]
 8004698:	e7dc      	b.n	8004654 <__ssputs_r+0x58>
 800469a:	462a      	mov	r2, r5
 800469c:	f000 facc 	bl	8004c38 <_realloc_r>
 80046a0:	4606      	mov	r6, r0
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d1e2      	bne.n	800466c <__ssputs_r+0x70>
 80046a6:	6921      	ldr	r1, [r4, #16]
 80046a8:	4650      	mov	r0, sl
 80046aa:	f7ff ff01 	bl	80044b0 <_free_r>
 80046ae:	e7c8      	b.n	8004642 <__ssputs_r+0x46>

080046b0 <_svfiprintf_r>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	461d      	mov	r5, r3
 80046b6:	898b      	ldrh	r3, [r1, #12]
 80046b8:	b09d      	sub	sp, #116	; 0x74
 80046ba:	061f      	lsls	r7, r3, #24
 80046bc:	4680      	mov	r8, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4616      	mov	r6, r2
 80046c2:	d50f      	bpl.n	80046e4 <_svfiprintf_r+0x34>
 80046c4:	690b      	ldr	r3, [r1, #16]
 80046c6:	b96b      	cbnz	r3, 80046e4 <_svfiprintf_r+0x34>
 80046c8:	2140      	movs	r1, #64	; 0x40
 80046ca:	f7ff ff3d 	bl	8004548 <_malloc_r>
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	6120      	str	r0, [r4, #16]
 80046d2:	b928      	cbnz	r0, 80046e0 <_svfiprintf_r+0x30>
 80046d4:	230c      	movs	r3, #12
 80046d6:	f8c8 3000 	str.w	r3, [r8]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	e0c8      	b.n	8004872 <_svfiprintf_r+0x1c2>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	6163      	str	r3, [r4, #20]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9309      	str	r3, [sp, #36]	; 0x24
 80046e8:	2320      	movs	r3, #32
 80046ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ee:	2330      	movs	r3, #48	; 0x30
 80046f0:	f04f 0b01 	mov.w	fp, #1
 80046f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046f8:	9503      	str	r5, [sp, #12]
 80046fa:	4637      	mov	r7, r6
 80046fc:	463d      	mov	r5, r7
 80046fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004702:	b10b      	cbz	r3, 8004708 <_svfiprintf_r+0x58>
 8004704:	2b25      	cmp	r3, #37	; 0x25
 8004706:	d13e      	bne.n	8004786 <_svfiprintf_r+0xd6>
 8004708:	ebb7 0a06 	subs.w	sl, r7, r6
 800470c:	d00b      	beq.n	8004726 <_svfiprintf_r+0x76>
 800470e:	4653      	mov	r3, sl
 8004710:	4632      	mov	r2, r6
 8004712:	4621      	mov	r1, r4
 8004714:	4640      	mov	r0, r8
 8004716:	f7ff ff71 	bl	80045fc <__ssputs_r>
 800471a:	3001      	adds	r0, #1
 800471c:	f000 80a4 	beq.w	8004868 <_svfiprintf_r+0x1b8>
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	4453      	add	r3, sl
 8004724:	9309      	str	r3, [sp, #36]	; 0x24
 8004726:	783b      	ldrb	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 809d 	beq.w	8004868 <_svfiprintf_r+0x1b8>
 800472e:	2300      	movs	r3, #0
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004738:	9304      	str	r3, [sp, #16]
 800473a:	9307      	str	r3, [sp, #28]
 800473c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004740:	931a      	str	r3, [sp, #104]	; 0x68
 8004742:	462f      	mov	r7, r5
 8004744:	2205      	movs	r2, #5
 8004746:	f817 1b01 	ldrb.w	r1, [r7], #1
 800474a:	4850      	ldr	r0, [pc, #320]	; (800488c <_svfiprintf_r+0x1dc>)
 800474c:	f000 fa40 	bl	8004bd0 <memchr>
 8004750:	9b04      	ldr	r3, [sp, #16]
 8004752:	b9d0      	cbnz	r0, 800478a <_svfiprintf_r+0xda>
 8004754:	06d9      	lsls	r1, r3, #27
 8004756:	bf44      	itt	mi
 8004758:	2220      	movmi	r2, #32
 800475a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800475e:	071a      	lsls	r2, r3, #28
 8004760:	bf44      	itt	mi
 8004762:	222b      	movmi	r2, #43	; 0x2b
 8004764:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004768:	782a      	ldrb	r2, [r5, #0]
 800476a:	2a2a      	cmp	r2, #42	; 0x2a
 800476c:	d015      	beq.n	800479a <_svfiprintf_r+0xea>
 800476e:	462f      	mov	r7, r5
 8004770:	2000      	movs	r0, #0
 8004772:	250a      	movs	r5, #10
 8004774:	9a07      	ldr	r2, [sp, #28]
 8004776:	4639      	mov	r1, r7
 8004778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800477c:	3b30      	subs	r3, #48	; 0x30
 800477e:	2b09      	cmp	r3, #9
 8004780:	d94d      	bls.n	800481e <_svfiprintf_r+0x16e>
 8004782:	b1b8      	cbz	r0, 80047b4 <_svfiprintf_r+0x104>
 8004784:	e00f      	b.n	80047a6 <_svfiprintf_r+0xf6>
 8004786:	462f      	mov	r7, r5
 8004788:	e7b8      	b.n	80046fc <_svfiprintf_r+0x4c>
 800478a:	4a40      	ldr	r2, [pc, #256]	; (800488c <_svfiprintf_r+0x1dc>)
 800478c:	463d      	mov	r5, r7
 800478e:	1a80      	subs	r0, r0, r2
 8004790:	fa0b f000 	lsl.w	r0, fp, r0
 8004794:	4318      	orrs	r0, r3
 8004796:	9004      	str	r0, [sp, #16]
 8004798:	e7d3      	b.n	8004742 <_svfiprintf_r+0x92>
 800479a:	9a03      	ldr	r2, [sp, #12]
 800479c:	1d11      	adds	r1, r2, #4
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	9103      	str	r1, [sp, #12]
 80047a2:	2a00      	cmp	r2, #0
 80047a4:	db01      	blt.n	80047aa <_svfiprintf_r+0xfa>
 80047a6:	9207      	str	r2, [sp, #28]
 80047a8:	e004      	b.n	80047b4 <_svfiprintf_r+0x104>
 80047aa:	4252      	negs	r2, r2
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	9207      	str	r2, [sp, #28]
 80047b2:	9304      	str	r3, [sp, #16]
 80047b4:	783b      	ldrb	r3, [r7, #0]
 80047b6:	2b2e      	cmp	r3, #46	; 0x2e
 80047b8:	d10c      	bne.n	80047d4 <_svfiprintf_r+0x124>
 80047ba:	787b      	ldrb	r3, [r7, #1]
 80047bc:	2b2a      	cmp	r3, #42	; 0x2a
 80047be:	d133      	bne.n	8004828 <_svfiprintf_r+0x178>
 80047c0:	9b03      	ldr	r3, [sp, #12]
 80047c2:	3702      	adds	r7, #2
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	9203      	str	r2, [sp, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bfb8      	it	lt
 80047ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	4d2e      	ldr	r5, [pc, #184]	; (8004890 <_svfiprintf_r+0x1e0>)
 80047d6:	2203      	movs	r2, #3
 80047d8:	7839      	ldrb	r1, [r7, #0]
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 f9f8 	bl	8004bd0 <memchr>
 80047e0:	b138      	cbz	r0, 80047f2 <_svfiprintf_r+0x142>
 80047e2:	2340      	movs	r3, #64	; 0x40
 80047e4:	1b40      	subs	r0, r0, r5
 80047e6:	fa03 f000 	lsl.w	r0, r3, r0
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	3701      	adds	r7, #1
 80047ee:	4303      	orrs	r3, r0
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	7839      	ldrb	r1, [r7, #0]
 80047f4:	2206      	movs	r2, #6
 80047f6:	4827      	ldr	r0, [pc, #156]	; (8004894 <_svfiprintf_r+0x1e4>)
 80047f8:	1c7e      	adds	r6, r7, #1
 80047fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047fe:	f000 f9e7 	bl	8004bd0 <memchr>
 8004802:	2800      	cmp	r0, #0
 8004804:	d038      	beq.n	8004878 <_svfiprintf_r+0x1c8>
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <_svfiprintf_r+0x1e8>)
 8004808:	bb13      	cbnz	r3, 8004850 <_svfiprintf_r+0x1a0>
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	3307      	adds	r3, #7
 800480e:	f023 0307 	bic.w	r3, r3, #7
 8004812:	3308      	adds	r3, #8
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004818:	444b      	add	r3, r9
 800481a:	9309      	str	r3, [sp, #36]	; 0x24
 800481c:	e76d      	b.n	80046fa <_svfiprintf_r+0x4a>
 800481e:	fb05 3202 	mla	r2, r5, r2, r3
 8004822:	2001      	movs	r0, #1
 8004824:	460f      	mov	r7, r1
 8004826:	e7a6      	b.n	8004776 <_svfiprintf_r+0xc6>
 8004828:	2300      	movs	r3, #0
 800482a:	250a      	movs	r5, #10
 800482c:	4619      	mov	r1, r3
 800482e:	3701      	adds	r7, #1
 8004830:	9305      	str	r3, [sp, #20]
 8004832:	4638      	mov	r0, r7
 8004834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004838:	3a30      	subs	r2, #48	; 0x30
 800483a:	2a09      	cmp	r2, #9
 800483c:	d903      	bls.n	8004846 <_svfiprintf_r+0x196>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0c8      	beq.n	80047d4 <_svfiprintf_r+0x124>
 8004842:	9105      	str	r1, [sp, #20]
 8004844:	e7c6      	b.n	80047d4 <_svfiprintf_r+0x124>
 8004846:	fb05 2101 	mla	r1, r5, r1, r2
 800484a:	2301      	movs	r3, #1
 800484c:	4607      	mov	r7, r0
 800484e:	e7f0      	b.n	8004832 <_svfiprintf_r+0x182>
 8004850:	ab03      	add	r3, sp, #12
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4622      	mov	r2, r4
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <_svfiprintf_r+0x1ec>)
 8004858:	a904      	add	r1, sp, #16
 800485a:	4640      	mov	r0, r8
 800485c:	f3af 8000 	nop.w
 8004860:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004864:	4681      	mov	r9, r0
 8004866:	d1d6      	bne.n	8004816 <_svfiprintf_r+0x166>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	065b      	lsls	r3, r3, #25
 800486c:	f53f af35 	bmi.w	80046da <_svfiprintf_r+0x2a>
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	b01d      	add	sp, #116	; 0x74
 8004874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004878:	ab03      	add	r3, sp, #12
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4622      	mov	r2, r4
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <_svfiprintf_r+0x1ec>)
 8004880:	a904      	add	r1, sp, #16
 8004882:	4640      	mov	r0, r8
 8004884:	f000 f882 	bl	800498c <_printf_i>
 8004888:	e7ea      	b.n	8004860 <_svfiprintf_r+0x1b0>
 800488a:	bf00      	nop
 800488c:	08008930 	.word	0x08008930
 8004890:	08008936 	.word	0x08008936
 8004894:	0800893a 	.word	0x0800893a
 8004898:	00000000 	.word	0x00000000
 800489c:	080045fd 	.word	0x080045fd

080048a0 <_printf_common>:
 80048a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	4691      	mov	r9, r2
 80048a6:	461f      	mov	r7, r3
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	4606      	mov	r6, r0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bfb8      	it	lt
 80048b2:	4613      	movlt	r3, r2
 80048b4:	f8c9 3000 	str.w	r3, [r9]
 80048b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048bc:	460c      	mov	r4, r1
 80048be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c2:	b112      	cbz	r2, 80048ca <_printf_common+0x2a>
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c9 3000 	str.w	r3, [r9]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	0699      	lsls	r1, r3, #26
 80048ce:	bf42      	ittt	mi
 80048d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d4:	3302      	addmi	r3, #2
 80048d6:	f8c9 3000 	strmi.w	r3, [r9]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d107      	bne.n	80048f2 <_printf_common+0x52>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	f8d9 2000 	ldr.w	r2, [r9]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	42ab      	cmp	r3, r5
 80048f0:	dc29      	bgt.n	8004946 <_printf_common+0xa6>
 80048f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	3300      	adds	r3, #0
 80048fa:	bf18      	it	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	0692      	lsls	r2, r2, #26
 8004900:	d42e      	bmi.n	8004960 <_printf_common+0xc0>
 8004902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004906:	4639      	mov	r1, r7
 8004908:	4630      	mov	r0, r6
 800490a:	47c0      	blx	r8
 800490c:	3001      	adds	r0, #1
 800490e:	d021      	beq.n	8004954 <_printf_common+0xb4>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	68e5      	ldr	r5, [r4, #12]
 8004914:	f003 0306 	and.w	r3, r3, #6
 8004918:	2b04      	cmp	r3, #4
 800491a:	bf18      	it	ne
 800491c:	2500      	movne	r5, #0
 800491e:	f8d9 2000 	ldr.w	r2, [r9]
 8004922:	f04f 0900 	mov.w	r9, #0
 8004926:	bf08      	it	eq
 8004928:	1aad      	subeq	r5, r5, r2
 800492a:	68a3      	ldr	r3, [r4, #8]
 800492c:	6922      	ldr	r2, [r4, #16]
 800492e:	bf08      	it	eq
 8004930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004934:	4293      	cmp	r3, r2
 8004936:	bfc4      	itt	gt
 8004938:	1a9b      	subgt	r3, r3, r2
 800493a:	18ed      	addgt	r5, r5, r3
 800493c:	341a      	adds	r4, #26
 800493e:	454d      	cmp	r5, r9
 8004940:	d11a      	bne.n	8004978 <_printf_common+0xd8>
 8004942:	2000      	movs	r0, #0
 8004944:	e008      	b.n	8004958 <_printf_common+0xb8>
 8004946:	2301      	movs	r3, #1
 8004948:	4652      	mov	r2, sl
 800494a:	4639      	mov	r1, r7
 800494c:	4630      	mov	r0, r6
 800494e:	47c0      	blx	r8
 8004950:	3001      	adds	r0, #1
 8004952:	d103      	bne.n	800495c <_printf_common+0xbc>
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	3501      	adds	r5, #1
 800495e:	e7c2      	b.n	80048e6 <_printf_common+0x46>
 8004960:	2030      	movs	r0, #48	; 0x30
 8004962:	18e1      	adds	r1, r4, r3
 8004964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800496e:	4422      	add	r2, r4
 8004970:	3302      	adds	r3, #2
 8004972:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004976:	e7c4      	b.n	8004902 <_printf_common+0x62>
 8004978:	2301      	movs	r3, #1
 800497a:	4622      	mov	r2, r4
 800497c:	4639      	mov	r1, r7
 800497e:	4630      	mov	r0, r6
 8004980:	47c0      	blx	r8
 8004982:	3001      	adds	r0, #1
 8004984:	d0e6      	beq.n	8004954 <_printf_common+0xb4>
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	e7d8      	b.n	800493e <_printf_common+0x9e>

0800498c <_printf_i>:
 800498c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004990:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004994:	460c      	mov	r4, r1
 8004996:	7e09      	ldrb	r1, [r1, #24]
 8004998:	b085      	sub	sp, #20
 800499a:	296e      	cmp	r1, #110	; 0x6e
 800499c:	4617      	mov	r7, r2
 800499e:	4606      	mov	r6, r0
 80049a0:	4698      	mov	r8, r3
 80049a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049a4:	f000 80b3 	beq.w	8004b0e <_printf_i+0x182>
 80049a8:	d822      	bhi.n	80049f0 <_printf_i+0x64>
 80049aa:	2963      	cmp	r1, #99	; 0x63
 80049ac:	d036      	beq.n	8004a1c <_printf_i+0x90>
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x3a>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	f000 80b9 	beq.w	8004b28 <_printf_i+0x19c>
 80049b6:	2958      	cmp	r1, #88	; 0x58
 80049b8:	f000 8083 	beq.w	8004ac2 <_printf_i+0x136>
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049c4:	e032      	b.n	8004a2c <_printf_i+0xa0>
 80049c6:	2964      	cmp	r1, #100	; 0x64
 80049c8:	d001      	beq.n	80049ce <_printf_i+0x42>
 80049ca:	2969      	cmp	r1, #105	; 0x69
 80049cc:	d1f6      	bne.n	80049bc <_printf_i+0x30>
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	0605      	lsls	r5, r0, #24
 80049d4:	f103 0104 	add.w	r1, r3, #4
 80049d8:	d52a      	bpl.n	8004a30 <_printf_i+0xa4>
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da03      	bge.n	80049ea <_printf_i+0x5e>
 80049e2:	222d      	movs	r2, #45	; 0x2d
 80049e4:	425b      	negs	r3, r3
 80049e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049ea:	486f      	ldr	r0, [pc, #444]	; (8004ba8 <_printf_i+0x21c>)
 80049ec:	220a      	movs	r2, #10
 80049ee:	e039      	b.n	8004a64 <_printf_i+0xd8>
 80049f0:	2973      	cmp	r1, #115	; 0x73
 80049f2:	f000 809d 	beq.w	8004b30 <_printf_i+0x1a4>
 80049f6:	d808      	bhi.n	8004a0a <_printf_i+0x7e>
 80049f8:	296f      	cmp	r1, #111	; 0x6f
 80049fa:	d020      	beq.n	8004a3e <_printf_i+0xb2>
 80049fc:	2970      	cmp	r1, #112	; 0x70
 80049fe:	d1dd      	bne.n	80049bc <_printf_i+0x30>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f043 0320 	orr.w	r3, r3, #32
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	e003      	b.n	8004a12 <_printf_i+0x86>
 8004a0a:	2975      	cmp	r1, #117	; 0x75
 8004a0c:	d017      	beq.n	8004a3e <_printf_i+0xb2>
 8004a0e:	2978      	cmp	r1, #120	; 0x78
 8004a10:	d1d4      	bne.n	80049bc <_printf_i+0x30>
 8004a12:	2378      	movs	r3, #120	; 0x78
 8004a14:	4865      	ldr	r0, [pc, #404]	; (8004bac <_printf_i+0x220>)
 8004a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a1a:	e055      	b.n	8004ac8 <_printf_i+0x13c>
 8004a1c:	6813      	ldr	r3, [r2, #0]
 8004a1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a22:	1d19      	adds	r1, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6011      	str	r1, [r2, #0]
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e08c      	b.n	8004b4a <_printf_i+0x1be>
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a36:	6011      	str	r1, [r2, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	b21b      	sxthne	r3, r3
 8004a3c:	e7cf      	b.n	80049de <_printf_i+0x52>
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	1d18      	adds	r0, r3, #4
 8004a44:	6010      	str	r0, [r2, #0]
 8004a46:	0628      	lsls	r0, r5, #24
 8004a48:	d501      	bpl.n	8004a4e <_printf_i+0xc2>
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	e002      	b.n	8004a54 <_printf_i+0xc8>
 8004a4e:	0668      	lsls	r0, r5, #25
 8004a50:	d5fb      	bpl.n	8004a4a <_printf_i+0xbe>
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	296f      	cmp	r1, #111	; 0x6f
 8004a56:	bf14      	ite	ne
 8004a58:	220a      	movne	r2, #10
 8004a5a:	2208      	moveq	r2, #8
 8004a5c:	4852      	ldr	r0, [pc, #328]	; (8004ba8 <_printf_i+0x21c>)
 8004a5e:	2100      	movs	r1, #0
 8004a60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a64:	6865      	ldr	r5, [r4, #4]
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	60a5      	str	r5, [r4, #8]
 8004a6a:	f2c0 8095 	blt.w	8004b98 <_printf_i+0x20c>
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	f021 0104 	bic.w	r1, r1, #4
 8004a74:	6021      	str	r1, [r4, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d13d      	bne.n	8004af6 <_printf_i+0x16a>
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	f040 808e 	bne.w	8004b9c <_printf_i+0x210>
 8004a80:	4665      	mov	r5, ip
 8004a82:	2a08      	cmp	r2, #8
 8004a84:	d10b      	bne.n	8004a9e <_printf_i+0x112>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	07db      	lsls	r3, r3, #31
 8004a8a:	d508      	bpl.n	8004a9e <_printf_i+0x112>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bfde      	ittt	le
 8004a94:	2330      	movle	r3, #48	; 0x30
 8004a96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a9e:	ebac 0305 	sub.w	r3, ip, r5
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	f8cd 8000 	str.w	r8, [sp]
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	aa03      	add	r2, sp, #12
 8004aac:	4621      	mov	r1, r4
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff fef6 	bl	80048a0 <_printf_common>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d14d      	bne.n	8004b54 <_printf_i+0x1c8>
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	b005      	add	sp, #20
 8004abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	4839      	ldr	r0, [pc, #228]	; (8004ba8 <_printf_i+0x21c>)
 8004ac4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	1d1d      	adds	r5, r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6015      	str	r5, [r2, #0]
 8004ad2:	060a      	lsls	r2, r1, #24
 8004ad4:	d50b      	bpl.n	8004aee <_printf_i+0x162>
 8004ad6:	07ca      	lsls	r2, r1, #31
 8004ad8:	bf44      	itt	mi
 8004ada:	f041 0120 	orrmi.w	r1, r1, #32
 8004ade:	6021      	strmi	r1, [r4, #0]
 8004ae0:	b91b      	cbnz	r3, 8004aea <_printf_i+0x15e>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	f022 0220 	bic.w	r2, r2, #32
 8004ae8:	6022      	str	r2, [r4, #0]
 8004aea:	2210      	movs	r2, #16
 8004aec:	e7b7      	b.n	8004a5e <_printf_i+0xd2>
 8004aee:	064d      	lsls	r5, r1, #25
 8004af0:	bf48      	it	mi
 8004af2:	b29b      	uxthmi	r3, r3
 8004af4:	e7ef      	b.n	8004ad6 <_printf_i+0x14a>
 8004af6:	4665      	mov	r5, ip
 8004af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004afc:	fb02 3311 	mls	r3, r2, r1, r3
 8004b00:	5cc3      	ldrb	r3, [r0, r3]
 8004b02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b06:	460b      	mov	r3, r1
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	d1f5      	bne.n	8004af8 <_printf_i+0x16c>
 8004b0c:	e7b9      	b.n	8004a82 <_printf_i+0xf6>
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	6825      	ldr	r5, [r4, #0]
 8004b12:	1d18      	adds	r0, r3, #4
 8004b14:	6961      	ldr	r1, [r4, #20]
 8004b16:	6010      	str	r0, [r2, #0]
 8004b18:	0628      	lsls	r0, r5, #24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	d501      	bpl.n	8004b22 <_printf_i+0x196>
 8004b1e:	6019      	str	r1, [r3, #0]
 8004b20:	e002      	b.n	8004b28 <_printf_i+0x19c>
 8004b22:	066a      	lsls	r2, r5, #25
 8004b24:	d5fb      	bpl.n	8004b1e <_printf_i+0x192>
 8004b26:	8019      	strh	r1, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4665      	mov	r5, ip
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	e7b9      	b.n	8004aa4 <_printf_i+0x118>
 8004b30:	6813      	ldr	r3, [r2, #0]
 8004b32:	1d19      	adds	r1, r3, #4
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	681d      	ldr	r5, [r3, #0]
 8004b38:	6862      	ldr	r2, [r4, #4]
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f847 	bl	8004bd0 <memchr>
 8004b42:	b108      	cbz	r0, 8004b48 <_printf_i+0x1bc>
 8004b44:	1b40      	subs	r0, r0, r5
 8004b46:	6060      	str	r0, [r4, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	e7a7      	b.n	8004aa4 <_printf_i+0x118>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4639      	mov	r1, r7
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	47c0      	blx	r8
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d0aa      	beq.n	8004ab8 <_printf_i+0x12c>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	079b      	lsls	r3, r3, #30
 8004b66:	d413      	bmi.n	8004b90 <_printf_i+0x204>
 8004b68:	68e0      	ldr	r0, [r4, #12]
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	bfb8      	it	lt
 8004b70:	4618      	movlt	r0, r3
 8004b72:	e7a3      	b.n	8004abc <_printf_i+0x130>
 8004b74:	2301      	movs	r3, #1
 8004b76:	464a      	mov	r2, r9
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	47c0      	blx	r8
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d09a      	beq.n	8004ab8 <_printf_i+0x12c>
 8004b82:	3501      	adds	r5, #1
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9a03      	ldr	r2, [sp, #12]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	dcf2      	bgt.n	8004b74 <_printf_i+0x1e8>
 8004b8e:	e7eb      	b.n	8004b68 <_printf_i+0x1dc>
 8004b90:	2500      	movs	r5, #0
 8004b92:	f104 0919 	add.w	r9, r4, #25
 8004b96:	e7f5      	b.n	8004b84 <_printf_i+0x1f8>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ac      	bne.n	8004af6 <_printf_i+0x16a>
 8004b9c:	7803      	ldrb	r3, [r0, #0]
 8004b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba6:	e76c      	b.n	8004a82 <_printf_i+0xf6>
 8004ba8:	08008941 	.word	0x08008941
 8004bac:	08008952 	.word	0x08008952

08004bb0 <_sbrk_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4c05      	ldr	r4, [pc, #20]	; (8004bcc <_sbrk_r+0x1c>)
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	f7fe fa46 	bl	800304c <_sbrk>
 8004bc0:	1c43      	adds	r3, r0, #1
 8004bc2:	d102      	bne.n	8004bca <_sbrk_r+0x1a>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	b103      	cbz	r3, 8004bca <_sbrk_r+0x1a>
 8004bc8:	602b      	str	r3, [r5, #0]
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	2000012c 	.word	0x2000012c

08004bd0 <memchr>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	b2c9      	uxtb	r1, r1
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4290      	cmp	r0, r2
 8004bd8:	4603      	mov	r3, r0
 8004bda:	d101      	bne.n	8004be0 <memchr+0x10>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e003      	b.n	8004be8 <memchr+0x18>
 8004be0:	781c      	ldrb	r4, [r3, #0]
 8004be2:	3001      	adds	r0, #1
 8004be4:	428c      	cmp	r4, r1
 8004be6:	d1f6      	bne.n	8004bd6 <memchr+0x6>
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd10      	pop	{r4, pc}

08004bec <memcpy>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	1e43      	subs	r3, r0, #1
 8004bf0:	440a      	add	r2, r1
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	d100      	bne.n	8004bf8 <memcpy+0xc>
 8004bf6:	bd10      	pop	{r4, pc}
 8004bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c00:	e7f7      	b.n	8004bf2 <memcpy+0x6>

08004c02 <memmove>:
 8004c02:	4288      	cmp	r0, r1
 8004c04:	b510      	push	{r4, lr}
 8004c06:	eb01 0302 	add.w	r3, r1, r2
 8004c0a:	d807      	bhi.n	8004c1c <memmove+0x1a>
 8004c0c:	1e42      	subs	r2, r0, #1
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	d00a      	beq.n	8004c28 <memmove+0x26>
 8004c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c1a:	e7f8      	b.n	8004c0e <memmove+0xc>
 8004c1c:	4283      	cmp	r3, r0
 8004c1e:	d9f5      	bls.n	8004c0c <memmove+0xa>
 8004c20:	1881      	adds	r1, r0, r2
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	42d3      	cmn	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memmove+0x28>
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c32:	e7f7      	b.n	8004c24 <memmove+0x22>

08004c34 <__malloc_lock>:
 8004c34:	4770      	bx	lr

08004c36 <__malloc_unlock>:
 8004c36:	4770      	bx	lr

08004c38 <_realloc_r>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	460e      	mov	r6, r1
 8004c40:	b921      	cbnz	r1, 8004c4c <_realloc_r+0x14>
 8004c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c46:	4611      	mov	r1, r2
 8004c48:	f7ff bc7e 	b.w	8004548 <_malloc_r>
 8004c4c:	b922      	cbnz	r2, 8004c58 <_realloc_r+0x20>
 8004c4e:	f7ff fc2f 	bl	80044b0 <_free_r>
 8004c52:	4625      	mov	r5, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c58:	f000 f814 	bl	8004c84 <_malloc_usable_size_r>
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d20f      	bcs.n	8004c80 <_realloc_r+0x48>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7ff fc70 	bl	8004548 <_malloc_r>
 8004c68:	4605      	mov	r5, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0f2      	beq.n	8004c54 <_realloc_r+0x1c>
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4622      	mov	r2, r4
 8004c72:	f7ff ffbb 	bl	8004bec <memcpy>
 8004c76:	4631      	mov	r1, r6
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff fc19 	bl	80044b0 <_free_r>
 8004c7e:	e7e9      	b.n	8004c54 <_realloc_r+0x1c>
 8004c80:	4635      	mov	r5, r6
 8004c82:	e7e7      	b.n	8004c54 <_realloc_r+0x1c>

08004c84 <_malloc_usable_size_r>:
 8004c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c88:	1f18      	subs	r0, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bfbc      	itt	lt
 8004c8e:	580b      	ldrlt	r3, [r1, r0]
 8004c90:	18c0      	addlt	r0, r0, r3
 8004c92:	4770      	bx	lr

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
