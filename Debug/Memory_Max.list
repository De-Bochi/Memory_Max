
Memory_Max.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c68  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c34  08008c34  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008c34  08008c34  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c34  08008c34  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000084  08008cc0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08008cc0  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081cb  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001745  00000000  00000000  00028278  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  000299c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016dd3  00000000  00000000  0002a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006ae9  00000000  00000000  00040efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00081896  00000000  00000000  000479e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c927a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000688  00000000  00000000  000c92f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001dc8  00000000  00000000  000c9980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb4 	.word	0x08002fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002fb4 	.word	0x08002fb4

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 ffe7 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 ffe2 	bl	800212e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f002 fc62 	bl	8002a3c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 ffd6 	bl	800212e <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200000b4 	.word	0x200000b4

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 ffc1 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 ffbc 	bl	800212e <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f002 fc34 	bl	8002a3c <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 ff9d 	bl	800212e <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	200000b4 	.word	0x200000b4

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 ff89 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 ff84 	bl	800212e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f002 fc04 	bl	8002a3c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 ff78 	bl	800212e <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200000b4 	.word	0x200000b4

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 ff2d 	bl	800212e <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 feeb 	bl	800212e <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f001 fc68 	bl	8001c40 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 feda 	bl	800212e <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f001 fc60 	bl	8001c40 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 fed2 	bl	800212e <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f001 fc58 	bl	8001c40 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f001 fbe0 	bl	8001c40 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08002fcc 	.word	0x08002fcc
 8000498:	08002fd4 	.word	0x08002fd4
 800049c:	08002fe4 	.word	0x08002fe4

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f001 fdf5 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f001 fdea 	bl	800212e <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	2bef      	cmp	r3, #239	; 0xef
 80006a2:	d833      	bhi.n	800070c <ST7789_DrawImage+0x8c>
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	2bef      	cmp	r3, #239	; 0xef
 80006a8:	d830      	bhi.n	800070c <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	4413      	add	r3, r2
 80006b0:	3b01      	subs	r3, #1
 80006b2:	2bef      	cmp	r3, #239	; 0xef
 80006b4:	dc2c      	bgt.n	8000710 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	883b      	ldrh	r3, [r7, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	3b01      	subs	r3, #1
 80006be:	2bef      	cmp	r3, #239	; 0xef
 80006c0:	dc28      	bgt.n	8000714 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 80006c2:	2200      	movs	r2, #0
 80006c4:	2110      	movs	r1, #16
 80006c6:	4815      	ldr	r0, [pc, #84]	; (800071c <ST7789_DrawImage+0x9c>)
 80006c8:	f001 fd31 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4413      	add	r3, r2
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b29c      	uxth	r4, r3
 80006d8:	88ba      	ldrh	r2, [r7, #4]
 80006da:	883b      	ldrh	r3, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	b29b      	uxth	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	88b9      	ldrh	r1, [r7, #4]
 80006e6:	88f8      	ldrh	r0, [r7, #6]
 80006e8:	4622      	mov	r2, r4
 80006ea:	f7ff fddf 	bl	80002ac <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	883a      	ldrh	r2, [r7, #0]
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	69b8      	ldr	r0, [r7, #24]
 80006fc:	f7ff fd4c 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <ST7789_DrawImage+0x9c>)
 8000706:	f001 fd12 	bl	800212e <HAL_GPIO_WritePin>
 800070a:	e004      	b.n	8000716 <ST7789_DrawImage+0x96>
		return;
 800070c:	bf00      	nop
 800070e:	e002      	b.n	8000716 <ST7789_DrawImage+0x96>
		return;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <ST7789_DrawImage+0x96>
		return;
 8000714:	bf00      	nop
}
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40010800 	.word	0x40010800

08000720 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000720:	b082      	sub	sp, #8
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b089      	sub	sp, #36	; 0x24
 8000726:	af00      	add	r7, sp, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	460b      	mov	r3, r1
 8000730:	80bb      	strh	r3, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	4838      	ldr	r0, [pc, #224]	; (800081c <ST7789_WriteChar+0xfc>)
 800073c:	f001 fcf7 	bl	800212e <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000744:	b29a      	uxth	r2, r3
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	4413      	add	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	3b01      	subs	r3, #1
 800074e:	b29c      	uxth	r4, r3
 8000750:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000754:	b29a      	uxth	r2, r3
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	b29b      	uxth	r3, r3
 800075c:	3b01      	subs	r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	88b9      	ldrh	r1, [r7, #4]
 8000762:	88f8      	ldrh	r0, [r7, #6]
 8000764:	4622      	mov	r2, r4
 8000766:	f7ff fda1 	bl	80002ac <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	e043      	b.n	80007f8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8000770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	3b20      	subs	r3, #32
 8000776:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800077a:	fb01 f303 	mul.w	r3, r1, r3
 800077e:	4619      	mov	r1, r3
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	440b      	add	r3, r1
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	e029      	b.n	80007e6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00e      	beq.n	80007c0 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80007a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	743b      	strb	r3, [r7, #16]
 80007ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2102      	movs	r1, #2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fced 	bl	8000198 <ST7789_WriteData>
 80007be:	e00f      	b.n	80007e0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80007c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	733b      	strb	r3, [r7, #12]
 80007cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcdc 	bl	8000198 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	3301      	adds	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007ea:	461a      	mov	r2, r3
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d3cf      	bcc.n	8000792 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3301      	adds	r3, #1
 80007f6:	61fb      	str	r3, [r7, #28]
 80007f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007fc:	461a      	mov	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	4293      	cmp	r3, r2
 8000802:	d3b5      	bcc.n	8000770 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8000804:	2201      	movs	r2, #1
 8000806:	2110      	movs	r1, #16
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <ST7789_WriteChar+0xfc>)
 800080a:	f001 fc90 	bl	800212e <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000818:	b002      	add	sp, #8
 800081a:	4770      	bx	lr
 800081c:	40010800 	.word	0x40010800

08000820 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000820:	b082      	sub	sp, #8
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af04      	add	r7, sp, #16
 8000828:	603a      	str	r2, [r7, #0]
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	4603      	mov	r3, r0
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	460b      	mov	r3, r1
 8000832:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4821      	ldr	r0, [pc, #132]	; (80008c0 <ST7789_WriteString+0xa0>)
 800083a:	f001 fc78 	bl	800212e <HAL_GPIO_WritePin>
	while (*str) {
 800083e:	e02d      	b.n	800089c <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	7d3a      	ldrb	r2, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	2bef      	cmp	r3, #239	; 0xef
 8000848:	dd13      	ble.n	8000872 <ST7789_WriteString+0x52>
			x = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	b29a      	uxth	r2, r3
 8000852:	88bb      	ldrh	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	7d7a      	ldrb	r2, [r7, #21]
 800085c:	4413      	add	r3, r2
 800085e:	2bef      	cmp	r3, #239	; 0xef
 8000860:	dc21      	bgt.n	80008a6 <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b20      	cmp	r3, #32
 8000868:	d103      	bne.n	8000872 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
				continue;
 8000870:	e014      	b.n	800089c <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	88b9      	ldrh	r1, [r7, #4]
 8000878:	88f8      	ldrh	r0, [r7, #6]
 800087a:	8c3b      	ldrh	r3, [r7, #32]
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	8bbb      	ldrh	r3, [r7, #28]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	f7ff ff4a 	bl	8000720 <ST7789_WriteChar>
		x += font.width;
 800088c:	7d3b      	ldrb	r3, [r7, #20]
 800088e:	b29a      	uxth	r2, r3
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	4413      	add	r3, r2
 8000894:	80fb      	strh	r3, [r7, #6]
		str++;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1cd      	bne.n	8000840 <ST7789_WriteString+0x20>
 80008a4:	e000      	b.n	80008a8 <ST7789_WriteString+0x88>
				break;
 80008a6:	bf00      	nop
	}
	ST7789_UnSelect();
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <ST7789_WriteString+0xa0>)
 80008ae:	f001 fc3e 	bl	800212e <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008bc:	b002      	add	sp, #8
 80008be:	4770      	bx	lr
 80008c0:	40010800 	.word	0x40010800

080008c4 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	80fb      	strh	r3, [r7, #6]
 80008d6:	4603      	mov	r3, r0
 80008d8:	80bb      	strh	r3, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	807b      	strh	r3, [r7, #2]
 80008de:	4613      	mov	r3, r2
 80008e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80008e2:	2200      	movs	r2, #0
 80008e4:	2110      	movs	r1, #16
 80008e6:	4822      	ldr	r0, [pc, #136]	; (8000970 <ST7789_DrawFilledRectangle+0xac>)
 80008e8:	f001 fc21 	bl	800212e <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	2bef      	cmp	r3, #239	; 0xef
 80008f0:	d83a      	bhi.n	8000968 <ST7789_DrawFilledRectangle+0xa4>
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	2bef      	cmp	r3, #239	; 0xef
 80008f6:	d837      	bhi.n	8000968 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80008f8:	88fa      	ldrh	r2, [r7, #6]
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	4413      	add	r3, r2
 80008fe:	2bef      	cmp	r3, #239	; 0xef
 8000900:	dd03      	ble.n	800090a <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000908:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 800090a:	88ba      	ldrh	r2, [r7, #4]
 800090c:	883b      	ldrh	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	2bef      	cmp	r3, #239	; 0xef
 8000912:	dd03      	ble.n	800091c <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800091a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e017      	b.n	8000952 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	b29a      	uxth	r2, r3
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	b299      	uxth	r1, r3
 800092c:	88fa      	ldrh	r2, [r7, #6]
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	4413      	add	r3, r2
 8000932:	b29c      	uxth	r4, r3
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	b29a      	uxth	r2, r3
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	88f8      	ldrh	r0, [r7, #6]
 8000940:	8c3b      	ldrh	r3, [r7, #32]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	4622      	mov	r2, r4
 8000948:	f7ff fe0e 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	3301      	adds	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	b29b      	uxth	r3, r3
 8000956:	883a      	ldrh	r2, [r7, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d2e2      	bcs.n	8000922 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 800095c:	2201      	movs	r2, #1
 800095e:	2110      	movs	r1, #16
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <ST7789_DrawFilledRectangle+0xac>)
 8000962:	f001 fbe4 	bl	800212e <HAL_GPIO_WritePin>
 8000966:	e000      	b.n	800096a <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000968:	bf00      	nop
}
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40010800 	.word	0x40010800

08000974 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08d      	sub	sp, #52	; 0x34
 8000978:	af02      	add	r7, sp, #8
 800097a:	4604      	mov	r4, r0
 800097c:	4608      	mov	r0, r1
 800097e:	4611      	mov	r1, r2
 8000980:	461a      	mov	r2, r3
 8000982:	4623      	mov	r3, r4
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	4603      	mov	r3, r0
 8000988:	80bb      	strh	r3, [r7, #4]
 800098a:	460b      	mov	r3, r1
 800098c:	807b      	strh	r3, [r7, #2]
 800098e:	4613      	mov	r3, r2
 8000990:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000992:	2200      	movs	r2, #0
 8000994:	2110      	movs	r1, #16
 8000996:	485d      	ldr	r0, [pc, #372]	; (8000b0c <ST7789_DrawFilledTriangle+0x198>)
 8000998:	f001 fbc9 	bl	800212e <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800099c:	2300      	movs	r3, #0
 800099e:	823b      	strh	r3, [r7, #16]
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]
 80009a4:	2300      	movs	r3, #0
 80009a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009a8:	2300      	movs	r3, #0
 80009aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80009ac:	2300      	movs	r3, #0
 80009ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80009b0:	2300      	movs	r3, #0
 80009b2:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80009b4:	2300      	movs	r3, #0
 80009b6:	83fb      	strh	r3, [r7, #30]
 80009b8:	2300      	movs	r3, #0
 80009ba:	83bb      	strh	r3, [r7, #28]
 80009bc:	2300      	movs	r3, #0
 80009be:	837b      	strh	r3, [r7, #26]
 80009c0:	2300      	movs	r3, #0
 80009c2:	833b      	strh	r3, [r7, #24]
 80009c4:	2300      	movs	r3, #0
 80009c6:	82fb      	strh	r3, [r7, #22]
 80009c8:	2300      	movs	r3, #0
 80009ca:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bfb8      	it	lt
 80009da:	425b      	neglt	r3, r3
 80009dc:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80009de:	883a      	ldrh	r2, [r7, #0]
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
 80009ea:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80009f0:	88bb      	ldrh	r3, [r7, #4]
 80009f2:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 80009f4:	887a      	ldrh	r2, [r7, #2]
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d304      	bcc.n	8000a06 <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	843b      	strh	r3, [r7, #32]
 8000a04:	e005      	b.n	8000a12 <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 8000a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0a:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8000a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a10:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000a12:	883a      	ldrh	r2, [r7, #0]
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d304      	bcc.n	8000a24 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	83bb      	strh	r3, [r7, #28]
 8000a22:	e005      	b.n	8000a30 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8000a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a28:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2e:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8000a30:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	db10      	blt.n	8000a5e <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000a44:	8a3b      	ldrh	r3, [r7, #16]
 8000a46:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000a48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a4c:	0fda      	lsrs	r2, r3, #31
 8000a4e:	4413      	add	r3, r2
 8000a50:	105b      	asrs	r3, r3, #1
 8000a52:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000a58:	8a3b      	ldrh	r3, [r7, #16]
 8000a5a:	82bb      	strh	r3, [r7, #20]
 8000a5c:	e00f      	b.n	8000a7e <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6e:	0fda      	lsrs	r2, r3, #31
 8000a70:	4413      	add	r3, r2
 8000a72:	105b      	asrs	r3, r3, #1
 8000a74:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000a76:	8a3b      	ldrh	r3, [r7, #16]
 8000a78:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	827b      	strh	r3, [r7, #18]
 8000a82:	e033      	b.n	8000aec <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8000a84:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000a86:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000a88:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000a8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000a8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4623      	mov	r3, r4
 8000a94:	f7ff fd68 	bl	8000568 <ST7789_DrawLine>

		num += numadd;
 8000a98:	8b3a      	ldrh	r2, [r7, #24]
 8000a9a:	8afb      	ldrh	r3, [r7, #22]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000aa2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000aa6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	db0e      	blt.n	8000acc <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8000aae:	8b3a      	ldrh	r2, [r7, #24]
 8000ab0:	8b7b      	ldrh	r3, [r7, #26]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8000ab8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8000ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ac4:	8bfb      	ldrh	r3, [r7, #30]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8000acc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ace:	8c3b      	ldrh	r3, [r7, #32]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8000ad6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ad8:	8bbb      	ldrh	r3, [r7, #28]
 8000ada:	4413      	add	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8000ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	827b      	strh	r3, [r7, #18]
 8000aec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000af0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	ddc5      	ble.n	8000a84 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <ST7789_DrawFilledTriangle+0x198>)
 8000afe:	f001 fb16 	bl	800212e <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	372c      	adds	r7, #44	; 0x2c
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010800 	.word	0x40010800

08000b10 <DrawCard>:
#include "st7789\st7789.h"
#include "stdbool.h"
void DrawCard(uint8_t x, uint8_t y, uint16_t color, const bool* card){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71bb      	strb	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
	for(int j = 0; j<50; j++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e039      	b.n	8000b9e <DrawCard+0x8e>
		for(int i = 0; i<50; i++){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	e030      	b.n	8000b92 <DrawCard+0x82>
			if(card[i*50 + j]) ST7789_DrawPixel(x+j, y+i, color);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2232      	movs	r2, #50	; 0x32
 8000b34:	fb02 f203 	mul.w	r2, r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d010      	beq.n	8000b6a <DrawCard+0x5a>
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b298      	uxth	r0, r3
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	88ba      	ldrh	r2, [r7, #4]
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff fccc 	bl	8000500 <ST7789_DrawPixel>
 8000b68:	e010      	b.n	8000b8c <DrawCard+0x7c>
			else ST7789_DrawPixel(x+j, y+i, WHITE);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b298      	uxth	r0, r3
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff fcba 	bl	8000500 <ST7789_DrawPixel>
		for(int i = 0; i<50; i++){
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b31      	cmp	r3, #49	; 0x31
 8000b96:	ddcb      	ble.n	8000b30 <DrawCard+0x20>
	for(int j = 0; j<50; j++){
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b31      	cmp	r3, #49	; 0x31
 8000ba2:	ddc2      	ble.n	8000b2a <DrawCard+0x1a>
		}
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 ffe4 	bl	8001b7c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f809 	bl	8000bca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f87e 	bl	8000cb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bbc:	f000 f846 	bl	8000c4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000bc0:	f7ff fbd0 	bl	8000364 <ST7789_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  IniciarJogo();
 8000bc4:	f000 fb76 	bl	80012b4 <IniciarJogo>
 8000bc8:	e7fc      	b.n	8000bc4 <main+0x18>

08000bca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b090      	sub	sp, #64	; 0x40
 8000bce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2228      	movs	r2, #40	; 0x28
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f93b 	bl	8002e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c00:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 faa8 	bl	8002160 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c16:	f000 fea7 	bl	8001968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2102      	movs	r1, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fd13 	bl	8002660 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c40:	f000 fe92 	bl	8001968 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3740      	adds	r7, #64	; 0x40
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_SPI1_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c98:	220a      	movs	r2, #10
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c9e:	f001 fe49 	bl	8002934 <HAL_SPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f000 fe5e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_GPIO_Init+0xb4>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2110      	movs	r1, #16
 8000d00:	481b      	ldr	r0, [pc, #108]	; (8000d70 <MX_GPIO_Init+0xb8>)
 8000d02:	f001 fa14 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2103      	movs	r1, #3
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <MX_GPIO_Init+0xbc>)
 8000d0c:	f001 fa0f 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000d10:	2310      	movs	r3, #16
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0xb8>)
 8000d28:	f001 f890 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_GPIO_Init+0xbc>)
 8000d44:	f001 f882 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d48:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_GPIO_Init+0xb8>)
 8000d5e:	f001 f875 	bl	8001e4c <HAL_GPIO_Init>

}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <NavegadorCursor>:

/* USER CODE BEGIN 4 */
uint16_t seta = WHITE;
uint32_t last_tick = 0;

void NavegadorCursor(bool jogo, char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas){
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b08b      	sub	sp, #44	; 0x2c
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]
	int x, y;
	if ((HAL_GetTick()-last_tick)>500){
 8000d88:	f000 ff50 	bl	8001c2c <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	4b8b      	ldr	r3, [pc, #556]	; (8000fbc <NavegadorCursor+0x244>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d98:	d916      	bls.n	8000dc8 <NavegadorCursor+0x50>
		if(seta==WHITE)
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <NavegadorCursor+0x248>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d103      	bne.n	8000dae <NavegadorCursor+0x36>
			{
				seta=BLACK;
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <NavegadorCursor+0x248>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	801a      	strh	r2, [r3, #0]
 8000dac:	e007      	b.n	8000dbe <NavegadorCursor+0x46>
			}
		else if(seta==BLACK)
 8000dae:	4b84      	ldr	r3, [pc, #528]	; (8000fc0 <NavegadorCursor+0x248>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <NavegadorCursor+0x46>
			{
			seta=WHITE;
 8000db6:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <NavegadorCursor+0x248>)
 8000db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dbc:	801a      	strh	r2, [r3, #0]
			}
		last_tick=HAL_GetTick();
 8000dbe:	f000 ff35 	bl	8001c2c <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b7d      	ldr	r3, [pc, #500]	; (8000fbc <NavegadorCursor+0x244>)
 8000dc6:	601a      	str	r2, [r3, #0]
	}
	if(jogo){
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80ac 	beq.w	8000f28 <NavegadorCursor+0x1b0>

		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) { //esquerda
 8000dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd4:	487b      	ldr	r0, [pc, #492]	; (8000fc4 <NavegadorCursor+0x24c>)
 8000dd6:	f001 f993 	bl	8002100 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d122      	bne.n	8000e26 <NavegadorCursor+0xae>
			if(VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas)){
 8000de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f000 f8ed 	bl	8000fc8 <VerificaSeExisteCartaDisponivelLinha>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00a      	beq.n	8000e0a <NavegadorCursor+0x92>
				MoverParaProximaCartaLinha(tabuleiro, colunaAtual, linhaAtual, colunas, 0);
 8000df4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	68b8      	ldr	r0, [r7, #8]
 8000e04:	f000 f909 	bl	800101a <MoverParaProximaCartaLinha>
 8000e08:	e0a6      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
            else{
            	MoverParaLinhaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 0);
 8000e0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	68b8      	ldr	r0, [r7, #8]
 8000e20:	f000 f938 	bl	8001094 <MoverParaLinhaComCarta>
 8000e24:	e098      	b.n	8000f58 <NavegadorCursor+0x1e0>
            }
        }

		else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) { // baixo
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4866      	ldr	r0, [pc, #408]	; (8000fc4 <NavegadorCursor+0x24c>)
 8000e2c:	f001 f968 	bl	8002100 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d122      	bne.n	8000e7c <NavegadorCursor+0x104>
			if(VerificaSeExisteCartaDisponivelColuna(tabuleiro, linhaAtual, colunaAtual, linhas)){
 8000e36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	68b8      	ldr	r0, [r7, #8]
 8000e40:	f000 fa16 	bl	8001270 <VerificaSeExisteCartaDisponivelColuna>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00a      	beq.n	8000e60 <NavegadorCursor+0xe8>
				MoverParaProximaCartaColuna(tabuleiro, colunaAtual, linhaAtual, linhas, 1);
 8000e4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4613      	mov	r3, r2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	68b8      	ldr	r0, [r7, #8]
 8000e5a:	f000 f974 	bl	8001146 <MoverParaProximaCartaColuna>
 8000e5e:	e07b      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
			else{
				MoverParaColunaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 1);
 8000e60:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000e64:	2301      	movs	r3, #1
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	68b8      	ldr	r0, [r7, #8]
 8000e76:	f000 f9a3 	bl	80011c0 <MoverParaColunaComCarta>
 8000e7a:	e06d      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}

        }

		else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) { //direita
 8000e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e80:	4850      	ldr	r0, [pc, #320]	; (8000fc4 <NavegadorCursor+0x24c>)
 8000e82:	f001 f93d 	bl	8002100 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d122      	bne.n	8000ed2 <NavegadorCursor+0x15a>
			if(VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas)){
 8000e8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f000 f897 	bl	8000fc8 <VerificaSeExisteCartaDisponivelLinha>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00a      	beq.n	8000eb6 <NavegadorCursor+0x13e>
				MoverParaProximaCartaLinha(tabuleiro, colunaAtual, linhaAtual, colunas, 1);
 8000ea0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	68b8      	ldr	r0, [r7, #8]
 8000eb0:	f000 f8b3 	bl	800101a <MoverParaProximaCartaLinha>
 8000eb4:	e050      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
			else{
			    MoverParaLinhaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 1);
 8000eb6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	68b8      	ldr	r0, [r7, #8]
 8000ecc:	f000 f8e2 	bl	8001094 <MoverParaLinhaComCarta>
 8000ed0:	e042      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
		}

		else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) { //cima
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	483b      	ldr	r0, [pc, #236]	; (8000fc4 <NavegadorCursor+0x24c>)
 8000ed8:	f001 f912 	bl	8002100 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d13a      	bne.n	8000f58 <NavegadorCursor+0x1e0>
			if(VerificaSeExisteCartaDisponivelColuna(tabuleiro, linhaAtual, colunaAtual, linhas)){
 8000ee2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	68b8      	ldr	r0, [r7, #8]
 8000eec:	f000 f9c0 	bl	8001270 <VerificaSeExisteCartaDisponivelColuna>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <NavegadorCursor+0x194>
				MoverParaProximaCartaColuna(tabuleiro, colunaAtual, linhaAtual, linhas, 0);
 8000ef6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000efa:	2300      	movs	r3, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f000 f91e 	bl	8001146 <MoverParaProximaCartaColuna>
 8000f0a:	e025      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
			else{
				MoverParaColunaComCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas, 0);
 8000f0c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000f10:	2300      	movs	r3, #0
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	f000 f94d 	bl	80011c0 <MoverParaColunaComCarta>
 8000f26:	e017      	b.n	8000f58 <NavegadorCursor+0x1e0>
			}
		}
	}
	else{
	ST7789_DrawFilledRectangle(10, 38, 60, 6, WHITE);
 8000f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2306      	movs	r3, #6
 8000f30:	223c      	movs	r2, #60	; 0x3c
 8000f32:	2126      	movs	r1, #38	; 0x26
 8000f34:	200a      	movs	r0, #10
 8000f36:	f7ff fcc5 	bl	80008c4 <ST7789_DrawFilledRectangle>
	ST7789_DrawFilledRectangle(170, 38, 60, 6, WHITE);
 8000f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2306      	movs	r3, #6
 8000f42:	223c      	movs	r2, #60	; 0x3c
 8000f44:	2126      	movs	r1, #38	; 0x26
 8000f46:	20aa      	movs	r0, #170	; 0xaa
 8000f48:	f7ff fcbc 	bl	80008c4 <ST7789_DrawFilledRectangle>
	x=5;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	617b      	str	r3, [r7, #20]
	y=79;
 8000f50:	234f      	movs	r3, #79	; 0x4f
 8000f52:	613b      	str	r3, [r7, #16]
	jogo=true;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
	}
	ST7789_DrawFilledTriangle(x+18, y-6, x+20, y+6, x+30, y, seta);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3312      	adds	r3, #18
 8000f5e:	b298      	uxth	r0, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3b06      	subs	r3, #6
 8000f66:	b29c      	uxth	r4, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3306      	adds	r3, #6
 8000f76:	b29e      	uxth	r6, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	331e      	adds	r3, #30
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	b292      	uxth	r2, r2
 8000f84:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <NavegadorCursor+0x248>)
 8000f86:	8809      	ldrh	r1, [r1, #0]
 8000f88:	9102      	str	r1, [sp, #8]
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4633      	mov	r3, r6
 8000f90:	462a      	mov	r2, r5
 8000f92:	4621      	mov	r1, r4
 8000f94:	f7ff fcee 	bl	8000974 <ST7789_DrawFilledTriangle>
	ST7789_DrawFilledRectangle(x, y-3, 25 , 6, seta);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	b298      	uxth	r0, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <NavegadorCursor+0x248>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2306      	movs	r3, #6
 8000fac:	2219      	movs	r2, #25
 8000fae:	f7ff fc89 	bl	80008c4 <ST7789_DrawFilledRectangle>
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000a4 	.word	0x200000a4
 8000fc0:	20000012 	.word	0x20000012
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <VerificaSeExisteCartaDisponivelLinha>:

bool VerificaSeExisteCartaDisponivelLinha(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t colunas){
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	70fb      	strb	r3, [r7, #3]
	for(int c = 0; c < colunas; c++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e014      	b.n	8001006 <VerificaSeExisteCartaDisponivelLinha+0x3e>
		if(tabuleiro[*linhaAtual][c] != '0' && c != *colunaAtual) return true;
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b30      	cmp	r3, #48	; 0x30
 8000fee:	d007      	beq.n	8001000 <VerificaSeExisteCartaDisponivelLinha+0x38>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d001      	beq.n	8001000 <VerificaSeExisteCartaDisponivelLinha+0x38>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e007      	b.n	8001010 <VerificaSeExisteCartaDisponivelLinha+0x48>
	for(int c = 0; c < colunas; c++){
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbe6      	blt.n	8000fdc <VerificaSeExisteCartaDisponivelLinha+0x14>
	}
	return false;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <MoverParaProximaCartaLinha>:

void MoverParaProximaCartaLinha(char tabuleiro[4][4], uint8_t* colunaAtual, uint8_t* linhaAtual, uint8_t colunas, uint8_t sentido){ // 1 pra direita ou 0 pra esquerda
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *colunaAtual;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	75fb      	strb	r3, [r7, #23]
	do{
		if(sentido>0) *colunaAtual = (*colunaAtual + 1) % colunas;
 800102e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <MoverParaProximaCartaLinha+0x36>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001042:	fb02 f201 	mul.w	r2, r2, r1
 8001046:	1a9b      	subs	r3, r3, r2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e00d      	b.n	800106c <MoverParaProximaCartaLinha+0x52>
		else *colunaAtual = (*colunaAtual == 0) ? colunas - 1 : *colunaAtual - 1;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <MoverParaProximaCartaLinha+0x46>
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	3b01      	subs	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	e003      	b.n	8001068 <MoverParaProximaCartaLinha+0x4e>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	7013      	strb	r3, [r2, #0]
	} while(tabuleiro[*linhaAtual][*colunaAtual] == '0' && *colunaAtual != original);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	2b30      	cmp	r3, #48	; 0x30
 800107e:	d104      	bne.n	800108a <MoverParaProximaCartaLinha+0x70>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	7dfa      	ldrb	r2, [r7, #23]
 8001086:	429a      	cmp	r2, r3
 8001088:	d1d1      	bne.n	800102e <MoverParaProximaCartaLinha+0x14>
}
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <MoverParaLinhaComCarta>:

void MoverParaLinhaComCarta(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas, uint8_t sentido) { // 1 para baixo ou 0 para cima
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	70fb      	strb	r3, [r7, #3]
	uint8_t linhaOriginal = *linhaAtual;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	74fb      	strb	r3, [r7, #19]
	do {
		if(sentido > 0)*linhaAtual = (*linhaAtual + 1) % linhas;
 80010a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <MoverParaLinhaComCarta+0x36>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80010bc:	fb02 f201 	mul.w	r2, r2, r1
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e00d      	b.n	80010e6 <MoverParaLinhaComCarta+0x52>
		else *linhaAtual = (*linhaAtual == 0) ? linhas - 1 : *linhaAtual - 1;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <MoverParaLinhaComCarta+0x46>
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	e003      	b.n	80010e2 <MoverParaLinhaComCarta+0x4e>
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	7013      	strb	r3, [r2, #0]
	} while (!VerificaSeExisteCartaDisponivelLinha(tabuleiro, linhaAtual, colunaAtual, colunas) && *linhaAtual != linhaOriginal);
 80010e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff6a 	bl	8000fc8 <VerificaSeExisteCartaDisponivelLinha>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f083 0301 	eor.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <MoverParaLinhaComCarta+0x76>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	7cfa      	ldrb	r2, [r7, #19]
 8001106:	429a      	cmp	r2, r3
 8001108:	d1ce      	bne.n	80010a8 <MoverParaLinhaComCarta+0x14>
	for (int c = 0; c < colunas; c++) {
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e011      	b.n	8001134 <MoverParaLinhaComCarta+0xa0>
		if (tabuleiro[*linhaAtual][c] != '0') {
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	441a      	add	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b30      	cmp	r3, #48	; 0x30
 8001122:	d004      	beq.n	800112e <MoverParaLinhaComCarta+0x9a>
			*colunaAtual = c;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	701a      	strb	r2, [r3, #0]
			break;
 800112c:	e007      	b.n	800113e <MoverParaLinhaComCarta+0xaa>
	for (int c = 0; c < colunas; c++) {
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbe8      	blt.n	8001110 <MoverParaLinhaComCarta+0x7c>
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <MoverParaProximaCartaColuna>:

void MoverParaProximaCartaColuna(char tabuleiro[4][4], uint8_t* colunaAtual, uint8_t* linhaAtual, uint8_t linhas, uint8_t sentido){
 8001146:	b480      	push	{r7}
 8001148:	b087      	sub	sp, #28
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *linhaAtual;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	75fb      	strb	r3, [r7, #23]
	do{
		if(sentido > 0) *linhaAtual = (*linhaAtual + 1) % linhas;
 800115a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <MoverParaProximaCartaColuna+0x36>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	fb93 f1f2 	sdiv	r1, r3, r2
 800116e:	fb02 f201 	mul.w	r2, r2, r1
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e00d      	b.n	8001198 <MoverParaProximaCartaColuna+0x52>
		else  *linhaAtual = (*linhaAtual == 0) ? linhas - 1 : *linhaAtual - 1;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <MoverParaProximaCartaColuna+0x46>
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	3b01      	subs	r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e003      	b.n	8001194 <MoverParaProximaCartaColuna+0x4e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	7013      	strb	r3, [r2, #0]
	} while(tabuleiro[*linhaAtual][*colunaAtual] == '0' && *linhaAtual != original);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	5c9b      	ldrb	r3, [r3, r2]
 80011a8:	2b30      	cmp	r3, #48	; 0x30
 80011aa:	d104      	bne.n	80011b6 <MoverParaProximaCartaColuna+0x70>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	7dfa      	ldrb	r2, [r7, #23]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d1d1      	bne.n	800115a <MoverParaProximaCartaColuna+0x14>
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <MoverParaColunaComCarta>:

void MoverParaColunaComCarta(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas, uint8_t colunas, uint8_t sentido){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	70fb      	strb	r3, [r7, #3]
	uint8_t original = *colunaAtual;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	74fb      	strb	r3, [r7, #19]
	do {
		if(sentido > 0) *colunaAtual = (*colunaAtual + 1) % colunas;
 80011d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00d      	beq.n	80011f8 <MoverParaColunaComCarta+0x38>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80011ea:	fb02 f201 	mul.w	r2, r2, r1
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e00e      	b.n	8001216 <MoverParaColunaComCarta+0x56>
		else *colunaAtual = (*colunaAtual == 0) ? colunas - 1 : *colunaAtual - 1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <MoverParaColunaComCarta+0x4a>
 8001200:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001204:	3b01      	subs	r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	e003      	b.n	8001212 <MoverParaColunaComCarta+0x52>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	7013      	strb	r3, [r2, #0]
	} while (!VerificaSeExisteCartaDisponivelColuna(tabuleiro, linhaAtual, colunaAtual, linhas) && *colunaAtual != original);
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f827 	bl	8001270 <VerificaSeExisteCartaDisponivelColuna>
 8001222:	4603      	mov	r3, r0
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <MoverParaColunaComCarta+0x78>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	7cfa      	ldrb	r2, [r7, #19]
 8001234:	429a      	cmp	r2, r3
 8001236:	d1cd      	bne.n	80011d4 <MoverParaColunaComCarta+0x14>
	for (int l = 0; l < linhas; l++) {
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e010      	b.n	8001260 <MoverParaColunaComCarta+0xa0>
			if (tabuleiro[l][*colunaAtual] != '0') {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	2b30      	cmp	r3, #48	; 0x30
 800124e:	d004      	beq.n	800125a <MoverParaColunaComCarta+0x9a>
				*linhaAtual = l;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	701a      	strb	r2, [r3, #0]
				break;
 8001258:	e006      	b.n	8001268 <MoverParaColunaComCarta+0xa8>
	for (int l = 0; l < linhas; l++) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbea      	blt.n	800123e <MoverParaColunaComCarta+0x7e>
			}
		}
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <VerificaSeExisteCartaDisponivelColuna>:

bool VerificaSeExisteCartaDisponivelColuna(char tabuleiro[4][4], uint8_t* linhaAtual, uint8_t* colunaAtual, uint8_t linhas){
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	70fb      	strb	r3, [r7, #3]
	for(int l = 0; l<linhas; l++){
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e00d      	b.n	80012a0 <VerificaSeExisteCartaDisponivelColuna+0x30>
		if(tabuleiro[l][*colunaAtual] != '0') return true;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	2b30      	cmp	r3, #48	; 0x30
 8001294:	d001      	beq.n	800129a <VerificaSeExisteCartaDisponivelColuna+0x2a>
 8001296:	2301      	movs	r3, #1
 8001298:	e007      	b.n	80012aa <VerificaSeExisteCartaDisponivelColuna+0x3a>
	for(int l = 0; l<linhas; l++){
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbed      	blt.n	8001284 <VerificaSeExisteCartaDisponivelColuna+0x14>
	}
	return false;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <IniciarJogo>:

void IniciarJogo () {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af04      	add	r7, sp, #16
	bool menu = true;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
	uint8_t linhas = 4, colunas = 4, jogadores = 1;
 80012be:	2304      	movs	r3, #4
 80012c0:	75bb      	strb	r3, [r7, #22]
 80012c2:	2304      	movs	r3, #4
 80012c4:	757b      	strb	r3, [r7, #21]
 80012c6:	2301      	movs	r3, #1
 80012c8:	753b      	strb	r3, [r7, #20]
	ST7789_Fill_Color(BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff f8e8 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_WriteString(0,0, "Matching Pairs", Font_16x26, WHITE, BLACK);
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <IniciarJogo+0xf8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	9202      	str	r2, [sp, #8]
 80012d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <IniciarJogo+0xfc>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fa9a 	bl	8000820 <ST7789_WriteString>
	ST7789_WriteString(88,30, "Game", Font_16x26, WHITE, BLACK);
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <IniciarJogo+0xf8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	9202      	str	r2, [sp, #8]
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <IniciarJogo+0x100>)
 8001300:	211e      	movs	r1, #30
 8001302:	2058      	movs	r0, #88	; 0x58
 8001304:	f7ff fa8c 	bl	8000820 <ST7789_WriteString>

     while(menu){
 8001308:	e033      	b.n	8001372 <IniciarJogo+0xbe>
     ST7789_WriteString(40,70, "Iniciar jogo", Font_11x18, WHITE, BLACK);
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <IniciarJogo+0x104>)
 800130c:	2200      	movs	r2, #0
 800130e:	9202      	str	r2, [sp, #8]
 8001310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001314:	9201      	str	r2, [sp, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <IniciarJogo+0x108>)
 800131e:	2146      	movs	r1, #70	; 0x46
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff fa7d 	bl	8000820 <ST7789_WriteString>
     ST7789_WriteString(40,100, "Recordes", Font_11x18, WHITE, BLACK);
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <IniciarJogo+0x104>)
 8001328:	2200      	movs	r2, #0
 800132a:	9202      	str	r2, [sp, #8]
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <IniciarJogo+0x10c>)
 800133a:	2164      	movs	r1, #100	; 0x64
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f7ff fa6f 	bl	8000820 <ST7789_WriteString>
     ST7789_WriteString(40,130, "Configuracoes", Font_11x18, WHITE, BLACK);
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <IniciarJogo+0x104>)
 8001344:	2200      	movs	r2, #0
 8001346:	9202      	str	r2, [sp, #8]
 8001348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134c:	9201      	str	r2, [sp, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <IniciarJogo+0x110>)
 8001356:	2182      	movs	r1, #130	; 0x82
 8001358:	2028      	movs	r0, #40	; 0x28
 800135a:	f7ff fa61 	bl	8000820 <ST7789_WriteString>
     NavegadorCursor(false, 0, 0, 0, 0, 0);
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fd03 	bl	8000d78 <NavegadorCursor>
     while(menu){
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1c8      	bne.n	800130a <IniciarJogo+0x56>
    }
     char tabuleiro[4][4];
     tentativas = 0;
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <IniciarJogo+0x114>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
     GerarParesAleatorios(tabuleiro, linhas, colunas);
 800137e:	7d7a      	ldrb	r2, [r7, #21]
 8001380:	7db9      	ldrb	r1, [r7, #22]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f821 	bl	80013cc <GerarParesAleatorios>
     Jogo(tabuleiro, linhas, colunas, 0, 0);
 800138a:	7d7a      	ldrb	r2, [r7, #21]
 800138c:	7db9      	ldrb	r1, [r7, #22]
 800138e:	1d38      	adds	r0, r7, #4
 8001390:	2300      	movs	r3, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2300      	movs	r3, #0
 8001396:	f000 f9d9 	bl	800174c <Jogo>
     AtualizarRecorde(tentativas);
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <IniciarJogo+0x114>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f982 	bl	80016a8 <AtualizarRecorde>
}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000008 	.word	0x20000008
 80013b0:	08003088 	.word	0x08003088
 80013b4:	08003098 	.word	0x08003098
 80013b8:	20000000 	.word	0x20000000
 80013bc:	080030a0 	.word	0x080030a0
 80013c0:	080030b0 	.word	0x080030b0
 80013c4:	080030bc 	.word	0x080030bc
 80013c8:	200000a0 	.word	0x200000a0

080013cc <GerarParesAleatorios>:

void GerarParesAleatorios(char tabuleiro[4][4], uint8_t linhas, uint8_t colunas){
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
 80013d8:	4613      	mov	r3, r2
 80013da:	70bb      	strb	r3, [r7, #2]
 80013dc:	466b      	mov	r3, sp
 80013de:	461d      	mov	r5, r3
	char temp[linhas*colunas];
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	78ba      	ldrb	r2, [r7, #2]
 80013e4:	fb02 f003 	mul.w	r0, r2, r3
 80013e8:	1e43      	subs	r3, r0, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4603      	mov	r3, r0
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f04f 0400 	mov.w	r4, #0
 80013fc:	00d4      	lsls	r4, r2, #3
 80013fe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001402:	00cb      	lsls	r3, r1, #3
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	f04f 0400 	mov.w	r4, #0
 8001414:	00d4      	lsls	r4, r2, #3
 8001416:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800141a:	00cb      	lsls	r3, r1, #3
 800141c:	4603      	mov	r3, r0
 800141e:	3307      	adds	r3, #7
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	ebad 0d03 	sub.w	sp, sp, r3
 8001428:	466b      	mov	r3, sp
 800142a:	3300      	adds	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i< linhas*colunas/2; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e013      	b.n	800145c <GerarParesAleatorios+0x90>
		temp[i*2] = 'a' + i;
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3261      	adds	r2, #97	; 0x61
 800143e:	b2d1      	uxtb	r1, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	54d1      	strb	r1, [r2, r3]
		temp[i*2 + 1] = 'a' + i;
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	3301      	adds	r3, #1
 800144e:	3261      	adds	r2, #97	; 0x61
 8001450:	b2d1      	uxtb	r1, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i< linhas*colunas/2; i++){
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	3301      	adds	r3, #1
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	78ba      	ldrb	r2, [r7, #2]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	0fda      	lsrs	r2, r3, #31
 8001466:	4413      	add	r3, r2
 8001468:	105b      	asrs	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	4293      	cmp	r3, r2
 8001470:	dbe0      	blt.n	8001434 <GerarParesAleatorios+0x68>
	}
	for(int i = linhas*colunas - 1; i>0; i--){
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	78ba      	ldrb	r2, [r7, #2]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e01e      	b.n	80014be <GerarParesAleatorios+0xf2>
		uint8_t j = rand() % (i+1);
 8001480:	f001 fcf0 	bl	8002e64 <rand>
 8001484:	4602      	mov	r2, r0
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	fb92 f1f3 	sdiv	r1, r2, r3
 800148e:	fb03 f301 	mul.w	r3, r3, r1
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	72fb      	strb	r3, [r7, #11]
		char tmp = temp[i];
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	72bb      	strb	r3, [r7, #10]
		temp[i] = temp[j];
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	5cd1      	ldrb	r1, [r2, r3]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
		temp[j] = tmp;
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	7ab9      	ldrb	r1, [r7, #10]
 80014b6:	54d1      	strb	r1, [r2, r3]
	for(int i = linhas*colunas - 1; i>0; i--){
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dcdd      	bgt.n	8001480 <GerarParesAleatorios+0xb4>
	}
	uint8_t count = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(int i = 0; i<linhas; i++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e01d      	b.n	800150c <GerarParesAleatorios+0x140>
		for(int j = 0; j<colunas; j++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e013      	b.n	80014fe <GerarParesAleatorios+0x132>
			tabuleiro[i][j] = temp[count];
 80014d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	440a      	add	r2, r1
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	5cc9      	ldrb	r1, [r1, r3]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
			count++;
 80014ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014f2:	3301      	adds	r3, #1
 80014f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(int j = 0; j<colunas; j++){
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	78bb      	ldrb	r3, [r7, #2]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbe7      	blt.n	80014d6 <GerarParesAleatorios+0x10a>
	for(int i = 0; i<linhas; i++){
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	429a      	cmp	r2, r3
 8001512:	dbdd      	blt.n	80014d0 <GerarParesAleatorios+0x104>
 8001514:	46ad      	mov	sp, r5
		}
	}
}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001520 <SelecionarCarta>:

void SelecionarCarta(char tabuleiro[4][4], uint8_t i, uint8_t j, uint8_t linhas, uint8_t colunas){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	460b      	mov	r3, r1
 8001534:	70bb      	strb	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	707b      	strb	r3, [r7, #1]
	uint8_t x = 240/colunas * j, y = 240/linhas * i;
 800153a:	7e3b      	ldrb	r3, [r7, #24]
 800153c:	22f0      	movs	r2, #240	; 0xf0
 800153e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	78ba      	ldrb	r2, [r7, #2]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	22f0      	movs	r2, #240	; 0xf0
 8001550:	fb92 f3f3 	sdiv	r3, r2, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	73bb      	strb	r3, [r7, #14]
	switch(tabuleiro[i][j]){
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	441a      	add	r2, r3
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	3b61      	subs	r3, #97	; 0x61
 800156c:	2b07      	cmp	r3, #7
 800156e:	d84f      	bhi.n	8001610 <SelecionarCarta+0xf0>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <SelecionarCarta+0x58>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001599 	.word	0x08001599
 800157c:	080015a9 	.word	0x080015a9
 8001580:	080015b9 	.word	0x080015b9
 8001584:	080015c7 	.word	0x080015c7
 8001588:	080015d5 	.word	0x080015d5
 800158c:	080015e3 	.word	0x080015e3
 8001590:	080015f1 	.word	0x080015f1
 8001594:	08001601 	.word	0x08001601
	case 'a':
		DrawCard(x, y, RED, (const bool*) hearts);
 8001598:	7bb9      	ldrb	r1, [r7, #14]
 800159a:	7bf8      	ldrb	r0, [r7, #15]
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <SelecionarCarta+0xf8>)
 800159e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015a2:	f7ff fab5 	bl	8000b10 <DrawCard>
		break;
 80015a6:	e033      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'b':
		DrawCard(x, y, RED, (const bool*) diamonds);
 80015a8:	7bb9      	ldrb	r1, [r7, #14]
 80015aa:	7bf8      	ldrb	r0, [r7, #15]
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <SelecionarCarta+0xfc>)
 80015ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015b2:	f7ff faad 	bl	8000b10 <DrawCard>
		break;
 80015b6:	e02b      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'c':
		DrawCard(x, y, BLACK, (const bool*) clubs);
 80015b8:	7bb9      	ldrb	r1, [r7, #14]
 80015ba:	7bf8      	ldrb	r0, [r7, #15]
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <SelecionarCarta+0x100>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f7ff faa6 	bl	8000b10 <DrawCard>
		break;
 80015c4:	e024      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'd':
		DrawCard(x, y, BLACK, (const bool*) spades);
 80015c6:	7bb9      	ldrb	r1, [r7, #14]
 80015c8:	7bf8      	ldrb	r0, [r7, #15]
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <SelecionarCarta+0x104>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f7ff fa9f 	bl	8000b10 <DrawCard>
		break;
 80015d2:	e01d      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'e':
		DrawCard(x, y, BLACK, (const bool*) hearts);
 80015d4:	7bb9      	ldrb	r1, [r7, #14]
 80015d6:	7bf8      	ldrb	r0, [r7, #15]
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <SelecionarCarta+0xf8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f7ff fa98 	bl	8000b10 <DrawCard>
		break;
 80015e0:	e016      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'f':
		DrawCard(x, y, BLACK, (const bool*) diamonds);
 80015e2:	7bb9      	ldrb	r1, [r7, #14]
 80015e4:	7bf8      	ldrb	r0, [r7, #15]
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <SelecionarCarta+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f7ff fa91 	bl	8000b10 <DrawCard>
		break;
 80015ee:	e00f      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'g':
		DrawCard(x, y, RED, (const bool*) clubs);
 80015f0:	7bb9      	ldrb	r1, [r7, #14]
 80015f2:	7bf8      	ldrb	r0, [r7, #15]
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <SelecionarCarta+0x100>)
 80015f6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015fa:	f7ff fa89 	bl	8000b10 <DrawCard>
		break;
 80015fe:	e007      	b.n	8001610 <SelecionarCarta+0xf0>
	case 'h':
		DrawCard(x, y, RED, (const bool*) spades);
 8001600:	7bb9      	ldrb	r1, [r7, #14]
 8001602:	7bf8      	ldrb	r0, [r7, #15]
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <SelecionarCarta+0x104>)
 8001606:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800160a:	f7ff fa81 	bl	8000b10 <DrawCard>
		break;
 800160e:	bf00      	nop
	}
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800518c 	.word	0x0800518c
 800161c:	08006ed8 	.word	0x08006ed8
 8001620:	08006514 	.word	0x08006514
 8001624:	08005b50 	.word	0x08005b50

08001628 <VirarTodasCartas>:

void VirarTodasCartas(uint8_t linhas, uint8_t colunas){
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af02      	add	r7, sp, #8
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	uint8_t x = 240/colunas, y = 240/linhas;
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	22f0      	movs	r2, #240	; 0xf0
 800163c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	22f0      	movs	r2, #240	; 0xf0
 8001646:	fb92 f3f3 	sdiv	r3, r2, r3
 800164a:	73bb      	strb	r3, [r7, #14]
	for(int i = 0; i<linhas; i++){
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e020      	b.n	8001694 <VirarTodasCartas+0x6c>
		for(int j = 0; j<colunas; j++){
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e016      	b.n	8001686 <VirarTodasCartas+0x5e>
			ST7789_DrawImage(x*j, y*i, 50, 50, (const uint16_t *)fundocarta);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	b29b      	uxth	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	b292      	uxth	r2, r2
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	b298      	uxth	r0, r3
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	b29b      	uxth	r3, r3
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	b292      	uxth	r2, r2
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	b299      	uxth	r1, r3
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <VirarTodasCartas+0x7c>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2332      	movs	r3, #50	; 0x32
 800167a:	2232      	movs	r2, #50	; 0x32
 800167c:	f7ff f800 	bl	8000680 <ST7789_DrawImage>
		for(int j = 0; j<colunas; j++){
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3301      	adds	r3, #1
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbe4      	blt.n	8001658 <VirarTodasCartas+0x30>
	for(int i = 0; i<linhas; i++){
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbda      	blt.n	8001652 <VirarTodasCartas+0x2a>
		}
	}
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	0800789c 	.word	0x0800789c

080016a8 <AtualizarRecorde>:

void AtualizarRecorde(uint8_t atual){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	recorde = (recorde > atual) ? atual : recorde;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <AtualizarRecorde+0x28>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	79fa      	ldrb	r2, [r7, #7]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bf28      	it	cs
 80016bc:	4613      	movcs	r3, r2
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <AtualizarRecorde+0x28>)
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000010 	.word	0x20000010

080016d4 <CompararPares>:

bool CompararPares(char a, char b){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	460a      	mov	r2, r1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71bb      	strb	r3, [r7, #6]
	return a==b;
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <AtualizarTentativas>:

void AtualizarTentativas(uint8_t *tentativas){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	(*tentativas)++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	701a      	strb	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <VerificaFimDeJogo>:

bool VerificaFimDeJogo(uint8_t acertos, uint8_t linhas, uint8_t colunas){
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	460b      	mov	r3, r1
 8001726:	71bb      	strb	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	717b      	strb	r3, [r7, #5]
	return acertos >= linhas*colunas;
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	7979      	ldrb	r1, [r7, #5]
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	429a      	cmp	r2, r3
 8001738:	bfac      	ite	ge
 800173a:	2301      	movge	r3, #1
 800173c:	2300      	movlt	r3, #0
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <Jogo>:

void ExibirFimDeJogo(uint8_t numeroDeTentativasDaRodada, uint8_t recorde){

}

void Jogo(char tabuleiro[4][4], uint8_t linhas, uint8_t colunas, uint8_t linhaAtual, uint8_t colunaAtual){
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4603      	mov	r3, r0
 800175c:	70fb      	strb	r3, [r7, #3]
 800175e:	460b      	mov	r3, r1
 8001760:	70bb      	strb	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	707b      	strb	r3, [r7, #1]
	for(;;){
		uint8_t totalDeCartasSelecionadas = 0, acertos = 0, posicoesCartasSelecionadas[2][2];
 8001766:	2300      	movs	r3, #0
 8001768:	77fb      	strb	r3, [r7, #31]
 800176a:	2300      	movs	r3, #0
 800176c:	77bb      	strb	r3, [r7, #30]
		for(int i = 0; i < colunas; i++){
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	e017      	b.n	80017a4 <Jogo+0x58>
			for(int j = 0; j < linhas; j++){
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00d      	b.n	8001796 <Jogo+0x4a>
				SelecionarCarta(tabuleiro, i, j, linhas, colunas);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	78f8      	ldrb	r0, [r7, #3]
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4603      	mov	r3, r0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fec8 	bl	8001520 <SelecionarCarta>
			for(int j = 0; j < linhas; j++){
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbed      	blt.n	800177a <Jogo+0x2e>
		for(int i = 0; i < colunas; i++){
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbe3      	blt.n	8001774 <Jogo+0x28>
			}
		}
		HAL_Delay(1500);
 80017ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80017b0:	f000 fa46 	bl	8001c40 <HAL_Delay>
		VirarTodasCartas(linhas, colunas);
 80017b4:	78ba      	ldrb	r2, [r7, #2]
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff34 	bl	8001628 <VirarTodasCartas>
		uint8_t ultimaPosicao[2] = {100, 100};
 80017c0:	4b65      	ldr	r3, [pc, #404]	; (8001958 <Jogo+0x20c>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	813b      	strh	r3, [r7, #8]
		while(!VerificaFimDeJogo(acertos, linhas, colunas)){
 80017c6:	e0b8      	b.n	800193a <Jogo+0x1ee>
			NavegadorCursor(true, tabuleiro, &linhaAtual, &colunaAtual, linhas, colunas);
 80017c8:	1c7a      	adds	r2, r7, #1
 80017ca:	78bb      	ldrb	r3, [r7, #2]
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff facd 	bl	8000d78 <NavegadorCursor>
			if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) && linhaAtual != ultimaPosicao[0] && colunaAtual != ultimaPosicao[1]){
 80017de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e2:	485e      	ldr	r0, [pc, #376]	; (800195c <Jogo+0x210>)
 80017e4:	f000 fc8c 	bl	8002100 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 80a5 	bne.w	800193a <Jogo+0x1ee>
 80017f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f4:	4859      	ldr	r0, [pc, #356]	; (800195c <Jogo+0x210>)
 80017f6:	f000 fc83 	bl	8002100 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 809c 	bne.w	800193a <Jogo+0x1ee>
 8001802:	7a3a      	ldrb	r2, [r7, #8]
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	429a      	cmp	r2, r3
 8001808:	f000 8097 	beq.w	800193a <Jogo+0x1ee>
 800180c:	7a7a      	ldrb	r2, [r7, #9]
 800180e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001812:	429a      	cmp	r2, r3
 8001814:	f000 8091 	beq.w	800193a <Jogo+0x1ee>
				SelecionarCarta(tabuleiro, linhaAtual, colunaAtual, linhas, colunas);
 8001818:	7879      	ldrb	r1, [r7, #1]
 800181a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800181e:	78f8      	ldrb	r0, [r7, #3]
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fe7a 	bl	8001520 <SelecionarCarta>
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][0] = linhaAtual;
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	787a      	ldrb	r2, [r7, #1]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	f107 0120 	add.w	r1, r7, #32
 800183a:	440b      	add	r3, r1
 800183c:	f803 2c14 	strb.w	r2, [r3, #-20]
				posicoesCartasSelecionadas[totalDeCartasSelecionadas%2][1] = colunaAtual;
 8001840:	7ffb      	ldrb	r3, [r7, #31]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	f107 0120 	add.w	r1, r7, #32
 8001850:	440b      	add	r3, r1
 8001852:	f803 2c13 	strb.w	r2, [r3, #-19]
				totalDeCartasSelecionadas++;
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	3301      	adds	r3, #1
 800185a:	77fb      	strb	r3, [r7, #31]
				ultimaPosicao[0] = linhaAtual;
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	723b      	strb	r3, [r7, #8]
				ultimaPosicao[1] = colunaAtual;
 8001860:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001864:	727b      	strb	r3, [r7, #9]
				if(totalDeCartasSelecionadas % 2 == 0){
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d163      	bne.n	800193a <Jogo+0x1ee>
					AtualizarTentativas(&tentativas);
 8001872:	483b      	ldr	r0, [pc, #236]	; (8001960 <Jogo+0x214>)
 8001874:	f7ff ff42 	bl	80016fc <AtualizarTentativas>
					char carta1 = tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]];
 8001878:	7b3b      	ldrb	r3, [r7, #12]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	7b7a      	ldrb	r2, [r7, #13]
 8001882:	5c9b      	ldrb	r3, [r3, r2]
 8001884:	74fb      	strb	r3, [r7, #19]
					char carta2 = tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]];
 8001886:	7bbb      	ldrb	r3, [r7, #14]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	5c9b      	ldrb	r3, [r3, r2]
 8001892:	74bb      	strb	r3, [r7, #18]
					if(CompararPares(carta1, carta2)){
 8001894:	7cba      	ldrb	r2, [r7, #18]
 8001896:	7cfb      	ldrb	r3, [r7, #19]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff1a 	bl	80016d4 <CompararPares>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d011      	beq.n	80018ca <Jogo+0x17e>
						acertos++;
 80018a6:	7fbb      	ldrb	r3, [r7, #30]
 80018a8:	3301      	adds	r3, #1
 80018aa:	77bb      	strb	r3, [r7, #30]
						tabuleiro[posicoesCartasSelecionadas[0][0]][posicoesCartasSelecionadas[0][1]] = '0';
 80018ac:	7b3b      	ldrb	r3, [r7, #12]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	7b7a      	ldrb	r2, [r7, #13]
 80018b6:	2130      	movs	r1, #48	; 0x30
 80018b8:	5499      	strb	r1, [r3, r2]
						tabuleiro[posicoesCartasSelecionadas[1][0]][posicoesCartasSelecionadas[1][1]] = '0';
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	2130      	movs	r1, #48	; 0x30
 80018c6:	5499      	strb	r1, [r3, r2]
 80018c8:	e037      	b.n	800193a <Jogo+0x1ee>
					}
					else{
						HAL_Delay(1000);
 80018ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ce:	f000 f9b7 	bl	8001c40 <HAL_Delay>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[0][1], 240/linhas*posicoesCartasSelecionadas[0][0], 50, 50, (const uint16_t *)fundocarta);
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	22f0      	movs	r2, #240	; 0xf0
 80018d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	7b7a      	ldrb	r2, [r7, #13]
 80018de:	b292      	uxth	r2, r2
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	b298      	uxth	r0, r3
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	22f0      	movs	r2, #240	; 0xf0
 80018ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	7b3a      	ldrb	r2, [r7, #12]
 80018f2:	b292      	uxth	r2, r2
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	b299      	uxth	r1, r3
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <Jogo+0x218>)
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2332      	movs	r3, #50	; 0x32
 8001900:	2232      	movs	r2, #50	; 0x32
 8001902:	f7fe febd 	bl	8000680 <ST7789_DrawImage>
						ST7789_DrawImage(240/colunas*posicoesCartasSelecionadas[1][1], 240/linhas*posicoesCartasSelecionadas[1][0], 50, 50, (const uint16_t *)fundocarta);
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	22f0      	movs	r2, #240	; 0xf0
 800190a:	fb92 f3f3 	sdiv	r3, r2, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	b292      	uxth	r2, r2
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	b298      	uxth	r0, r3
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	22f0      	movs	r2, #240	; 0xf0
 800191e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	7bba      	ldrb	r2, [r7, #14]
 8001926:	b292      	uxth	r2, r2
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	b299      	uxth	r1, r3
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <Jogo+0x218>)
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2332      	movs	r3, #50	; 0x32
 8001934:	2232      	movs	r2, #50	; 0x32
 8001936:	f7fe fea3 	bl	8000680 <ST7789_DrawImage>
		while(!VerificaFimDeJogo(acertos, linhas, colunas)){
 800193a:	78ba      	ldrb	r2, [r7, #2]
 800193c:	78f9      	ldrb	r1, [r7, #3]
 800193e:	7fbb      	ldrb	r3, [r7, #30]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff feea 	bl	800171a <VerificaFimDeJogo>
 8001946:	4603      	mov	r3, r0
 8001948:	f083 0301 	eor.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f47f af3a 	bne.w	80017c8 <Jogo+0x7c>
	for(;;){
 8001954:	e707      	b.n	8001766 <Jogo+0x1a>
 8001956:	bf00      	nop
 8001958:	080030cc 	.word	0x080030cc
 800195c:	40010800 	.word	0x40010800
 8001960:	200000a0 	.word	0x200000a0
 8001964:	0800789c 	.word	0x0800789c

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196e:	e7fe      	b.n	800196e <Error_Handler+0x6>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_MspInit+0x5c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_MspInit+0x5c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_MspInit+0x60>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_MspInit+0x60>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_SPI_MspInit+0x88>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d12f      	bne.n	8001a54 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 80019fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0x8c>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a24:	23a0      	movs	r3, #160	; 0xa0
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	480b      	ldr	r0, [pc, #44]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a38:	f000 fa08 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_SPI_MspInit+0x90>)
 8001a50:	f000 f9fc 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010800 	.word	0x40010800

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 f8ab 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f001 f98a 	bl	8002e00 <__errno>
 8001aec:	4602      	mov	r2, r0
 8001aee:	230c      	movs	r3, #12
 8001af0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20005000 	.word	0x20005000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	200000a8 	.word	0x200000a8
 8001b20:	20000118 	.word	0x20000118

08001b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b56:	f7ff ffe5 	bl	8001b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f001 f957 	bl	8002e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff f825 	bl	8000bac <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b6c:	08008c3c 	.word	0x08008c3c
  ldr r2, =_sbss
 8001b70:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001b74:	20000114 	.word	0x20000114

08001b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_2_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x28>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 f929 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff feea 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f933 	bl	8001e32 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f909 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000014 	.word	0x20000014
 8001c00:	2000001c 	.word	0x2000001c
 8001c04:	20000018 	.word	0x20000018

08001c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x1c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x20>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_IncTick+0x20>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	2000001c 	.word	0x2000001c
 8001c28:	2000010c 	.word	0x2000010c

08001c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_GetTick+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	2000010c 	.word	0x2000010c

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_Delay+0x40>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffe0 	bl	8001c2c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000001c 	.word	0x2000001c

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff90 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff49 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff5e 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff90 	bl	8001d3c <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5f 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffb0 	bl	8001da0 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e127      	b.n	80020b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e60:	2201      	movs	r2, #1
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8116 	bne.w	80020aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d034      	beq.n	8001ef0 <HAL_GPIO_Init+0xa4>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d80d      	bhi.n	8001ea6 <HAL_GPIO_Init+0x5a>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x9a>
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d804      	bhi.n	8001e9c <HAL_GPIO_Init+0x50>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d031      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d01c      	beq.n	8001ed4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e048      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d043      	beq.n	8001f28 <HAL_GPIO_Init+0xdc>
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d01b      	beq.n	8001edc <HAL_GPIO_Init+0x90>
          break;
 8001ea4:	e043      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ea6:	4a89      	ldr	r2, [pc, #548]	; (80020cc <HAL_GPIO_Init+0x280>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d026      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001eac:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_GPIO_Init+0x280>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d806      	bhi.n	8001ec0 <HAL_GPIO_Init+0x74>
 8001eb2:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <HAL_GPIO_Init+0x284>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d020      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001eb8:	4a86      	ldr	r2, [pc, #536]	; (80020d4 <HAL_GPIO_Init+0x288>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01d      	beq.n	8001efa <HAL_GPIO_Init+0xae>
          break;
 8001ebe:	e036      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ec0:	4a85      	ldr	r2, [pc, #532]	; (80020d8 <HAL_GPIO_Init+0x28c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001ec6:	4a85      	ldr	r2, [pc, #532]	; (80020dc <HAL_GPIO_Init+0x290>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d016      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001ecc:	4a84      	ldr	r2, [pc, #528]	; (80020e0 <HAL_GPIO_Init+0x294>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xae>
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e028      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e023      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01e      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e019      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e012      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e008      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d801      	bhi.n	8001f38 <HAL_GPIO_Init+0xec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	e001      	b.n	8001f3c <HAL_GPIO_Init+0xf0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2bff      	cmp	r3, #255	; 0xff
 8001f42:	d802      	bhi.n	8001f4a <HAL_GPIO_Init+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x104>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	210f      	movs	r1, #15
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	401a      	ands	r2, r3
 8001f62:	6a39      	ldr	r1, [r7, #32]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8096 	beq.w	80020aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6193      	str	r3, [r2, #24]
 8001f8a:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f96:	4a54      	ldr	r2, [pc, #336]	; (80020e8 <HAL_GPIO_Init+0x29c>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x19e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x19a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x196>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x192>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fea:	2300      	movs	r3, #0
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffc:	493a      	ldr	r1, [pc, #232]	; (80020e8 <HAL_GPIO_Init+0x29c>)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4938      	ldr	r1, [pc, #224]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	43db      	mvns	r3, r3
 800202c:	4933      	ldr	r1, [pc, #204]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800202e:	4013      	ands	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	492e      	ldr	r1, [pc, #184]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	43db      	mvns	r3, r3
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002056:	4013      	ands	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	43db      	mvns	r3, r3
 800207c:	491f      	ldr	r1, [pc, #124]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800207e:	4013      	ands	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	491a      	ldr	r1, [pc, #104]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4915      	ldr	r1, [pc, #84]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	3301      	adds	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f aed0 	bne.w	8001e60 <HAL_GPIO_Init+0x14>
  }
}
 80020c0:	bf00      	nop
 80020c2:	372c      	adds	r7, #44	; 0x2c
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	10210000 	.word	0x10210000
 80020d0:	10110000 	.word	0x10110000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10310000 	.word	0x10310000
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10220000 	.word	0x10220000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40010800 	.word	0x40010800
 80020f0:	40010c00 	.word	0x40010c00
 80020f4:	40011000 	.word	0x40011000
 80020f8:	40011400 	.word	0x40011400
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
 800213a:	4613      	mov	r3, r2
 800213c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800214a:	e003      	b.n	8002154 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e26c      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218c:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d112      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
 8002198:	4b8c      	ldr	r3, [pc, #560]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06c      	beq.n	800228c <HAL_RCC_OscConfig+0x12c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d168      	bne.n	800228c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e246      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x76>
 80021c8:	4b80      	ldr	r3, [pc, #512]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a7f      	ldr	r2, [pc, #508]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7a      	ldr	r2, [pc, #488]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b78      	ldr	r3, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a77      	ldr	r2, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xbc>
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a71      	ldr	r2, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 800221c:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fcf6 	bl	8001c2c <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fcf2 	bl	8001c2c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1fa      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe4>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fce2 	bl	8001c2c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fcde 	bl	8001c2c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1e6      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x10c>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b43      	ldr	r3, [pc, #268]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1ba      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4939      	ldr	r1, [pc, #228]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCC_OscConfig+0x270>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fc97 	bl	8001c2c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff fc93 	bl	8001c2c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e19b      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4927      	ldr	r1, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_OscConfig+0x270>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fc76 	bl	8001c2c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff fc72 	bl	8001c2c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e17a      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03a      	beq.n	80023e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d019      	beq.n	80023aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff fc56 	bl	8001c2c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff fc52 	bl	8001c2c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e15a      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 faa8 	bl	80028f8 <RCC_Delay>
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff fc3c 	bl	8001c2c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	e00f      	b.n	80023d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff fc38 	bl	8001c2c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d908      	bls.n	80023d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e140      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	42420000 	.word	0x42420000
 80023d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e9      	bne.n	80023b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a6 	beq.w	800253e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b97      	ldr	r3, [pc, #604]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b94      	ldr	r3, [pc, #592]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a93      	ldr	r2, [pc, #588]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b8b      	ldr	r3, [pc, #556]	; (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a8a      	ldr	r2, [pc, #552]	; (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7ff fbf9 	bl	8001c2c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7ff fbf5 	bl	8001c2c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0fd      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002464:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a7a      	ldr	r2, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e02d      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x334>
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a75      	ldr	r2, [pc, #468]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a72      	ldr	r2, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	e01c      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x356>
 800249c:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a6c      	ldr	r2, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a69      	ldr	r2, [pc, #420]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a63      	ldr	r2, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fba9 	bl	8001c2c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff fba5 	bl	8001c2c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0ab      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	4b57      	ldr	r3, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <HAL_RCC_OscConfig+0x37e>
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7ff fb93 	bl	8001c2c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7ff fb8f 	bl	8001c2c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e095      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	4b4c      	ldr	r3, [pc, #304]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b48      	ldr	r3, [pc, #288]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8081 	beq.w	800264a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002548:	4b42      	ldr	r3, [pc, #264]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d061      	beq.n	8002618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d146      	bne.n	80025ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x4fc>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff fb63 	bl	8001c2c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff fb5f 	bl	8001c2c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e067      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	492d      	ldr	r1, [pc, #180]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a19      	ldr	r1, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	430b      	orrs	r3, r1
 80025b6:	4927      	ldr	r1, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_RCC_OscConfig+0x4fc>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7ff fb33 	bl	8001c2c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7ff fb2f 	bl	8001c2c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e037      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x46a>
 80025e8:	e02f      	b.n	800264a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_RCC_OscConfig+0x4fc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fb1c 	bl	8001c2c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7ff fb18 	bl	8001c2c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e020      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x498>
 8002616:	e018      	b.n	800264a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e013      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	429a      	cmp	r2, r3
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	42420060 	.word	0x42420060

08002660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0d0      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b67      	ldr	r3, [pc, #412]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4965      	ldr	r1, [pc, #404]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	494d      	ldr	r1, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d040      	beq.n	8002780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d115      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e073      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4936      	ldr	r1, [pc, #216]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7ff fa6c 	bl	8001c2c <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7ff fa68 	bl	8001c2c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e053      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d210      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	4922      	ldr	r1, [pc, #136]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e032      	b.n	8002816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4916      	ldr	r1, [pc, #88]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ee:	f000 f821 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027f2:	4601      	mov	r1, r0
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	5cd3      	ldrb	r3, [r2, r3]
 8002802:	fa21 f303 	lsr.w	r3, r1, r3
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1cc>)
 8002808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1d0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f9ca 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000
 8002824:	40021000 	.word	0x40021000
 8002828:	08008c24 	.word	0x08008c24
 800282c:	20000014 	.word	0x20000014
 8002830:	20000018 	.word	0x20000018

08002834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b490      	push	{r4, r7}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800283c:	1d3c      	adds	r4, r7, #4
 800283e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x40>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x46>
 8002872:	e02d      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	e02d      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002886:	4413      	add	r3, r2
 8002888:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800288c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c5b      	lsrs	r3, r3, #17
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a6:	4413      	add	r3, r2
 80028a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b2:	fb02 f203 	mul.w	r2, r2, r3
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	e004      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	623b      	str	r3, [r7, #32]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6a3b      	ldr	r3, [r7, #32]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc90      	pop	{r4, r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	080030d0 	.word	0x080030d0
 80028e8:	080030e0 	.word	0x080030e0
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	003d0900 	.word	0x003d0900

080028f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <RCC_Delay+0x34>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <RCC_Delay+0x38>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002914:	bf00      	nop
  }
  while (Delay --);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f9      	bne.n	8002914 <RCC_Delay+0x1c>
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000014 	.word	0x20000014
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e076      	b.n	8002a34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002956:	d009      	beq.n	800296c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
 800295e:	e005      	b.n	800296c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff f824 	bl	80019d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	ea42 0103 	orr.w	r1, r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	0c1a      	lsrs	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f002 0204 	and.w	r2, r2, #4
 8002a12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_Transmit+0x22>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e126      	b.n	8002cac <HAL_SPI_Transmit+0x270>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a66:	f7ff f8e1 	bl	8001c2c <HAL_GetTick>
 8002a6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a80:	e10b      	b.n	8002c9a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0x52>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a92:	e102      	b.n	8002c9a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2203      	movs	r2, #3
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ada:	d10f      	bne.n	8002afc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d007      	beq.n	8002b1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b22:	d14b      	bne.n	8002bbc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Transmit+0xf6>
 8002b2c:	8afb      	ldrh	r3, [r7, #22]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d13e      	bne.n	8002bb0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	881a      	ldrh	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	1c9a      	adds	r2, r3, #2
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b56:	e02b      	b.n	8002bb0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d112      	bne.n	8002b8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b8a:	e011      	b.n	8002bb0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b8c:	f7ff f84e 	bl	8001c2c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d803      	bhi.n	8002ba4 <HAL_SPI_Transmit+0x168>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d102      	bne.n	8002baa <HAL_SPI_Transmit+0x16e>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bae:	e074      	b.n	8002c9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ce      	bne.n	8002b58 <HAL_SPI_Transmit+0x11c>
 8002bba:	e04c      	b.n	8002c56 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x18e>
 8002bc4:	8afb      	ldrh	r3, [r7, #22]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d140      	bne.n	8002c4c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bf0:	e02c      	b.n	8002c4c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d113      	bne.n	8002c28 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c26:	e011      	b.n	8002c4c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c28:	f7ff f800 	bl	8001c2c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d803      	bhi.n	8002c40 <HAL_SPI_Transmit+0x204>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d102      	bne.n	8002c46 <HAL_SPI_Transmit+0x20a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c4a:	e026      	b.n	8002c9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1cd      	bne.n	8002bf2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8b2 	bl	8002dc4 <SPI_EndRxTxTransaction>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	77fb      	strb	r3, [r7, #31]
 8002c96:	e000      	b.n	8002c9a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cc4:	f7fe ffb2 	bl	8001c2c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cd4:	f7fe ffaa 	bl	8001c2c <HAL_GetTick>
 8002cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	0d1b      	lsrs	r3, r3, #20
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cea:	e054      	b.n	8002d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d050      	beq.n	8002d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cf4:	f7fe ff9a 	bl	8001c2c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d902      	bls.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d13d      	bne.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d22:	d111      	bne.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2c:	d004      	beq.n	8002d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d36:	d107      	bne.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d10f      	bne.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e017      	b.n	8002db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d19b      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000014 	.word	0x20000014

08002dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff ff6a 	bl	8002cb4 <SPI_WaitFlagStateUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e000      	b.n	8002df8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <__errno>:
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <__errno+0x8>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000020 	.word	0x20000020

08002e0c <__libc_init_array>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	2500      	movs	r5, #0
 8002e10:	4e0c      	ldr	r6, [pc, #48]	; (8002e44 <__libc_init_array+0x38>)
 8002e12:	4c0d      	ldr	r4, [pc, #52]	; (8002e48 <__libc_init_array+0x3c>)
 8002e14:	1ba4      	subs	r4, r4, r6
 8002e16:	10a4      	asrs	r4, r4, #2
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d109      	bne.n	8002e30 <__libc_init_array+0x24>
 8002e1c:	f000 f8ca 	bl	8002fb4 <_init>
 8002e20:	2500      	movs	r5, #0
 8002e22:	4e0a      	ldr	r6, [pc, #40]	; (8002e4c <__libc_init_array+0x40>)
 8002e24:	4c0a      	ldr	r4, [pc, #40]	; (8002e50 <__libc_init_array+0x44>)
 8002e26:	1ba4      	subs	r4, r4, r6
 8002e28:	10a4      	asrs	r4, r4, #2
 8002e2a:	42a5      	cmp	r5, r4
 8002e2c:	d105      	bne.n	8002e3a <__libc_init_array+0x2e>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e34:	4798      	blx	r3
 8002e36:	3501      	adds	r5, #1
 8002e38:	e7ee      	b.n	8002e18 <__libc_init_array+0xc>
 8002e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3e:	4798      	blx	r3
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7f2      	b.n	8002e2a <__libc_init_array+0x1e>
 8002e44:	08008c34 	.word	0x08008c34
 8002e48:	08008c34 	.word	0x08008c34
 8002e4c:	08008c34 	.word	0x08008c34
 8002e50:	08008c38 	.word	0x08008c38

08002e54 <memset>:
 8002e54:	4603      	mov	r3, r0
 8002e56:	4402      	add	r2, r0
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <memset+0xa>
 8002e5c:	4770      	bx	lr
 8002e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e62:	e7f9      	b.n	8002e58 <memset+0x4>

08002e64 <rand>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <rand+0x50>)
 8002e68:	681c      	ldr	r4, [r3, #0]
 8002e6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e6c:	b97b      	cbnz	r3, 8002e8e <rand+0x2a>
 8002e6e:	2018      	movs	r0, #24
 8002e70:	f000 f82c 	bl	8002ecc <malloc>
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <rand+0x54>)
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <rand+0x58>)
 8002e78:	63a0      	str	r0, [r4, #56]	; 0x38
 8002e7a:	e9c0 2300 	strd	r2, r3, [r0]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <rand+0x5c>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	6083      	str	r3, [r0, #8]
 8002e84:	230b      	movs	r3, #11
 8002e86:	8183      	strh	r3, [r0, #12]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002e8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <rand+0x60>)
 8002e92:	690a      	ldr	r2, [r1, #16]
 8002e94:	694b      	ldr	r3, [r1, #20]
 8002e96:	4350      	muls	r0, r2
 8002e98:	4c0b      	ldr	r4, [pc, #44]	; (8002ec8 <rand+0x64>)
 8002e9a:	fb04 0003 	mla	r0, r4, r3, r0
 8002e9e:	fba2 2304 	umull	r2, r3, r2, r4
 8002ea2:	4403      	add	r3, r0
 8002ea4:	1c54      	adds	r4, r2, #1
 8002ea6:	f143 0500 	adc.w	r5, r3, #0
 8002eaa:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002eae:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	20000020 	.word	0x20000020
 8002eb8:	abcd330e 	.word	0xabcd330e
 8002ebc:	e66d1234 	.word	0xe66d1234
 8002ec0:	0005deec 	.word	0x0005deec
 8002ec4:	5851f42d 	.word	0x5851f42d
 8002ec8:	4c957f2d 	.word	0x4c957f2d

08002ecc <malloc>:
 8002ecc:	4b02      	ldr	r3, [pc, #8]	; (8002ed8 <malloc+0xc>)
 8002ece:	4601      	mov	r1, r0
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	f000 b803 	b.w	8002edc <_malloc_r>
 8002ed6:	bf00      	nop
 8002ed8:	20000020 	.word	0x20000020

08002edc <_malloc_r>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	1ccd      	adds	r5, r1, #3
 8002ee0:	f025 0503 	bic.w	r5, r5, #3
 8002ee4:	3508      	adds	r5, #8
 8002ee6:	2d0c      	cmp	r5, #12
 8002ee8:	bf38      	it	cc
 8002eea:	250c      	movcc	r5, #12
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	4606      	mov	r6, r0
 8002ef0:	db01      	blt.n	8002ef6 <_malloc_r+0x1a>
 8002ef2:	42a9      	cmp	r1, r5
 8002ef4:	d903      	bls.n	8002efe <_malloc_r+0x22>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	2000      	movs	r0, #0
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	f000 f857 	bl	8002fb0 <__malloc_lock>
 8002f02:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <_malloc_r+0xac>)
 8002f04:	6814      	ldr	r4, [r2, #0]
 8002f06:	4621      	mov	r1, r4
 8002f08:	b991      	cbnz	r1, 8002f30 <_malloc_r+0x54>
 8002f0a:	4c20      	ldr	r4, [pc, #128]	; (8002f8c <_malloc_r+0xb0>)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	b91b      	cbnz	r3, 8002f18 <_malloc_r+0x3c>
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 f83d 	bl	8002f90 <_sbrk_r>
 8002f16:	6020      	str	r0, [r4, #0]
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f000 f838 	bl	8002f90 <_sbrk_r>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d124      	bne.n	8002f6e <_malloc_r+0x92>
 8002f24:	230c      	movs	r3, #12
 8002f26:	4630      	mov	r0, r6
 8002f28:	6033      	str	r3, [r6, #0]
 8002f2a:	f000 f842 	bl	8002fb2 <__malloc_unlock>
 8002f2e:	e7e4      	b.n	8002efa <_malloc_r+0x1e>
 8002f30:	680b      	ldr	r3, [r1, #0]
 8002f32:	1b5b      	subs	r3, r3, r5
 8002f34:	d418      	bmi.n	8002f68 <_malloc_r+0x8c>
 8002f36:	2b0b      	cmp	r3, #11
 8002f38:	d90f      	bls.n	8002f5a <_malloc_r+0x7e>
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	18cc      	adds	r4, r1, r3
 8002f3e:	50cd      	str	r5, [r1, r3]
 8002f40:	4630      	mov	r0, r6
 8002f42:	f000 f836 	bl	8002fb2 <__malloc_unlock>
 8002f46:	f104 000b 	add.w	r0, r4, #11
 8002f4a:	1d23      	adds	r3, r4, #4
 8002f4c:	f020 0007 	bic.w	r0, r0, #7
 8002f50:	1ac3      	subs	r3, r0, r3
 8002f52:	d0d3      	beq.n	8002efc <_malloc_r+0x20>
 8002f54:	425a      	negs	r2, r3
 8002f56:	50e2      	str	r2, [r4, r3]
 8002f58:	e7d0      	b.n	8002efc <_malloc_r+0x20>
 8002f5a:	684b      	ldr	r3, [r1, #4]
 8002f5c:	428c      	cmp	r4, r1
 8002f5e:	bf16      	itet	ne
 8002f60:	6063      	strne	r3, [r4, #4]
 8002f62:	6013      	streq	r3, [r2, #0]
 8002f64:	460c      	movne	r4, r1
 8002f66:	e7eb      	b.n	8002f40 <_malloc_r+0x64>
 8002f68:	460c      	mov	r4, r1
 8002f6a:	6849      	ldr	r1, [r1, #4]
 8002f6c:	e7cc      	b.n	8002f08 <_malloc_r+0x2c>
 8002f6e:	1cc4      	adds	r4, r0, #3
 8002f70:	f024 0403 	bic.w	r4, r4, #3
 8002f74:	42a0      	cmp	r0, r4
 8002f76:	d005      	beq.n	8002f84 <_malloc_r+0xa8>
 8002f78:	1a21      	subs	r1, r4, r0
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f000 f808 	bl	8002f90 <_sbrk_r>
 8002f80:	3001      	adds	r0, #1
 8002f82:	d0cf      	beq.n	8002f24 <_malloc_r+0x48>
 8002f84:	6025      	str	r5, [r4, #0]
 8002f86:	e7db      	b.n	8002f40 <_malloc_r+0x64>
 8002f88:	200000ac 	.word	0x200000ac
 8002f8c:	200000b0 	.word	0x200000b0

08002f90 <_sbrk_r>:
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	2300      	movs	r3, #0
 8002f94:	4c05      	ldr	r4, [pc, #20]	; (8002fac <_sbrk_r+0x1c>)
 8002f96:	4605      	mov	r5, r0
 8002f98:	4608      	mov	r0, r1
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	f7fe fd8c 	bl	8001ab8 <_sbrk>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_sbrk_r+0x1a>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_sbrk_r+0x1a>
 8002fa8:	602b      	str	r3, [r5, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	20000110 	.word	0x20000110

08002fb0 <__malloc_lock>:
 8002fb0:	4770      	bx	lr

08002fb2 <__malloc_unlock>:
 8002fb2:	4770      	bx	lr

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
